// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cschat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSChatChannelType {
    /// <summary>
    /// 消息频道类型
    /// </summary>
    KCschatChannelTypeNone = 0,
    /// <summary>
    /// 消息频道类型
    /// </summary>
    KCschatChannelTypeWorld = 1,
    /// <summary>
    /// 消息频道类型
    /// </summary>
    KCschatChannelTypeP2P = 2,
    /// <summary>
    /// 消息频道类型
    /// </summary>
    KCschatChannelTypeSvr = 3,
    /// <summary>
    /// Max
    /// </summary>
    KCschatChannelTypeMax = 4,
  }

  public enum CSChatMsgType {
    /// <summary>
    /// 消息类型
    /// </summary>
    KCschatMsgTypeNone = 0,
    /// <summary>
    /// 消息类型
    /// </summary>
    KCschatMsgTypeText = 1,
    /// <summary>
    /// 消息类型
    /// </summary>
    KCschatMsgTypeVoice = 2,
    /// <summary>
    /// 消息类型
    /// </summary>
    KCschatMsgTypeSystem = 3,
    /// <summary>
    /// Max
    /// </summary>
    KCschatMsgTypeMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSChatMsgItem : pb::IMessage {
    private static readonly pb::MessageParser<CSChatMsgItem> _parser = new pb::MessageParser<CSChatMsgItem>(() => new CSChatMsgItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatMsgItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "seq" field.</summary>
    public const int SeqFieldNumber = 1;
    private string seq_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Seq {
      get { return seq_; }
      set {
        seq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "suid" field.</summary>
    public const int SuidFieldNumber = 2;
    private long suid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Suid {
      get { return suid_; }
      set {
        suid_ = value;
      }
    }

    /// <summary>Field number for the "sattr" field.</summary>
    public const int SattrFieldNumber = 3;
    private pb::ByteString sattr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Sattr {
      get { return sattr_; }
      set {
        sattr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stime" field.</summary>
    public const int StimeFieldNumber = 4;
    private long stime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Stime {
      get { return stime_; }
      set {
        stime_ = value;
      }
    }

    /// <summary>Field number for the "rcvid" field.</summary>
    public const int RcvidFieldNumber = 5;
    private long rcvid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rcvid {
      get { return rcvid_; }
      set {
        rcvid_ = value;
      }
    }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 6;
    private global::Csp.CSChatChannelType channelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 7;
    private global::Csp.CSChatMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 8;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Seq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Seq);
      }
      if (Suid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Suid);
      }
      if (Sattr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Sattr);
      }
      if (Stime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Stime);
      }
      if (Rcvid != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Rcvid);
      }
      if (ChannelType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ChannelType);
      }
      if (MsgType != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) MsgType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Seq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Seq);
      }
      if (Suid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Suid);
      }
      if (Sattr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Sattr);
      }
      if (Stime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Stime);
      }
      if (Rcvid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rcvid);
      }
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Seq = input.ReadString();
            break;
          }
          case 16: {
            Suid = input.ReadInt64();
            break;
          }
          case 26: {
            Sattr = input.ReadBytes();
            break;
          }
          case 32: {
            Stime = input.ReadInt64();
            break;
          }
          case 40: {
            Rcvid = input.ReadInt64();
            break;
          }
          case 48: {
            channelType_ = (global::Csp.CSChatChannelType) input.ReadEnum();
            break;
          }
          case 56: {
            msgType_ = (global::Csp.CSChatMsgType) input.ReadEnum();
            break;
          }
          case 66: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatSubList : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSubList> _parser = new pb::MessageParser<CSChatSubList>(() => new CSChatSubList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSubList> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_list_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> list_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatMsgItems : pb::IMessage {
    private static readonly pb::MessageParser<CSChatMsgItems> _parser = new pb::MessageParser<CSChatMsgItems>(() => new CSChatMsgItems());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatMsgItems> Parser { get { return _parser; } }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private global::Csp.CSChatChannelType channelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private long channelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "msgs" field.</summary>
    public const int MsgsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_msgs_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> msgs_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Msgs {
      get { return msgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (ChannelId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChannelId);
      }
      msgs_.WriteTo(output, _repeated_msgs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (ChannelId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChannelId);
      }
      size += msgs_.CalculateSize(_repeated_msgs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            channelType_ = (global::Csp.CSChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            ChannelId = input.ReadInt64();
            break;
          }
          case 26: {
            msgs_.AddEntriesFrom(input, _repeated_msgs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSChatSendReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSendReq> _parser = new pb::MessageParser<CSChatSendReq>(() => new CSChatSendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private global::Csp.CSChatChannelType channelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "rcvid" field.</summary>
    public const int RcvidFieldNumber = 2;
    private long rcvid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rcvid {
      get { return rcvid_; }
      set {
        rcvid_ = value;
      }
    }

    /// <summary>Field number for the "msg_type" field.</summary>
    public const int MsgTypeFieldNumber = 3;
    private global::Csp.CSChatMsgType msgType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatMsgType MsgType {
      get { return msgType_; }
      set {
        msgType_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (Rcvid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Rcvid);
      }
      if (MsgType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MsgType);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (Rcvid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rcvid);
      }
      if (MsgType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MsgType);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            channelType_ = (global::Csp.CSChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            Rcvid = input.ReadInt64();
            break;
          }
          case 24: {
            msgType_ = (global::Csp.CSChatMsgType) input.ReadEnum();
            break;
          }
          case 34: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatSendResp : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSendResp> _parser = new pb::MessageParser<CSChatSendResp>(() => new CSChatSendResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSendResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatSendNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSendNotify> _parser = new pb::MessageParser<CSChatSendNotify>(() => new CSChatSendNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSendNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_msg_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> msg_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Msg {
      get { return msg_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      msg_.WriteTo(output, _repeated_msg_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += msg_.CalculateSize(_repeated_msg_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            msg_.AddEntriesFrom(input, _repeated_msg_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatPullReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChatPullReq> _parser = new pb::MessageParser<CSChatPullReq>(() => new CSChatPullReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatPullReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "channel_type" field.</summary>
    public const int ChannelTypeFieldNumber = 1;
    private global::Csp.CSChatChannelType channelType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatChannelType ChannelType {
      get { return channelType_; }
      set {
        channelType_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ChannelType);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChannelType);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            channelType_ = (global::Csp.CSChatChannelType) input.ReadEnum();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatPullResp : pb::IMessage {
    private static readonly pb::MessageParser<CSChatPullResp> _parser = new pb::MessageParser<CSChatPullResp>(() => new CSChatPullResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatPullResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private global::Csp.CSChatMsgItems msg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSChatMsgItems Msg {
      get { return msg_; }
      set {
        msg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (msg_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (msg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (msg_ == null) {
              msg_ = new global::Csp.CSChatMsgItems();
            }
            input.ReadMessage(msg_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatSubListReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSubListReq> _parser = new pb::MessageParser<CSChatSubListReq>(() => new CSChatSubListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSubListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSChatSubListResp : pb::IMessage {
    private static readonly pb::MessageParser<CSChatSubListResp> _parser = new pb::MessageParser<CSChatSubListResp>(() => new CSChatSubListResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatSubListResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "sub_list" field.</summary>
    public const int SubListFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Csp.CSChatSubList>.Codec _map_subList_codec
        = new pbc::MapField<int, global::Csp.CSChatSubList>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Csp.CSChatSubList.Parser), 10);
    private readonly pbc::MapField<int, global::Csp.CSChatSubList> subList_ = new pbc::MapField<int, global::Csp.CSChatSubList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Csp.CSChatSubList> SubList {
      get { return subList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subList_.WriteTo(output, _map_subList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subList_.CalculateSize(_map_subList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            subList_.AddEntriesFrom(input, _map_subList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatBanReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChatBanReq> _parser = new pb::MessageParser<CSChatBanReq>(() => new CSChatBanReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatBanReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSChatBanNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSChatBanNotify> _parser = new pb::MessageParser<CSChatBanNotify>(() => new CSChatBanNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatBanNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 1;
    private global::Datap.RoleChatInfo chat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleChatInfo Chat {
      get { return chat_; }
      set {
        chat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Chat);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chat);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (chat_ == null) {
              chat_ = new global::Datap.RoleChatInfo();
            }
            input.ReadMessage(chat_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSChatRoleDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChatRoleDataReq> _parser = new pb::MessageParser<CSChatRoleDataReq>(() => new CSChatRoleDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatRoleDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSChatRoleDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSChatRoleDataNotify> _parser = new pb::MessageParser<CSChatRoleDataNotify>(() => new CSChatRoleDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChatRoleDataNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Datap.RoleDataBriefForChat data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleDataBriefForChat Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Datap.RoleDataBriefForChat();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
