// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csdress.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSHeadShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadShowReq> _parser = new pb::MessageParser<CSHeadShowReq>(() => new CSHeadShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadShowReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 1;
    private int headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeadShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadShowResp> _parser = new pb::MessageParser<CSHeadShowResp>(() => new CSHeadShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadShowResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 1;
    private int headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeadUnShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadUnShowReq> _parser = new pb::MessageParser<CSHeadUnShowReq>(() => new CSHeadUnShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadUnShowReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSHeadUnShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadUnShowResp> _parser = new pb::MessageParser<CSHeadUnShowResp>(() => new CSHeadUnShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadUnShowResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSFrameShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameShowReq> _parser = new pb::MessageParser<CSFrameShowReq>(() => new CSFrameShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameShowReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSFrameShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameShowResp> _parser = new pb::MessageParser<CSFrameShowResp>(() => new CSFrameShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameShowResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSFrameUnShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameUnShowReq> _parser = new pb::MessageParser<CSFrameUnShowReq>(() => new CSFrameUnShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameUnShowReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSFrameUnShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameUnShowResp> _parser = new pb::MessageParser<CSFrameUnShowResp>(() => new CSFrameUnShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameUnShowResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSDragonShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSDragonShowReq> _parser = new pb::MessageParser<CSDragonShowReq>(() => new CSDragonShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDragonShowReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_list" field.</summary>
    public const int DragonListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_dragonList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> dragonList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DragonList {
      get { return dragonList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dragonList_.WriteTo(output, _repeated_dragonList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dragonList_.CalculateSize(_repeated_dragonList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dragonList_.AddEntriesFrom(input, _repeated_dragonList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSDragonShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSDragonShowResp> _parser = new pb::MessageParser<CSDragonShowResp>(() => new CSDragonShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDragonShowResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_list" field.</summary>
    public const int DragonListFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_dragonList_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> dragonList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DragonList {
      get { return dragonList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dragonList_.WriteTo(output, _repeated_dragonList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dragonList_.CalculateSize(_repeated_dragonList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dragonList_.AddEntriesFrom(input, _repeated_dragonList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinShowReq> _parser = new pb::MessageParser<CSSkinShowReq>(() => new CSSkinShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinShowReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 1;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DragonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DragonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DragonId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinShowResp> _parser = new pb::MessageParser<CSSkinShowResp>(() => new CSSkinShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinShowResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 1;
    private global::Datap.RoleDressSkinData skin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleDressSkinData Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (skin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Skin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (skin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (skin_ == null) {
              skin_ = new global::Datap.RoleDressSkinData();
            }
            input.ReadMessage(skin_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinUnShowReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinUnShowReq> _parser = new pb::MessageParser<CSSkinUnShowReq>(() => new CSSkinUnShowReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinUnShowReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSkinUnShowResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinUnShowResp> _parser = new pb::MessageParser<CSSkinUnShowResp>(() => new CSSkinUnShowResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinUnShowResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
