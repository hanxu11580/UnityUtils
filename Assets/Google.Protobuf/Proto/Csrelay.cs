// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrelay.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSRelayRoomStatus {
    KCsrelayRoomStatusNone = 0,
    KCsrelayRoomStatusStart = 1,
    KCsrelayRoomStatusEnd = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCsrelayRoomStatusMax = 3,
  }

  public enum CSRelayFrameServerType {
    KCsrelayFrameServerTypeNone = 0,
    KCsrelayFrameServerTypeNormal = 1,
    KCsrelayFrameServerTypeRecord = 2,
    KCsrelayFrameServerTypeMax = 3,
  }

  public enum CSRelayFrameClientType {
    KCsrelayFrameClientTypeNone = 0,
    KCsrelayFrameClientTypeFrame = 1,
    KCsrelayFrameClientTypePos = 2,
    KCsrelayFrameClientTypeEvent = 3,
    KCsrelayFrameClientTypeMax = 4,
  }

  public enum CSRelayEndResult {
    /// <summary>
    /// 失败
    /// </summary>
    KCsrelayEndResultLose = 0,
    /// <summary>
    /// 胜利
    /// </summary>
    KCsrelayEndResultWin = 1,
    /// <summary>
    /// 中途退出
    /// </summary>
    KCsrelayEndResultExit = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCsrelayEndResultMax = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSRelayPlayer : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayer> _parser = new pb::MessageParser<CSRelayPlayer>(() => new CSRelayPlayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayer> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 2;
    private int ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    /// <summary>Field number for the "active_tick" field.</summary>
    public const int ActiveTickFieldNumber = 3;
    private long activeTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActiveTick {
      get { return activeTick_; }
      set {
        activeTick_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private int online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Ready != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ready);
      }
      if (ActiveTick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ActiveTick);
      }
      if (Online != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Ready != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ready);
      }
      if (ActiveTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActiveTick);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            Ready = input.ReadInt32();
            break;
          }
          case 24: {
            ActiveTick = input.ReadInt64();
            break;
          }
          case 32: {
            Online = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayFrame : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayFrame> _parser = new pb::MessageParser<CSRelayFrame>(() => new CSRelayFrame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayFrame> Parser { get { return _parser; } }

    /// <summary>Field number for the "server_type" field.</summary>
    public const int ServerTypeFieldNumber = 1;
    private int serverType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "client_type" field.</summary>
    public const int ClientTypeFieldNumber = 2;
    private int clientType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientType {
      get { return clientType_; }
      set {
        clientType_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 3;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerType);
      }
      if (ClientType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ClientType);
      }
      if (Uid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Uid);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (ClientType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientType);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerType = input.ReadInt32();
            break;
          }
          case 16: {
            ClientType = input.ReadInt32();
            break;
          }
          case 24: {
            Uid = input.ReadInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayRoom : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayRoom> _parser = new pb::MessageParser<CSRelayRoom>(() => new CSRelayRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayRoom> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Csp.CSRelayPlayer> _repeated_player_codec
        = pb::FieldCodec.ForMessage(26, global::Csp.CSRelayPlayer.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRelayPlayer> player_ = new pbc::RepeatedField<global::Csp.CSRelayPlayer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRelayPlayer> Player {
      get { return player_; }
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Csp.CSRelayFrame> _repeated_record_codec
        = pb::FieldCodec.ForMessage(34, global::Csp.CSRelayFrame.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRelayFrame> record_ = new pbc::RepeatedField<global::Csp.CSRelayFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRelayFrame> Record {
      get { return record_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Status);
      }
      player_.WriteTo(output, _repeated_player_codec);
      record_.WriteTo(output, _repeated_record_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      size += player_.CalculateSize(_repeated_player_codec);
      size += record_.CalculateSize(_repeated_record_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Status = input.ReadInt32();
            break;
          }
          case 26: {
            player_.AddEntriesFrom(input, _repeated_player_codec);
            break;
          }
          case 34: {
            record_.AddEntriesFrom(input, _repeated_record_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSRelayPlayerConnectNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayerConnectNotify> _parser = new pb::MessageParser<CSRelayPlayerConnectNotify>(() => new CSRelayPlayerConnectNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayerConnectNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayPlayerReadyReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayerReadyReq> _parser = new pb::MessageParser<CSRelayPlayerReadyReq>(() => new CSRelayPlayerReadyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayerReadyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayPlayerReadyResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayerReadyResp> _parser = new pb::MessageParser<CSRelayPlayerReadyResp>(() => new CSRelayPlayerReadyResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayerReadyResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayPlayerReadyNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayerReadyNotify> _parser = new pb::MessageParser<CSRelayPlayerReadyNotify>(() => new CSRelayPlayerReadyNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayerReadyNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayPlayerStatusNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayPlayerStatusNotify> _parser = new pb::MessageParser<CSRelayPlayerStatusNotify>(() => new CSRelayPlayerStatusNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayPlayerStatusNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "active_tick" field.</summary>
    public const int ActiveTickFieldNumber = 3;
    private long activeTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActiveTick {
      get { return activeTick_; }
      set {
        activeTick_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private int online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (ActiveTick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ActiveTick);
      }
      if (Online != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (ActiveTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActiveTick);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            ActiveTick = input.ReadInt64();
            break;
          }
          case 32: {
            Online = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayStartNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayStartNotify> _parser = new pb::MessageParser<CSRelayStartNotify>(() => new CSRelayStartNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayStartNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayRoomReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayRoomReq> _parser = new pb::MessageParser<CSRelayRoomReq>(() => new CSRelayRoomReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayRoomReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayRoomResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayRoomResp> _parser = new pb::MessageParser<CSRelayRoomResp>(() => new CSRelayRoomResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayRoomResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private global::Csp.CSRelayRoom room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRelayRoom Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (room_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (room_ == null) {
              room_ = new global::Csp.CSRelayRoom();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayRoomNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayRoomNotify> _parser = new pb::MessageParser<CSRelayRoomNotify>(() => new CSRelayRoomNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayRoomNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 1;
    private global::Csp.CSRelayRoom room_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRelayRoom Room {
      get { return room_; }
      set {
        room_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (room_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Room);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (room_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (room_ == null) {
              room_ = new global::Csp.CSRelayRoom();
            }
            input.ReadMessage(room_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayFrameInputReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayFrameInputReq> _parser = new pb::MessageParser<CSRelayFrameInputReq>(() => new CSRelayFrameInputReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayFrameInputReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSRelayFrame> _repeated_frame_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSRelayFrame.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRelayFrame> frame_ = new pbc::RepeatedField<global::Csp.CSRelayFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRelayFrame> Frame {
      get { return frame_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frame_.WriteTo(output, _repeated_frame_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frame_.CalculateSize(_repeated_frame_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            frame_.AddEntriesFrom(input, _repeated_frame_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayFrameInputNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayFrameInputNotify> _parser = new pb::MessageParser<CSRelayFrameInputNotify>(() => new CSRelayFrameInputNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayFrameInputNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "frame" field.</summary>
    public const int FrameFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSRelayFrame> _repeated_frame_codec
        = pb::FieldCodec.ForMessage(18, global::Csp.CSRelayFrame.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRelayFrame> frame_ = new pbc::RepeatedField<global::Csp.CSRelayFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRelayFrame> Frame {
      get { return frame_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      frame_.WriteTo(output, _repeated_frame_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      size += frame_.CalculateSize(_repeated_frame_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            frame_.AddEntriesFrom(input, _repeated_frame_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayEndReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayEndReq> _parser = new pb::MessageParser<CSRelayEndReq>(() => new CSRelayEndReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayEndReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Result);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Result = input.ReadInt32();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayEndResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayEndResp> _parser = new pb::MessageParser<CSRelayEndResp>(() => new CSRelayEndResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayEndResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelayEndNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRelayEndNotify> _parser = new pb::MessageParser<CSRelayEndNotify>(() => new CSRelayEndNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelayEndNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomid" field.</summary>
    public const int RoomidFieldNumber = 1;
    private long roomid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Roomid {
      get { return roomid_; }
      set {
        roomid_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 3;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Roomid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Roomid);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (Result != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Result);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Roomid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Roomid);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Roomid = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            Result = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
