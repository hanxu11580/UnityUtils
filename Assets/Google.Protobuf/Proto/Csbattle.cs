// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csbattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSPveQuitReasonType {
    /// <summary>
    /// 正常退
    /// </summary>
    PveQuitReasonTypeNormal = 0,
    /// <summary>
    /// 下线退出
    /// </summary>
    PveQuitReasonTypeOffline = 1,
    /// <summary>
    /// Max
    /// </summary>
    KCspveQuitReasonTypeMax = 2,
  }

  public enum CSPveDataType {
    /// <summary>
    /// 挑战成功
    /// </summary>
    PveDataTypeWin = 0,
    /// <summary>
    /// 战斗时间
    /// </summary>
    PveDataTypeTime = 1,
    /// <summary>
    /// 存活人数
    /// </summary>
    PveDataTypeAliveNum = 2,
    /// <summary>
    /// 累积伤害
    /// </summary>
    PveDataTypeDamage = 3,
    /// <summary>
    /// 英雄数据
    /// </summary>
    PveDataTypeHeroData = 4,
    /// <summary>
    /// 怪物数据
    /// </summary>
    PveDataTypeMonsterData = 5,
    /// <summary>
    /// 死亡人数
    /// </summary>
    PveDataTypeDieNum = 6,
    /// <summary>
    /// 伤害万分比
    /// </summary>
    PveDataTypeDamagePercent = 7,
    /// <summary>
    /// 英雄数据
    /// </summary>
    PveDataTypeAllHero = 8,
    /// <summary>
    /// 战斗帧数
    /// </summary>
    PveDataTypeBattleFrame = 9,
    /// <summary>
    /// mvpid
    /// </summary>
    PveDataTypeMvpId = 10,
    /// <summary>
    /// 剩余血量百分比
    /// </summary>
    PveDataTypeHppercent = 11,
    /// <summary>
    /// 最大值
    /// </summary>
    PveDataTypeMax = 12,
    /// <summary>
    /// Max
    /// </summary>
    KCspveDataTypeMax = 13,
  }

  public enum CSPveResultType {
    /// <summary>
    /// 胜利
    /// </summary>
    PveResultTypeWin = 0,
    /// <summary>
    /// 投降
    /// </summary>
    PveResultTypeSurrender = 1,
    /// <summary>
    /// 失败
    /// </summary>
    PveResultTypeLose = 2,
    /// <summary>
    /// 超时
    /// </summary>
    PveResultTypeTimeOut = 3,
    /// <summary>
    /// Max
    /// </summary>
    KCspveResultTypeMax = 4,
  }

  public enum CSVerifyStatus {
    /// <summary>
    /// 验证失败
    /// </summary>
    VerifyFail = 0,
    /// <summary>
    /// 验证成功
    /// </summary>
    VerifySucc = 1,
    /// <summary>
    /// Max
    /// </summary>
    KCsverifyStatusMax = 2,
  }

  public enum CSVerifyServerStatus {
    /// <summary>
    /// 服务正常
    /// </summary>
    ServerOn = 0,
    /// <summary>
    /// 服务繁忙
    /// </summary>
    ServerBusy = 1,
    /// <summary>
    /// 服务异常
    /// </summary>
    ServerError = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCsverifyServerStatusMax = 3,
  }

  public enum CSVerifyBattleStatus {
    None = 0,
    Playing = 1,
    Finish = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCsverifyBattleStatusMax = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSAttrItem : pb::IMessage {
    private static readonly pb::MessageParser<CSAttrItem> _parser = new pb::MessageParser<CSAttrItem>(() => new CSAttrItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAttrItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Csp.CSEnmPlayerAttr name_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSEnmPlayerAttr Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Name);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            name_ = (global::Csp.CSEnmPlayerAttr) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerAttr : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerAttr> _parser = new pb::MessageParser<CSPlayerAttr>(() => new CSPlayerAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSAttrItem> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSAttrItem.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSAttrItem> data_ = new pbc::RepeatedField<global::Csp.CSAttrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSAttrItem> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStateRespSpec : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStateRespSpec> _parser = new pb::MessageParser<CSPveStateRespSpec>(() => new CSPveStateRespSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStateRespSpec> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::Csp.CSStageStateResp stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSStageStateResp Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "expedition" field.</summary>
    public const int ExpeditionFieldNumber = 2;
    private global::Csp.CSExpeditionTrialStateResp expedition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSExpeditionTrialStateResp Expedition {
      get { return expedition_; }
      set {
        expedition_ = value;
      }
    }

    /// <summary>Field number for the "dungeon" field.</summary>
    public const int DungeonFieldNumber = 3;
    private global::Csp.CSDungeonStateResp dungeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSDungeonStateResp Dungeon {
      get { return dungeon_; }
      set {
        dungeon_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon_story" field.</summary>
    public const int ElementDragonStoryFieldNumber = 4;
    private global::Csp.CSElementDragonStoryStateResp elementDragonStory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSElementDragonStoryStateResp ElementDragonStory {
      get { return elementDragonStory_; }
      set {
        elementDragonStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stage);
      }
      if (expedition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expedition);
      }
      if (dungeon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dungeon);
      }
      if (elementDragonStory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ElementDragonStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      if (expedition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expedition);
      }
      if (dungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dungeon);
      }
      if (elementDragonStory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDragonStory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stage_ == null) {
              stage_ = new global::Csp.CSStageStateResp();
            }
            input.ReadMessage(stage_);
            break;
          }
          case 18: {
            if (expedition_ == null) {
              expedition_ = new global::Csp.CSExpeditionTrialStateResp();
            }
            input.ReadMessage(expedition_);
            break;
          }
          case 26: {
            if (dungeon_ == null) {
              dungeon_ = new global::Csp.CSDungeonStateResp();
            }
            input.ReadMessage(dungeon_);
            break;
          }
          case 34: {
            if (elementDragonStory_ == null) {
              elementDragonStory_ = new global::Csp.CSElementDragonStoryStateResp();
            }
            input.ReadMessage(elementDragonStory_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStartCommon : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStartCommon> _parser = new pb::MessageParser<CSPveStartCommon>(() => new CSPveStartCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStartCommon> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon_id" field.</summary>
    public const int ElementDragonIdFieldNumber = 2;
    private int elementDragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ElementDragonId {
      get { return elementDragonId_; }
      set {
        elementDragonId_ = value;
      }
    }

    /// <summary>Field number for the "cost_bonus" field.</summary>
    public const int CostBonusFieldNumber = 3;
    private int costBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CostBonus {
      get { return costBonus_; }
      set {
        costBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      if (ElementDragonId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ElementDragonId);
      }
      if (CostBonus != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CostBonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (ElementDragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ElementDragonId);
      }
      if (CostBonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostBonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            ElementDragonId = input.ReadInt32();
            break;
          }
          case 24: {
            CostBonus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStartRespSpec : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStartRespSpec> _parser = new pb::MessageParser<CSPveStartRespSpec>(() => new CSPveStartRespSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStartRespSpec> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::Csp.CSStageStartResp stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSStageStartResp Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "expedition" field.</summary>
    public const int ExpeditionFieldNumber = 2;
    private global::Csp.CSExpeditionTrialStartResp expedition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSExpeditionTrialStartResp Expedition {
      get { return expedition_; }
      set {
        expedition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stage);
      }
      if (expedition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expedition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      if (expedition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expedition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stage_ == null) {
              stage_ = new global::Csp.CSStageStartResp();
            }
            input.ReadMessage(stage_);
            break;
          }
          case 18: {
            if (expedition_ == null) {
              expedition_ = new global::Csp.CSExpeditionTrialStartResp();
            }
            input.ReadMessage(expedition_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishReqSpec : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishReqSpec> _parser = new pb::MessageParser<CSPveFinishReqSpec>(() => new CSPveFinishReqSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishReqSpec> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::Csp.CSStageFinishReq stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSStageFinishReq Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "expedition" field.</summary>
    public const int ExpeditionFieldNumber = 2;
    private global::Csp.CSExpeditionTrialFinishReq expedition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSExpeditionTrialFinishReq Expedition {
      get { return expedition_; }
      set {
        expedition_ = value;
      }
    }

    /// <summary>Field number for the "dungeon" field.</summary>
    public const int DungeonFieldNumber = 3;
    private global::Csp.CSDungeonFinishReq dungeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSDungeonFinishReq Dungeon {
      get { return dungeon_; }
      set {
        dungeon_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon_story" field.</summary>
    public const int ElementDragonStoryFieldNumber = 4;
    private global::Csp.CSElementDragonStoryFinishReq elementDragonStory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSElementDragonStoryFinishReq ElementDragonStory {
      get { return elementDragonStory_; }
      set {
        elementDragonStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stage);
      }
      if (expedition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expedition);
      }
      if (dungeon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dungeon);
      }
      if (elementDragonStory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ElementDragonStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      if (expedition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expedition);
      }
      if (dungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dungeon);
      }
      if (elementDragonStory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDragonStory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stage_ == null) {
              stage_ = new global::Csp.CSStageFinishReq();
            }
            input.ReadMessage(stage_);
            break;
          }
          case 18: {
            if (expedition_ == null) {
              expedition_ = new global::Csp.CSExpeditionTrialFinishReq();
            }
            input.ReadMessage(expedition_);
            break;
          }
          case 26: {
            if (dungeon_ == null) {
              dungeon_ = new global::Csp.CSDungeonFinishReq();
            }
            input.ReadMessage(dungeon_);
            break;
          }
          case 34: {
            if (elementDragonStory_ == null) {
              elementDragonStory_ = new global::Csp.CSElementDragonStoryFinishReq();
            }
            input.ReadMessage(elementDragonStory_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishRespSpec : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishRespSpec> _parser = new pb::MessageParser<CSPveFinishRespSpec>(() => new CSPveFinishRespSpec());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishRespSpec> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::Csp.CSStageFinishResp stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSStageFinishResp Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "dungeon" field.</summary>
    public const int DungeonFieldNumber = 3;
    private global::Csp.CSDungeonFinishResp dungeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSDungeonFinishResp Dungeon {
      get { return dungeon_; }
      set {
        dungeon_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon_story" field.</summary>
    public const int ElementDragonStoryFieldNumber = 4;
    private global::Csp.CSElementDragonStoryFinishResp elementDragonStory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSElementDragonStoryFinishResp ElementDragonStory {
      get { return elementDragonStory_; }
      set {
        elementDragonStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stage);
      }
      if (dungeon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dungeon);
      }
      if (elementDragonStory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ElementDragonStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      if (dungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dungeon);
      }
      if (elementDragonStory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDragonStory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stage_ == null) {
              stage_ = new global::Csp.CSStageFinishResp();
            }
            input.ReadMessage(stage_);
            break;
          }
          case 26: {
            if (dungeon_ == null) {
              dungeon_ = new global::Csp.CSDungeonFinishResp();
            }
            input.ReadMessage(dungeon_);
            break;
          }
          case 34: {
            if (elementDragonStory_ == null) {
              elementDragonStory_ = new global::Csp.CSElementDragonStoryFinishResp();
            }
            input.ReadMessage(elementDragonStory_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSBattleFinishCommon : pb::IMessage {
    private static readonly pb::MessageParser<CSBattleFinishCommon> _parser = new pb::MessageParser<CSBattleFinishCommon>(() => new CSBattleFinishCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBattleFinishCommon> Parser { get { return _parser; } }

    /// <summary>Field number for the "pve_id" field.</summary>
    public const int PveIdFieldNumber = 1;
    private int pveId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PveId {
      get { return pveId_; }
      set {
        pveId_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "origin_items" field.</summary>
    public const int OriginItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_originItems_codec
        = pb::FieldCodec.ForMessage(34, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> originItems_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> OriginItems {
      get { return originItems_; }
    }

    /// <summary>Field number for the "transfered_items" field.</summary>
    public const int TransferedItemsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Csp.CSItemTransfer> _repeated_transferedItems_codec
        = pb::FieldCodec.ForMessage(42, global::Csp.CSItemTransfer.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSItemTransfer> transferedItems_ = new pbc::RepeatedField<global::Csp.CSItemTransfer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSItemTransfer> TransferedItems {
      get { return transferedItems_; }
    }

    /// <summary>Field number for the "equipment_awards" field.</summary>
    public const int EquipmentAwardsFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipmentAwards_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 26);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipmentAwards_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> EquipmentAwards {
      get { return equipmentAwards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PveId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PveId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      equipmentAwards_.WriteTo(output, _map_equipmentAwards_codec);
      originItems_.WriteTo(output, _repeated_originItems_codec);
      transferedItems_.WriteTo(output, _repeated_transferedItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PveId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += originItems_.CalculateSize(_repeated_originItems_codec);
      size += transferedItems_.CalculateSize(_repeated_transferedItems_codec);
      size += equipmentAwards_.CalculateSize(_map_equipmentAwards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PveId = input.ReadInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 26: {
            equipmentAwards_.AddEntriesFrom(input, _map_equipmentAwards_codec);
            break;
          }
          case 34: {
            originItems_.AddEntriesFrom(input, _repeated_originItems_codec);
            break;
          }
          case 42: {
            transferedItems_.AddEntriesFrom(input, _repeated_transferedItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishData : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishData> _parser = new pb::MessageParser<CSPveFinishData>(() => new CSPveFinishData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Csp.CSPveDataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveDataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Csp.CSPveDataType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishCommon : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishCommon> _parser = new pb::MessageParser<CSPveFinishCommon>(() => new CSPveFinishCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishCommon> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "pve_data" field.</summary>
    public const int PveDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSPveFinishData> _repeated_pveData_codec
        = pb::FieldCodec.ForMessage(18, global::Csp.CSPveFinishData.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSPveFinishData> pveData_ = new pbc::RepeatedField<global::Csp.CSPveFinishData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSPveFinishData> PveData {
      get { return pveData_; }
    }

    /// <summary>Field number for the "glog_data" field.</summary>
    public const int GlogDataFieldNumber = 3;
    private pb::ByteString glogData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlogData {
      get { return glogData_; }
      set {
        glogData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "curr_wave" field.</summary>
    public const int CurrWaveFieldNumber = 4;
    private int currWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrWave {
      get { return currWave_; }
      set {
        currWave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
      pveData_.WriteTo(output, _repeated_pveData_codec);
      if (GlogData.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GlogData);
      }
      if (CurrWave != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrWave);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      size += pveData_.CalculateSize(_repeated_pveData_codec);
      if (GlogData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlogData);
      }
      if (CurrWave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrWave);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 18: {
            pveData_.AddEntriesFrom(input, _repeated_pveData_codec);
            break;
          }
          case 26: {
            GlogData = input.ReadBytes();
            break;
          }
          case 32: {
            CurrWave = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishSettleData : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishSettleData> _parser = new pb::MessageParser<CSPveFinishSettleData>(() => new CSPveFinishSettleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishSettleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 2;
    private global::Csp.CSBattleFinishCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSBattleFinishCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 3;
    private global::Csp.CSPveFinishRespSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishRespSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (common_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Common);
      }
      if (spec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 18: {
            if (common_ == null) {
              common_ = new global::Csp.CSBattleFinishCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 26: {
            if (spec_ == null) {
              spec_ = new global::Csp.CSPveFinishRespSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSBattlePlayerData : pb::IMessage {
    private static readonly pb::MessageParser<CSBattlePlayerData> _parser = new pb::MessageParser<CSBattlePlayerData>(() => new CSBattlePlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBattlePlayerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private long width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 3;
    private bool win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Width);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Height);
      }
      if (Win != false) {
        output.WriteRawTag(24);
        output.WriteBool(Win);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Width);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Height);
      }
      if (Win != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt64();
            break;
          }
          case 16: {
            Height = input.ReadInt64();
            break;
          }
          case 24: {
            Win = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSReplayData : pb::IMessage {
    private static readonly pb::MessageParser<CSReplayData> _parser = new pb::MessageParser<CSReplayData>(() => new CSReplayData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReplayData> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Csp.CSBattlePlayerData player_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSBattlePlayerData Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "replay_cat" field.</summary>
    public const int ReplayCatFieldNumber = 4;
    private pb::ByteString replayCat_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReplayCat {
      get { return replayCat_; }
      set {
        replayCat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "world_hash" field.</summary>
    public const int WorldHashFieldNumber = 5;
    private pb::ByteString worldHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WorldHash {
      get { return worldHash_; }
      set {
        worldHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battle_info" field.</summary>
    public const int BattleInfoFieldNumber = 6;
    private pb::ByteString battleInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BattleInfo {
      get { return battleInfo_; }
      set {
        battleInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "svn_version" field.</summary>
    public const int SvnVersionFieldNumber = 7;
    private string svnVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SvnVersion {
      get { return svnVersion_; }
      set {
        svnVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wave_begin" field.</summary>
    public const int WaveBeginFieldNumber = 8;
    private int waveBegin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveBegin {
      get { return waveBegin_; }
      set {
        waveBegin_ = value;
      }
    }

    /// <summary>Field number for the "wave_end" field.</summary>
    public const int WaveEndFieldNumber = 9;
    private int waveEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveEnd {
      get { return waveEnd_; }
      set {
        waveEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleId);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (player_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Player);
      }
      if (ReplayCat.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(ReplayCat);
      }
      if (WorldHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(WorldHash);
      }
      if (BattleInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BattleInfo);
      }
      if (SvnVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SvnVersion);
      }
      if (WaveBegin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WaveBegin);
      }
      if (WaveEnd != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(WaveEnd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (ReplayCat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReplayCat);
      }
      if (WorldHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WorldHash);
      }
      if (BattleInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BattleInfo);
      }
      if (SvnVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SvnVersion);
      }
      if (WaveBegin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveBegin);
      }
      if (WaveEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveEnd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadInt64();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            if (player_ == null) {
              player_ = new global::Csp.CSBattlePlayerData();
            }
            input.ReadMessage(player_);
            break;
          }
          case 34: {
            ReplayCat = input.ReadBytes();
            break;
          }
          case 42: {
            WorldHash = input.ReadBytes();
            break;
          }
          case 50: {
            BattleInfo = input.ReadBytes();
            break;
          }
          case 58: {
            SvnVersion = input.ReadString();
            break;
          }
          case 64: {
            WaveBegin = input.ReadInt32();
            break;
          }
          case 72: {
            WaveEnd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSReplayVerifyData : pb::IMessage {
    private static readonly pb::MessageParser<CSReplayVerifyData> _parser = new pb::MessageParser<CSReplayVerifyData>(() => new CSReplayVerifyData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReplayVerifyData> Parser { get { return _parser; } }

    /// <summary>Field number for the "replay_data" field.</summary>
    public const int ReplayDataFieldNumber = 1;
    private global::Csp.CSReplayData replayData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSReplayData ReplayData {
      get { return replayData_; }
      set {
        replayData_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 4;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "perwave" field.</summary>
    public const int PerwaveFieldNumber = 2;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_perwave_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 18);
    private readonly pbc::MapField<int, pb::ByteString> perwave_ = new pbc::MapField<int, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, pb::ByteString> Perwave {
      get { return perwave_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (replayData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReplayData);
      }
      perwave_.WriteTo(output, _map_perwave_codec);
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Index);
      }
      if (Uid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (replayData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplayData);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      size += perwave_.CalculateSize(_map_perwave_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (replayData_ == null) {
              replayData_ = new global::Csp.CSReplayData();
            }
            input.ReadMessage(replayData_);
            break;
          }
          case 18: {
            perwave_.AddEntriesFrom(input, _map_perwave_codec);
            break;
          }
          case 24: {
            Index = input.ReadInt32();
            break;
          }
          case 32: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSReplayVerifyReq : pb::IMessage {
    private static readonly pb::MessageParser<CSReplayVerifyReq> _parser = new pb::MessageParser<CSReplayVerifyReq>(() => new CSReplayVerifyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReplayVerifyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "replay_data" field.</summary>
    public const int ReplayDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSReplayData> _repeated_replayData_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSReplayData.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSReplayData> replayData_ = new pbc::RepeatedField<global::Csp.CSReplayData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSReplayData> ReplayData {
      get { return replayData_; }
    }

    /// <summary>Field number for the "perwave" field.</summary>
    public const int PerwaveFieldNumber = 2;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_perwave_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 18);
    private readonly pbc::MapField<int, pb::ByteString> perwave_ = new pbc::MapField<int, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, pb::ByteString> Perwave {
      get { return perwave_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      replayData_.WriteTo(output, _repeated_replayData_codec);
      perwave_.WriteTo(output, _map_perwave_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += replayData_.CalculateSize(_repeated_replayData_codec);
      size += perwave_.CalculateSize(_map_perwave_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            replayData_.AddEntriesFrom(input, _repeated_replayData_codec);
            break;
          }
          case 18: {
            perwave_.AddEntriesFrom(input, _map_perwave_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRecPlayerAttr : pb::IMessage {
    private static readonly pb::MessageParser<CSRecPlayerAttr> _parser = new pb::MessageParser<CSRecPlayerAttr>(() => new CSRecPlayerAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRecPlayerAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 1;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 3;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Hp);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Hp = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exp = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRecRelic : pb::IMessage {
    private static readonly pb::MessageParser<CSRecRelic> _parser = new pb::MessageParser<CSRecRelic>(() => new CSRecRelic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRecRelic> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "from_type" field.</summary>
    public const int FromTypeFieldNumber = 3;
    private int fromType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromType {
      get { return fromType_; }
      set {
        fromType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Quality);
      }
      if (FromType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FromType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (FromType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Quality = input.ReadInt32();
            break;
          }
          case 24: {
            FromType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelicRefresh : pb::IMessage {
    private static readonly pb::MessageParser<CSRelicRefresh> _parser = new pb::MessageParser<CSRelicRefresh>(() => new CSRelicRefresh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelicRefresh> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRecRelicData : pb::IMessage {
    private static readonly pb::MessageParser<CSRecRelicData> _parser = new pb::MessageParser<CSRecRelicData>(() => new CSRecRelicData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRecRelicData> Parser { get { return _parser; } }

    /// <summary>Field number for the "relics" field.</summary>
    public const int RelicsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSRecRelic> _repeated_relics_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSRecRelic.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRecRelic> relics_ = new pbc::RepeatedField<global::Csp.CSRecRelic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRecRelic> Relics {
      get { return relics_; }
    }

    /// <summary>Field number for the "relic_refresh" field.</summary>
    public const int RelicRefreshFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSRelicRefresh> _repeated_relicRefresh_codec
        = pb::FieldCodec.ForMessage(18, global::Csp.CSRelicRefresh.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSRelicRefresh> relicRefresh_ = new pbc::RepeatedField<global::Csp.CSRelicRefresh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSRelicRefresh> RelicRefresh {
      get { return relicRefresh_; }
    }

    /// <summary>Field number for the "relic_select_count" field.</summary>
    public const int RelicSelectCountFieldNumber = 3;
    private int relicSelectCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelicSelectCount {
      get { return relicSelectCount_; }
      set {
        relicSelectCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      relics_.WriteTo(output, _repeated_relics_codec);
      relicRefresh_.WriteTo(output, _repeated_relicRefresh_codec);
      if (RelicSelectCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RelicSelectCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += relics_.CalculateSize(_repeated_relics_codec);
      size += relicRefresh_.CalculateSize(_repeated_relicRefresh_codec);
      if (RelicSelectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelicSelectCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            relics_.AddEntriesFrom(input, _repeated_relics_codec);
            break;
          }
          case 18: {
            relicRefresh_.AddEntriesFrom(input, _repeated_relicRefresh_codec);
            break;
          }
          case 24: {
            RelicSelectCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRecBuffData : pb::IMessage {
    private static readonly pb::MessageParser<CSRecBuffData> _parser = new pb::MessageParser<CSRecBuffData>(() => new CSRecBuffData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRecBuffData> Parser { get { return _parser; } }

    /// <summary>Field number for the "revive_buff_count" field.</summary>
    public const int ReviveBuffCountFieldNumber = 1;
    private int reviveBuffCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveBuffCount {
      get { return reviveBuffCount_; }
      set {
        reviveBuffCount_ = value;
      }
    }

    /// <summary>Field number for the "revive_bought_count" field.</summary>
    public const int ReviveBoughtCountFieldNumber = 2;
    private int reviveBoughtCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReviveBoughtCount {
      get { return reviveBoughtCount_; }
      set {
        reviveBoughtCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReviveBuffCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ReviveBuffCount);
      }
      if (ReviveBoughtCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReviveBoughtCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReviveBuffCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveBuffCount);
      }
      if (ReviveBoughtCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReviveBoughtCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReviveBuffCount = input.ReadInt32();
            break;
          }
          case 16: {
            ReviveBoughtCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSBattlePerWave : pb::IMessage {
    private static readonly pb::MessageParser<CSBattlePerWave> _parser = new pb::MessageParser<CSBattlePerWave>(() => new CSBattlePerWave());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBattlePerWave> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_num" field.</summary>
    public const int WaveNumFieldNumber = 1;
    private int waveNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveNum {
      get { return waveNum_; }
      set {
        waveNum_ = value;
      }
    }

    /// <summary>Field number for the "extra_wave_num" field.</summary>
    public const int ExtraWaveNumFieldNumber = 2;
    private int extraWaveNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExtraWaveNum {
      get { return extraWaveNum_; }
      set {
        extraWaveNum_ = value;
      }
    }

    /// <summary>Field number for the "base_attr" field.</summary>
    public const int BaseAttrFieldNumber = 3;
    private global::Csp.CSRecPlayerAttr baseAttr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRecPlayerAttr BaseAttr {
      get { return baseAttr_; }
      set {
        baseAttr_ = value;
      }
    }

    /// <summary>Field number for the "relic" field.</summary>
    public const int RelicFieldNumber = 4;
    private global::Csp.CSRecRelicData relic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRecRelicData Relic {
      get { return relic_; }
      set {
        relic_ = value;
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 5;
    private global::Csp.CSRecBuffData buff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRecBuffData Buff {
      get { return buff_; }
      set {
        buff_ = value;
      }
    }

    /// <summary>Field number for the "time_pass" field.</summary>
    public const int TimePassFieldNumber = 6;
    private int timePass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimePass {
      get { return timePass_; }
      set {
        timePass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaveNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaveNum);
      }
      if (ExtraWaveNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExtraWaveNum);
      }
      if (baseAttr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseAttr);
      }
      if (relic_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Relic);
      }
      if (buff_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Buff);
      }
      if (TimePass != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TimePass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaveNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveNum);
      }
      if (ExtraWaveNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExtraWaveNum);
      }
      if (baseAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseAttr);
      }
      if (relic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Relic);
      }
      if (buff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Buff);
      }
      if (TimePass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimePass);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaveNum = input.ReadInt32();
            break;
          }
          case 16: {
            ExtraWaveNum = input.ReadInt32();
            break;
          }
          case 26: {
            if (baseAttr_ == null) {
              baseAttr_ = new global::Csp.CSRecPlayerAttr();
            }
            input.ReadMessage(baseAttr_);
            break;
          }
          case 34: {
            if (relic_ == null) {
              relic_ = new global::Csp.CSRecRelicData();
            }
            input.ReadMessage(relic_);
            break;
          }
          case 42: {
            if (buff_ == null) {
              buff_ = new global::Csp.CSRecBuffData();
            }
            input.ReadMessage(buff_);
            break;
          }
          case 48: {
            TimePass = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSReplayDataList : pb::IMessage {
    private static readonly pb::MessageParser<CSReplayDataList> _parser = new pb::MessageParser<CSReplayDataList>(() => new CSReplayDataList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReplayDataList> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSReplayData> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::Csp.CSReplayData.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSReplayData> list_ = new pbc::RepeatedField<global::Csp.CSReplayData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSReplayData> List {
      get { return list_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleId);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadInt64();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSVerifyFailInfo : pb::IMessage {
    private static readonly pb::MessageParser<CSVerifyFailInfo> _parser = new pb::MessageParser<CSVerifyFailInfo>(() => new CSVerifyFailInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifyFailInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 2;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    /// <summary>Field number for the "wave_id" field.</summary>
    public const int WaveIdFieldNumber = 3;
    private int waveId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveId {
      get { return waveId_; }
      set {
        waveId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reason);
      }
      if (FrameId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameId);
      }
      if (WaveId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaveId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      if (WaveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reason = input.ReadInt32();
            break;
          }
          case 16: {
            FrameId = input.ReadInt32();
            break;
          }
          case 24: {
            WaveId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSVerifyBattleFinish : pb::IMessage {
    private static readonly pb::MessageParser<CSVerifyBattleFinish> _parser = new pb::MessageParser<CSVerifyBattleFinish>(() => new CSVerifyBattleFinish());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifyBattleFinish> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Csp.CSPveResultType result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveResultType Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::Csp.CSPveFinishCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 4;
    private global::Csp.CSPveFinishReqSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishReqSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (spec_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Spec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Csp.CSPveResultType) input.ReadEnum();
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::Csp.CSPveFinishCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 34: {
            if (spec_ == null) {
              spec_ = new global::Csp.CSPveFinishReqSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSVerifyListResp : pb::IMessage {
    private static readonly pb::MessageParser<CSVerifyListResp> _parser = new pb::MessageParser<CSVerifyListResp>(() => new CSVerifyListResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSVerifyListResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "verify_status" field.</summary>
    public const int VerifyStatusFieldNumber = 3;
    private global::Csp.CSVerifyStatus verifyStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSVerifyStatus VerifyStatus {
      get { return verifyStatus_; }
      set {
        verifyStatus_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 4;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 5;
    private int frames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Frames {
      get { return frames_; }
      set {
        frames_ = value;
      }
    }

    /// <summary>Field number for the "fail_info" field.</summary>
    public const int FailInfoFieldNumber = 6;
    private global::Csp.CSVerifyFailInfo failInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSVerifyFailInfo FailInfo {
      get { return failInfo_; }
      set {
        failInfo_ = value;
      }
    }

    /// <summary>Field number for the "battle_status" field.</summary>
    public const int BattleStatusFieldNumber = 7;
    private global::Csp.CSVerifyBattleStatus battleStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSVerifyBattleStatus BattleStatus {
      get { return battleStatus_; }
      set {
        battleStatus_ = value;
      }
    }

    /// <summary>Field number for the "battle_finish" field.</summary>
    public const int BattleFinishFieldNumber = 8;
    private global::Csp.CSVerifyBattleFinish battleFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSVerifyBattleFinish BattleFinish {
      get { return battleFinish_; }
      set {
        battleFinish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (VerifyStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VerifyStatus);
      }
      if (Index != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Index);
      }
      if (Frames != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Frames);
      }
      if (failInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FailInfo);
      }
      if (BattleStatus != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) BattleStatus);
      }
      if (battleFinish_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BattleFinish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (VerifyStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VerifyStatus);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Frames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Frames);
      }
      if (failInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FailInfo);
      }
      if (BattleStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleStatus);
      }
      if (battleFinish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleFinish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 24: {
            verifyStatus_ = (global::Csp.CSVerifyStatus) input.ReadEnum();
            break;
          }
          case 32: {
            Index = input.ReadInt32();
            break;
          }
          case 40: {
            Frames = input.ReadInt32();
            break;
          }
          case 50: {
            if (failInfo_ == null) {
              failInfo_ = new global::Csp.CSVerifyFailInfo();
            }
            input.ReadMessage(failInfo_);
            break;
          }
          case 56: {
            battleStatus_ = (global::Csp.CSVerifyBattleStatus) input.ReadEnum();
            break;
          }
          case 66: {
            if (battleFinish_ == null) {
              battleFinish_ = new global::Csp.CSVerifyBattleFinish();
            }
            input.ReadMessage(battleFinish_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSPveStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStateReq> _parser = new pb::MessageParser<CSPveStateReq>(() => new CSPveStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStateReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStateResp> _parser = new pb::MessageParser<CSPveStateResp>(() => new CSPveStateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Csp.CSPveStateRespSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveStateRespSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 18: {
            if (spec_ == null) {
              spec_ = new global::Csp.CSPveStateRespSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStateNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStateNotify> _parser = new pb::MessageParser<CSPveStateNotify>(() => new CSPveStateNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStateNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSPveStartReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStartReq> _parser = new pb::MessageParser<CSPveStartReq>(() => new CSPveStartReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStartReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 2;
    private global::Csp.CSPveStartCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveStartCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "is_reenter" field.</summary>
    public const int IsReenterFieldNumber = 3;
    private bool isReenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReenter {
      get { return isReenter_; }
      set {
        isReenter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (common_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Common);
      }
      if (IsReenter != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReenter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (IsReenter != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 18: {
            if (common_ == null) {
              common_ = new global::Csp.CSPveStartCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 24: {
            IsReenter = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStartResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStartResp> _parser = new pb::MessageParser<CSPveStartResp>(() => new CSPveStartResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStartResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_common" field.</summary>
    public const int BattleCommonFieldNumber = 1;
    private global::Datap.RoleBattleCommon battleCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBattleCommon BattleCommon {
      get { return battleCommon_; }
      set {
        battleCommon_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 3;
    private global::Csp.CSPveStartRespSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveStartRespSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "start_common" field.</summary>
    public const int StartCommonFieldNumber = 4;
    private global::Csp.CSPveStartCommon startCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveStartCommon StartCommon {
      get { return startCommon_; }
      set {
        startCommon_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 5;
    private global::Datap.RegionItem region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RegionItem Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "talent" field.</summary>
    public const int TalentFieldNumber = 6;
    private global::Datap.RoleTalentData talent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleTalentData Talent {
      get { return talent_; }
      set {
        talent_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon" field.</summary>
    public const int ElementDragonFieldNumber = 7;
    private global::Datap.RoleSkinAttrItem elementDragon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleSkinAttrItem ElementDragon {
      get { return elementDragon_; }
      set {
        elementDragon_ = value;
      }
    }

    /// <summary>Field number for the "equipment_slots" field.</summary>
    public const int EquipmentSlotsFieldNumber = 8;
    private static readonly pbc::MapField<int, global::Csp.CSSlotsWithEquipmentAttrs>.Codec _map_equipmentSlots_codec
        = new pbc::MapField<int, global::Csp.CSSlotsWithEquipmentAttrs>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Csp.CSSlotsWithEquipmentAttrs.Parser), 66);
    private readonly pbc::MapField<int, global::Csp.CSSlotsWithEquipmentAttrs> equipmentSlots_ = new pbc::MapField<int, global::Csp.CSSlotsWithEquipmentAttrs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Csp.CSSlotsWithEquipmentAttrs> EquipmentSlots {
      get { return equipmentSlots_; }
    }

    /// <summary>Field number for the "ultimate_skill" field.</summary>
    public const int UltimateSkillFieldNumber = 9;
    private global::Csp.CSUltimateSkillAttr ultimateSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSUltimateSkillAttr UltimateSkill {
      get { return ultimateSkill_; }
      set {
        ultimateSkill_ = value;
      }
    }

    /// <summary>Field number for the "role_level" field.</summary>
    public const int RoleLevelFieldNumber = 10;
    private int roleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleLevel {
      get { return roleLevel_; }
      set {
        roleLevel_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Csp.CSCard> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(90, global::Csp.CSCard.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSCard> cards_ = new pbc::RepeatedField<global::Csp.CSCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSCard> Cards {
      get { return cards_; }
    }

    /// <summary>Field number for the "battle_wave_count" field.</summary>
    public const int BattleWaveCountFieldNumber = 12;
    private global::Datap.RoleBattleWaveCountByChapter battleWaveCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBattleWaveCountByChapter BattleWaveCount {
      get { return battleWaveCount_; }
      set {
        battleWaveCount_ = value;
      }
    }

    /// <summary>Field number for the "stat_data" field.</summary>
    public const int StatDataFieldNumber = 13;
    private static readonly pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec _map_statData_codec
        = new pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleStatPeriod.Parser), 106);
    private readonly pbc::MapField<int, global::Datap.RoleStatPeriod> statData_ = new pbc::MapField<int, global::Datap.RoleStatPeriod>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleStatPeriod> StatData {
      get { return statData_; }
    }

    /// <summary>Field number for the "story_process" field.</summary>
    public const int StoryProcessFieldNumber = 14;
    private long storyProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StoryProcess {
      get { return storyProcess_; }
      set {
        storyProcess_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleCommon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BattleCommon);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (spec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spec);
      }
      if (startCommon_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartCommon);
      }
      if (region_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Region);
      }
      if (talent_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Talent);
      }
      if (elementDragon_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ElementDragon);
      }
      equipmentSlots_.WriteTo(output, _map_equipmentSlots_codec);
      if (ultimateSkill_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(UltimateSkill);
      }
      if (RoleLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RoleLevel);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (battleWaveCount_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BattleWaveCount);
      }
      statData_.WriteTo(output, _map_statData_codec);
      if (StoryProcess != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(StoryProcess);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCommon);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (startCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartCommon);
      }
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (talent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Talent);
      }
      if (elementDragon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDragon);
      }
      size += equipmentSlots_.CalculateSize(_map_equipmentSlots_codec);
      if (ultimateSkill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UltimateSkill);
      }
      if (RoleLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleLevel);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (battleWaveCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleWaveCount);
      }
      size += statData_.CalculateSize(_map_statData_codec);
      if (StoryProcess != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StoryProcess);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleCommon_ == null) {
              battleCommon_ = new global::Datap.RoleBattleCommon();
            }
            input.ReadMessage(battleCommon_);
            break;
          }
          case 16: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 26: {
            if (spec_ == null) {
              spec_ = new global::Csp.CSPveStartRespSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
          case 34: {
            if (startCommon_ == null) {
              startCommon_ = new global::Csp.CSPveStartCommon();
            }
            input.ReadMessage(startCommon_);
            break;
          }
          case 42: {
            if (region_ == null) {
              region_ = new global::Datap.RegionItem();
            }
            input.ReadMessage(region_);
            break;
          }
          case 50: {
            if (talent_ == null) {
              talent_ = new global::Datap.RoleTalentData();
            }
            input.ReadMessage(talent_);
            break;
          }
          case 58: {
            if (elementDragon_ == null) {
              elementDragon_ = new global::Datap.RoleSkinAttrItem();
            }
            input.ReadMessage(elementDragon_);
            break;
          }
          case 66: {
            equipmentSlots_.AddEntriesFrom(input, _map_equipmentSlots_codec);
            break;
          }
          case 74: {
            if (ultimateSkill_ == null) {
              ultimateSkill_ = new global::Csp.CSUltimateSkillAttr();
            }
            input.ReadMessage(ultimateSkill_);
            break;
          }
          case 80: {
            RoleLevel = input.ReadInt32();
            break;
          }
          case 90: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
          case 98: {
            if (battleWaveCount_ == null) {
              battleWaveCount_ = new global::Datap.RoleBattleWaveCountByChapter();
            }
            input.ReadMessage(battleWaveCount_);
            break;
          }
          case 106: {
            statData_.AddEntriesFrom(input, _map_statData_codec);
            break;
          }
          case 112: {
            StoryProcess = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveStartNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStartNotify> _parser = new pb::MessageParser<CSPveStartNotify>(() => new CSPveStartNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStartNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSPveFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishReq> _parser = new pb::MessageParser<CSPveFinishReq>(() => new CSPveFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Csp.CSPveResultType result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveResultType Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::Csp.CSPveFinishCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 4;
    private global::Csp.CSPveFinishReqSpec spec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishReqSpec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "gm" field.</summary>
    public const int GmFieldNumber = 5;
    private int gm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gm {
      get { return gm_; }
      set {
        gm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (spec_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Spec);
      }
      if (Gm != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gm);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (Gm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gm);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Csp.CSPveResultType) input.ReadEnum();
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::Csp.CSPveFinishCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 34: {
            if (spec_ == null) {
              spec_ = new global::Csp.CSPveFinishReqSpec();
            }
            input.ReadMessage(spec_);
            break;
          }
          case 40: {
            Gm = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishResp> _parser = new pb::MessageParser<CSPveFinishResp>(() => new CSPveFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Csp.CSPveResultType result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveResultType Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::Csp.CSPveFinishCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 4;
    private global::Csp.CSPveFinishSettleData finish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishSettleData Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      if (finish_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (finish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 16: {
            result_ = (global::Csp.CSPveResultType) input.ReadEnum();
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::Csp.CSPveFinishCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 34: {
            if (finish_ == null) {
              finish_ = new global::Csp.CSPveFinishSettleData();
            }
            input.ReadMessage(finish_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveFinishNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveFinishNotify> _parser = new pb::MessageParser<CSPveFinishNotify>(() => new CSPveFinishNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveFinishNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSPveQuitReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveQuitReq> _parser = new pb::MessageParser<CSPveQuitReq>(() => new CSPveQuitReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveQuitReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::Csp.CSPveQuitReasonType reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveQuitReasonType Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 16: {
            reason_ = (global::Csp.CSPveQuitReasonType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveQuitResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveQuitResp> _parser = new pb::MessageParser<CSPveQuitResp>(() => new CSPveQuitResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveQuitResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.CSBattleType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "finish" field.</summary>
    public const int FinishFieldNumber = 2;
    private global::Csp.CSPveFinishSettleData finish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSPveFinishSettleData Finish {
      get { return finish_; }
      set {
        finish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (finish_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Finish);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (finish_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Finish);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 18: {
            if (finish_ == null) {
              finish_ = new global::Csp.CSPveFinishSettleData();
            }
            input.ReadMessage(finish_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveQuitNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveQuitNotify> _parser = new pb::MessageParser<CSPveQuitNotify>(() => new CSPveQuitNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveQuitNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSPveReenterDenyReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveReenterDenyReq> _parser = new pb::MessageParser<CSPveReenterDenyReq>(() => new CSPveReenterDenyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveReenterDenyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_type" field.</summary>
    public const int BattleTypeFieldNumber = 1;
    private global::Datap.CSBattleType battleType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 2;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BattleType);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleType);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            battleType_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 16: {
            ChapterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveReenterDenyResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveReenterDenyResp> _parser = new pb::MessageParser<CSPveReenterDenyResp>(() => new CSPveReenterDenyResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveReenterDenyResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSChapterUnlockReq : pb::IMessage {
    private static readonly pb::MessageParser<CSChapterUnlockReq> _parser = new pb::MessageParser<CSChapterUnlockReq>(() => new CSChapterUnlockReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChapterUnlockReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSChapterUnlockResp : pb::IMessage {
    private static readonly pb::MessageParser<CSChapterUnlockResp> _parser = new pb::MessageParser<CSChapterUnlockResp>(() => new CSChapterUnlockResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSChapterUnlockResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 1;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveBattlePerwaveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPveBattlePerwaveReq> _parser = new pb::MessageParser<CSPveBattlePerwaveReq>(() => new CSPveBattlePerwaveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveBattlePerwaveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "battle_data_perwave" field.</summary>
    public const int BattleDataPerwaveFieldNumber = 2;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_battleDataPerwave_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 18);
    private readonly pbc::MapField<int, pb::ByteString> battleDataPerwave_ = new pbc::MapField<int, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, pb::ByteString> BattleDataPerwave {
      get { return battleDataPerwave_; }
    }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 3;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "wave_id" field.</summary>
    public const int WaveIdFieldNumber = 4;
    private int waveId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveId {
      get { return waveId_; }
      set {
        waveId_ = value;
      }
    }

    /// <summary>Field number for the "wave_type" field.</summary>
    public const int WaveTypeFieldNumber = 5;
    private int waveType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveType {
      get { return waveType_; }
      set {
        waveType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleId);
      }
      battleDataPerwave_.WriteTo(output, _map_battleDataPerwave_codec);
      if (ChapterId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChapterId);
      }
      if (WaveId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WaveId);
      }
      if (WaveType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaveType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      size += battleDataPerwave_.CalculateSize(_map_battleDataPerwave_codec);
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (WaveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveId);
      }
      if (WaveType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadInt64();
            break;
          }
          case 18: {
            battleDataPerwave_.AddEntriesFrom(input, _map_battleDataPerwave_codec);
            break;
          }
          case 24: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 32: {
            WaveId = input.ReadInt32();
            break;
          }
          case 40: {
            WaveType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveBattlePerwaveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPveBattlePerwaveResp> _parser = new pb::MessageParser<CSPveBattlePerwaveResp>(() => new CSPveBattlePerwaveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveBattlePerwaveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 1;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "batle_wave" field.</summary>
    public const int BatleWaveFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_batleWave_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> batleWave_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BatleWave {
      get { return batleWave_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(BattleId);
      }
      batleWave_.WriteTo(output, _repeated_batleWave_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      size += batleWave_.CalculateSize(_repeated_batleWave_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleId = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            batleWave_.AddEntriesFrom(input, _repeated_batleWave_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPvePreDeadReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPvePreDeadReq> _parser = new pb::MessageParser<CSPvePreDeadReq>(() => new CSPvePreDeadReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPvePreDeadReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "pre_dead" field.</summary>
    public const int PreDeadFieldNumber = 1;
    private bool preDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreDead {
      get { return preDead_; }
      set {
        preDead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PreDead != false) {
        output.WriteRawTag(8);
        output.WriteBool(PreDead);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PreDead != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PreDead = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPvePreDeadResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPvePreDeadResp> _parser = new pb::MessageParser<CSPvePreDeadResp>(() => new CSPvePreDeadResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPvePreDeadResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSReviveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSReviveReq> _parser = new pb::MessageParser<CSReviveReq>(() => new CSReviveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReviveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 1;
    private global::Datap.Item cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Item Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (cost_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Cost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (cost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (cost_ == null) {
              cost_ = new global::Datap.Item();
            }
            input.ReadMessage(cost_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSReviveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSReviveResp> _parser = new pb::MessageParser<CSReviveResp>(() => new CSReviveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSReviveResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
