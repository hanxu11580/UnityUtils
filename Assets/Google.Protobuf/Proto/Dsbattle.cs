// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsbattle.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum CSBattleType {
    /// <summary>
    /// None
    /// </summary>
    KBattleTypeNone = 0,
    /// <summary>
    /// 主线
    /// </summary>
    KBattleTypeStage = 1,
    /// <summary>
    /// 远征
    /// </summary>
    KBattleTypeExpedition = 2,
    /// <summary>
    /// 副本
    /// </summary>
    KBattleTypeDungeon = 3,
    /// <summary>
    /// 元素龙传记
    /// </summary>
    KBattleTypeElementDragonStory = 4,
    /// <summary>
    /// Max
    /// </summary>
    KBattleTypeMax = 17,
  }

  public enum BattleMisc {
    /// <summary>
    /// None
    /// </summary>
    KBattleMiscNone = 0,
    /// <summary>
    /// 未成功结算的战斗
    /// </summary>
    KBattleRestoreEnergyPct = 80,
    /// <summary>
    /// 未成功结算的战斗
    /// </summary>
    KBattleRestoreStageEnergyPct = 80,
    /// <summary>
    /// 波次最大值
    /// </summary>
    KBattleMiscWaveMax = 100,
    /// <summary>
    /// 关卡最大值
    /// </summary>
    KBattleMiscChapterMax = 1000,
  }

  public enum CSBattleMisc {
    /// <summary>
    /// None
    /// </summary>
    KCsbattleMiscNone = 0,
    /// <summary>
    /// 可以重进战斗的次数
    /// </summary>
    KMaxReEnterCnt = 3,
    /// <summary>
    /// 已扣除的道具
    /// </summary>
    KMaxItemDeductCnt = 20,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RoleBattleCommon : pb::IMessage {
    private static readonly pb::MessageParser<RoleBattleCommon> _parser = new pb::MessageParser<RoleBattleCommon>(() => new RoleBattleCommon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBattleCommon> Parser { get { return _parser; } }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 1;
    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    /// <summary>Field number for the "battle_type" field.</summary>
    public const int BattleTypeFieldNumber = 2;
    private global::Datap.CSBattleType battleType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CSBattleType BattleType {
      get { return battleType_; }
      set {
        battleType_ = value;
      }
    }

    /// <summary>Field number for the "items_deducted" field.</summary>
    public const int ItemsDeductedFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_itemsDeducted_codec
        = pb::FieldCodec.ForMessage(34, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> itemsDeducted_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> ItemsDeducted {
      get { return itemsDeducted_; }
    }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 5;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "reenter_cnt" field.</summary>
    public const int ReenterCntFieldNumber = 6;
    private int reenterCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReenterCnt {
      get { return reenterCnt_; }
      set {
        reenterCnt_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "battle_id" field.</summary>
    public const int BattleIdFieldNumber = 8;
    private long battleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BattleId {
      get { return battleId_; }
      set {
        battleId_ = value;
      }
    }

    /// <summary>Field number for the "rand_seed" field.</summary>
    public const int RandSeedFieldNumber = 9;
    private int randSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandSeed {
      get { return randSeed_; }
      set {
        randSeed_ = value;
      }
    }

    /// <summary>Field number for the "battle_perwave" field.</summary>
    public const int BattlePerwaveFieldNumber = 10;
    private static readonly pbc::MapField<int, pb::ByteString>.Codec _map_battlePerwave_codec
        = new pbc::MapField<int, pb::ByteString>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBytes(18), 82);
    private readonly pbc::MapField<int, pb::ByteString> battlePerwave_ = new pbc::MapField<int, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, pb::ByteString> BattlePerwave {
      get { return battlePerwave_; }
    }

    /// <summary>Field number for the "pre_dead" field.</summary>
    public const int PreDeadFieldNumber = 11;
    private bool preDead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreDead {
      get { return preDead_; }
      set {
        preDead_ = value;
      }
    }

    /// <summary>Field number for the "curr_wave" field.</summary>
    public const int CurrWaveFieldNumber = 12;
    private int currWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrWave {
      get { return currWave_; }
      set {
        currWave_ = value;
      }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 13;
    private int bonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bonus {
      get { return bonus_; }
      set {
        bonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPlaying != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (BattleType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BattleType);
      }
      itemsDeducted_.WriteTo(output, _repeated_itemsDeducted_codec);
      if (ChapterId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChapterId);
      }
      if (ReenterCnt != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReenterCnt);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartTime);
      }
      if (BattleId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(BattleId);
      }
      if (RandSeed != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RandSeed);
      }
      battlePerwave_.WriteTo(output, _map_battlePerwave_codec);
      if (PreDead != false) {
        output.WriteRawTag(88);
        output.WriteBool(PreDead);
      }
      if (CurrWave != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CurrWave);
      }
      if (Bonus != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Bonus);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (BattleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattleType);
      }
      size += itemsDeducted_.CalculateSize(_repeated_itemsDeducted_codec);
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      if (ReenterCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReenterCnt);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (BattleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BattleId);
      }
      if (RandSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandSeed);
      }
      size += battlePerwave_.CalculateSize(_map_battlePerwave_codec);
      if (PreDead != false) {
        size += 1 + 1;
      }
      if (CurrWave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrWave);
      }
      if (Bonus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bonus);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            battleType_ = (global::Datap.CSBattleType) input.ReadEnum();
            break;
          }
          case 34: {
            itemsDeducted_.AddEntriesFrom(input, _repeated_itemsDeducted_codec);
            break;
          }
          case 40: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 48: {
            ReenterCnt = input.ReadInt32();
            break;
          }
          case 56: {
            StartTime = input.ReadInt64();
            break;
          }
          case 64: {
            BattleId = input.ReadInt64();
            break;
          }
          case 72: {
            RandSeed = input.ReadInt32();
            break;
          }
          case 82: {
            battlePerwave_.AddEntriesFrom(input, _map_battlePerwave_codec);
            break;
          }
          case 88: {
            PreDead = input.ReadBool();
            break;
          }
          case 96: {
            CurrWave = input.ReadInt32();
            break;
          }
          case 104: {
            Bonus = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RolePveData : pb::IMessage {
    private static readonly pb::MessageParser<RolePveData> _parser = new pb::MessageParser<RolePveData>(() => new RolePveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 1;
    private global::Datap.RoleStageData stage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleStageData Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    /// <summary>Field number for the "expedition" field.</summary>
    public const int ExpeditionFieldNumber = 2;
    private global::Datap.RoleExpeditionData expedition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleExpeditionData Expedition {
      get { return expedition_; }
      set {
        expedition_ = value;
      }
    }

    /// <summary>Field number for the "dungeon" field.</summary>
    public const int DungeonFieldNumber = 3;
    private global::Datap.RoleDungeonData dungeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleDungeonData Dungeon {
      get { return dungeon_; }
      set {
        dungeon_ = value;
      }
    }

    /// <summary>Field number for the "element_dragon_story" field.</summary>
    public const int ElementDragonStoryFieldNumber = 4;
    private global::Datap.RoleElementDragonStoryData elementDragonStory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleElementDragonStoryData ElementDragonStory {
      get { return elementDragonStory_; }
      set {
        elementDragonStory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stage_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stage);
      }
      if (expedition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Expedition);
      }
      if (dungeon_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Dungeon);
      }
      if (elementDragonStory_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ElementDragonStory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stage);
      }
      if (expedition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expedition);
      }
      if (dungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dungeon);
      }
      if (elementDragonStory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementDragonStory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stage_ == null) {
              stage_ = new global::Datap.RoleStageData();
            }
            input.ReadMessage(stage_);
            break;
          }
          case 18: {
            if (expedition_ == null) {
              expedition_ = new global::Datap.RoleExpeditionData();
            }
            input.ReadMessage(expedition_);
            break;
          }
          case 26: {
            if (dungeon_ == null) {
              dungeon_ = new global::Datap.RoleDungeonData();
            }
            input.ReadMessage(dungeon_);
            break;
          }
          case 34: {
            if (elementDragonStory_ == null) {
              elementDragonStory_ = new global::Datap.RoleElementDragonStoryData();
            }
            input.ReadMessage(elementDragonStory_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBattleWaveCountByChapter : pb::IMessage {
    private static readonly pb::MessageParser<RoleBattleWaveCountByChapter> _parser = new pb::MessageParser<RoleBattleWaveCountByChapter>(() => new RoleBattleWaveCountByChapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBattleWaveCountByChapter> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_count" field.</summary>
    public const int WaveCountFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_waveCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> waveCount_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> WaveCount {
      get { return waveCount_; }
    }

    /// <summary>Field number for the "wave_count_retry" field.</summary>
    public const int WaveCountRetryFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_waveCountRetry_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> waveCountRetry_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> WaveCountRetry {
      get { return waveCountRetry_; }
    }

    /// <summary>Field number for the "max_wave_defeated_num" field.</summary>
    public const int MaxWaveDefeatedNumFieldNumber = 3;
    private int maxWaveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxWaveDefeatedNum {
      get { return maxWaveDefeatedNum_; }
      set {
        maxWaveDefeatedNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      waveCount_.WriteTo(output, _map_waveCount_codec);
      waveCountRetry_.WriteTo(output, _map_waveCountRetry_codec);
      if (MaxWaveDefeatedNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxWaveDefeatedNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += waveCount_.CalculateSize(_map_waveCount_codec);
      size += waveCountRetry_.CalculateSize(_map_waveCountRetry_codec);
      if (MaxWaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWaveDefeatedNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            waveCount_.AddEntriesFrom(input, _map_waveCount_codec);
            break;
          }
          case 18: {
            waveCountRetry_.AddEntriesFrom(input, _map_waveCountRetry_codec);
            break;
          }
          case 24: {
            MaxWaveDefeatedNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBattleWaveCount : pb::IMessage {
    private static readonly pb::MessageParser<RoleBattleWaveCount> _parser = new pb::MessageParser<RoleBattleWaveCount>(() => new RoleBattleWaveCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBattleWaveCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "chaper_wave_count" field.</summary>
    public const int ChaperWaveCountFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.RoleBattleWaveCountByChapter>.Codec _map_chaperWaveCount_codec
        = new pbc::MapField<int, global::Datap.RoleBattleWaveCountByChapter>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleBattleWaveCountByChapter.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.RoleBattleWaveCountByChapter> chaperWaveCount_ = new pbc::MapField<int, global::Datap.RoleBattleWaveCountByChapter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleBattleWaveCountByChapter> ChaperWaveCount {
      get { return chaperWaveCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chaperWaveCount_.WriteTo(output, _map_chaperWaveCount_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chaperWaveCount_.CalculateSize(_map_chaperWaveCount_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            chaperWaveCount_.AddEntriesFrom(input, _map_chaperWaveCount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBattleData : pb::IMessage {
    private static readonly pb::MessageParser<RoleBattleData> _parser = new pb::MessageParser<RoleBattleData>(() => new RoleBattleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBattleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_common" field.</summary>
    public const int BattleCommonFieldNumber = 1;
    private global::Datap.RoleBattleCommon battleCommon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBattleCommon BattleCommon {
      get { return battleCommon_; }
      set {
        battleCommon_ = value;
      }
    }

    /// <summary>Field number for the "pve" field.</summary>
    public const int PveFieldNumber = 2;
    private global::Datap.RolePveData pve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RolePveData Pve {
      get { return pve_; }
      set {
        pve_ = value;
      }
    }

    /// <summary>Field number for the "battle_wave_count" field.</summary>
    public const int BattleWaveCountFieldNumber = 3;
    private global::Datap.RoleBattleWaveCount battleWaveCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBattleWaveCount BattleWaveCount {
      get { return battleWaveCount_; }
      set {
        battleWaveCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (battleCommon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BattleCommon);
      }
      if (pve_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pve);
      }
      if (battleWaveCount_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BattleWaveCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (battleCommon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleCommon);
      }
      if (pve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pve);
      }
      if (battleWaveCount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleWaveCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (battleCommon_ == null) {
              battleCommon_ = new global::Datap.RoleBattleCommon();
            }
            input.ReadMessage(battleCommon_);
            break;
          }
          case 18: {
            if (pve_ == null) {
              pve_ = new global::Datap.RolePveData();
            }
            input.ReadMessage(pve_);
            break;
          }
          case 26: {
            if (battleWaveCount_ == null) {
              battleWaveCount_ = new global::Datap.RoleBattleWaveCount();
            }
            input.ReadMessage(battleWaveCount_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
