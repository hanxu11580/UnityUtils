// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsrecharge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum FirstRechargeType {
    KFirstRechargeTypeDefault = 0,
    KFirstRechargeTypeMax = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class FirstRecharge : pb::IMessage {
    private static readonly pb::MessageParser<FirstRecharge> _parser = new pb::MessageParser<FirstRecharge>(() => new FirstRecharge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FirstRecharge> Parser { get { return _parser; } }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "reward_day" field.</summary>
    public const int RewardDayFieldNumber = 2;
    private int rewardDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardDay {
      get { return rewardDay_; }
      set {
        rewardDay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Tick);
      }
      if (RewardDay != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RewardDay);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      if (RewardDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardDay);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tick = input.ReadInt64();
            break;
          }
          case 16: {
            RewardDay = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleRecharge : pb::IMessage {
    private static readonly pb::MessageParser<RoleRecharge> _parser = new pb::MessageParser<RoleRecharge>(() => new RoleRecharge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleRecharge> Parser { get { return _parser; } }

    /// <summary>Field number for the "total_money" field.</summary>
    public const int TotalMoneyFieldNumber = 2;
    private int totalMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalMoney {
      get { return totalMoney_; }
      set {
        totalMoney_ = value;
      }
    }

    /// <summary>Field number for the "first_recharge" field.</summary>
    public const int FirstRechargeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.FirstRecharge> _repeated_firstRecharge_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.FirstRecharge.Parser);
    private readonly pbc::RepeatedField<global::Datap.FirstRecharge> firstRecharge_ = new pbc::RepeatedField<global::Datap.FirstRecharge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.FirstRecharge> FirstRecharge {
      get { return firstRecharge_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalMoney != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalMoney);
      }
      firstRecharge_.WriteTo(output, _repeated_firstRecharge_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalMoney);
      }
      size += firstRecharge_.CalculateSize(_repeated_firstRecharge_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            TotalMoney = input.ReadInt32();
            break;
          }
          case 26: {
            firstRecharge_.AddEntriesFrom(input, _repeated_firstRecharge_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
