// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsmonthcard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum MonthCardMisc {
    KMonthCardMiscNone = 0,
    KMonthCardMiscMaxNum = 10,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class MonthCard : pb::IMessage {
    private static readonly pb::MessageParser<MonthCard> _parser = new pb::MessageParser<MonthCard>(() => new MonthCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonthCard> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "expire_tick" field.</summary>
    public const int ExpireTickFieldNumber = 2;
    private long expireTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTick {
      get { return expireTick_; }
      set {
        expireTick_ = value;
      }
    }

    /// <summary>Field number for the "reward_tick" field.</summary>
    public const int RewardTickFieldNumber = 3;
    private long rewardTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RewardTick {
      get { return rewardTick_; }
      set {
        rewardTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ExpireTick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpireTick);
      }
      if (RewardTick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RewardTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ExpireTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTick);
      }
      if (RewardTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RewardTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ExpireTick = input.ReadInt64();
            break;
          }
          case 24: {
            RewardTick = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMonthCard : pb::IMessage {
    private static readonly pb::MessageParser<RoleMonthCard> _parser = new pb::MessageParser<RoleMonthCard>(() => new RoleMonthCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMonthCard> Parser { get { return _parser; } }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.MonthCard> _repeated_card_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.MonthCard.Parser);
    private readonly pbc::RepeatedField<global::Datap.MonthCard> card_ = new pbc::RepeatedField<global::Datap.MonthCard>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.MonthCard> Card {
      get { return card_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      card_.WriteTo(output, _repeated_card_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
