// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csguide.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSGuideFinishOne : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideFinishOne> _parser = new pb::MessageParser<CSGuideFinishOne>(() => new CSGuideFinishOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideFinishOne> Parser { get { return _parser; } }

    /// <summary>Field number for the "guide_id" field.</summary>
    public const int GuideIdFieldNumber = 1;
    private int guideId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideId {
      get { return guideId_; }
      set {
        guideId_ = value;
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 2;
    private int stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuideId);
      }
      if (StepId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StepId);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideId);
      }
      if (StepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepId);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideId = input.ReadInt32();
            break;
          }
          case 16: {
            StepId = input.ReadInt32();
            break;
          }
          case 26: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSGuideFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideFinishReq> _parser = new pb::MessageParser<CSGuideFinishReq>(() => new CSGuideFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "guide_id" field.</summary>
    public const int GuideIdFieldNumber = 1;
    private int guideId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideId {
      get { return guideId_; }
      set {
        guideId_ = value;
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 2;
    private int stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuideId);
      }
      if (StepId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StepId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideId);
      }
      if (StepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideId = input.ReadInt32();
            break;
          }
          case 16: {
            StepId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSGuideFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideFinishResp> _parser = new pb::MessageParser<CSGuideFinishResp>(() => new CSGuideFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "guide_id" field.</summary>
    public const int GuideIdFieldNumber = 1;
    private int guideId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuideId {
      get { return guideId_; }
      set {
        guideId_ = value;
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 2;
    private int stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GuideId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GuideId);
      }
      if (StepId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StepId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GuideId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuideId);
      }
      if (StepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StepId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GuideId = input.ReadInt32();
            break;
          }
          case 16: {
            StepId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSGuideBatchFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideBatchFinishReq> _parser = new pb::MessageParser<CSGuideBatchFinishReq>(() => new CSGuideBatchFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideBatchFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSGuideFinishOne> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSGuideFinishOne.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSGuideFinishOne> list_ = new pbc::RepeatedField<global::Csp.CSGuideFinishOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSGuideFinishOne> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSGuideBatchFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideBatchFinishResp> _parser = new pb::MessageParser<CSGuideBatchFinishResp>(() => new CSGuideBatchFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideBatchFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSGuideFinishOne> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSGuideFinishOne.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSGuideFinishOne> list_ = new pbc::RepeatedField<global::Csp.CSGuideFinishOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSGuideFinishOne> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSGuideDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSGuideDataNotify> _parser = new pb::MessageParser<CSGuideDataNotify>(() => new CSGuideDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGuideDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSStoryFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSStoryFinishReq> _parser = new pb::MessageParser<CSStoryFinishReq>(() => new CSStoryFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStoryFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 1;
    private int chapter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    /// <summary>Field number for the "wave" field.</summary>
    public const int WaveFieldNumber = 2;
    private int wave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wave {
      get { return wave_; }
      set {
        wave_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chapter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chapter);
      }
      if (Wave != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Wave);
      }
      if (Step != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Step);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      if (Wave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wave);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chapter = input.ReadInt32();
            break;
          }
          case 16: {
            Wave = input.ReadInt32();
            break;
          }
          case 24: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSStoryFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStoryFinishResp> _parser = new pb::MessageParser<CSStoryFinishResp>(() => new CSStoryFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStoryFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 1;
    private int chapter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    /// <summary>Field number for the "wave" field.</summary>
    public const int WaveFieldNumber = 2;
    private int wave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wave {
      get { return wave_; }
      set {
        wave_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chapter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Chapter);
      }
      if (Wave != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Wave);
      }
      if (Step != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Step);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      if (Wave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wave);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Chapter = input.ReadInt32();
            break;
          }
          case 16: {
            Wave = input.ReadInt32();
            break;
          }
          case 24: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
