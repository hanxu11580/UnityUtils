// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csskin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSRoleSkinInUse : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleSkinInUse> _parser = new pb::MessageParser<CSRoleSkinInUse>(() => new CSRoleSkinInUse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleSkinInUse> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "skin_level" field.</summary>
    public const int SkinLevelFieldNumber = 2;
    private int skinLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinLevel {
      get { return skinLevel_; }
      set {
        skinLevel_ = value;
      }
    }

    /// <summary>Field number for the "skin_star_level" field.</summary>
    public const int SkinStarLevelFieldNumber = 3;
    private int skinStarLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinStarLevel {
      get { return skinStarLevel_; }
      set {
        skinStarLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (SkinLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkinLevel);
      }
      if (SkinStarLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkinStarLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (SkinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinLevel);
      }
      if (SkinStarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinStarLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            SkinLevel = input.ReadInt32();
            break;
          }
          case 24: {
            SkinStarLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSActiveSkinReq : pb::IMessage {
    private static readonly pb::MessageParser<CSActiveSkinReq> _parser = new pb::MessageParser<CSActiveSkinReq>(() => new CSActiveSkinReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSActiveSkinReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSActiveSkinResp : pb::IMessage {
    private static readonly pb::MessageParser<CSActiveSkinResp> _parser = new pb::MessageParser<CSActiveSkinResp>(() => new CSActiveSkinResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSActiveSkinResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUseSkinReq : pb::IMessage {
    private static readonly pb::MessageParser<CSUseSkinReq> _parser = new pb::MessageParser<CSUseSkinReq>(() => new CSUseSkinReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseSkinReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUseSkinResp : pb::IMessage {
    private static readonly pb::MessageParser<CSUseSkinResp> _parser = new pb::MessageParser<CSUseSkinResp>(() => new CSUseSkinResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseSkinResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUnuseSkinReq : pb::IMessage {
    private static readonly pb::MessageParser<CSUnuseSkinReq> _parser = new pb::MessageParser<CSUnuseSkinReq>(() => new CSUnuseSkinReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUnuseSkinReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUnuseSkinResp : pb::IMessage {
    private static readonly pb::MessageParser<CSUnuseSkinResp> _parser = new pb::MessageParser<CSUnuseSkinResp>(() => new CSUnuseSkinResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUnuseSkinResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinLevelUpReq> _parser = new pb::MessageParser<CSSkinLevelUpReq>(() => new CSSkinLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinLevelUpResp> _parser = new pb::MessageParser<CSSkinLevelUpResp>(() => new CSSkinLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinStarLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinStarLevelUpReq> _parser = new pb::MessageParser<CSSkinStarLevelUpReq>(() => new CSSkinStarLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinStarLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinStarLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinStarLevelUpResp> _parser = new pb::MessageParser<CSSkinStarLevelUpResp>(() => new CSSkinStarLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinStarLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_id" field.</summary>
    public const int SkinIdFieldNumber = 1;
    private int skinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinId {
      get { return skinId_; }
      set {
        skinId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinSlotUpgradeReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinSlotUpgradeReq> _parser = new pb::MessageParser<CSSkinSlotUpgradeReq>(() => new CSSkinSlotUpgradeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinSlotUpgradeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 1;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private int slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "curr_lv" field.</summary>
    public const int CurrLvFieldNumber = 3;
    private int currLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLv {
      get { return currLv_; }
      set {
        currLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DragonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DragonId);
      }
      if (SlotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotId);
      }
      if (CurrLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (CurrLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DragonId = input.ReadInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadInt32();
            break;
          }
          case 24: {
            CurrLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinSlotUpgradeResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinSlotUpgradeResp> _parser = new pb::MessageParser<CSSkinSlotUpgradeResp>(() => new CSSkinSlotUpgradeResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinSlotUpgradeResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 1;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 2;
    private int slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "slot_data" field.</summary>
    public const int SlotDataFieldNumber = 3;
    private global::Datap.RoleSkinSlotData slotData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleSkinSlotData SlotData {
      get { return slotData_; }
      set {
        slotData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DragonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DragonId);
      }
      if (SlotId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotId);
      }
      if (slotData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SlotData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (slotData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlotData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DragonId = input.ReadInt32();
            break;
          }
          case 16: {
            SlotId = input.ReadInt32();
            break;
          }
          case 26: {
            if (slotData_ == null) {
              slotData_ = new global::Datap.RoleSkinSlotData();
            }
            input.ReadMessage(slotData_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinEffectActiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinEffectActiveReq> _parser = new pb::MessageParser<CSSkinEffectActiveReq>(() => new CSSkinEffectActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinEffectActiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 1;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DragonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DragonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DragonId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSkinEffectActiveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSkinEffectActiveResp> _parser = new pb::MessageParser<CSSkinEffectActiveResp>(() => new CSSkinEffectActiveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSkinEffectActiveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 1;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DragonId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DragonId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DragonId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
