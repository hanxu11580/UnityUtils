// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cssystem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSBroadcastRole : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastRole> _parser = new pb::MessageParser<CSBroadcastRole>(() => new CSBroadcastRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastRole> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSBroadcastContentParams : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastContentParams> _parser = new pb::MessageParser<CSBroadcastContentParams>(() => new CSBroadcastContentParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastContentParams> Parser { get { return _parser; } }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 1;
    private global::Csp.CSBroadcastRole role_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSBroadcastRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 2;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "dragon_id" field.</summary>
    public const int DragonIdFieldNumber = 3;
    private int dragonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DragonId {
      get { return dragonId_; }
      set {
        dragonId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 4;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "equip_prop_id" field.</summary>
    public const int EquipPropIdFieldNumber = 6;
    private int equipPropId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipPropId {
      get { return equipPropId_; }
      set {
        equipPropId_ = value;
      }
    }

    /// <summary>Field number for the "equip_attr_id" field.</summary>
    public const int EquipAttrIdFieldNumber = 7;
    private int equipAttrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipAttrId {
      get { return equipAttrId_; }
      set {
        equipAttrId_ = value;
      }
    }

    /// <summary>Field number for the "equip_attr_value" field.</summary>
    public const int EquipAttrValueFieldNumber = 8;
    private int equipAttrValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EquipAttrValue {
      get { return equipAttrValue_; }
      set {
        equipAttrValue_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 9;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "refine_level" field.</summary>
    public const int RefineLevelFieldNumber = 10;
    private int refineLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefineLevel {
      get { return refineLevel_; }
      set {
        refineLevel_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 11;
    private int starLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "evo_level" field.</summary>
    public const int EvoLevelFieldNumber = 12;
    private int evoLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvoLevel {
      get { return evoLevel_; }
      set {
        evoLevel_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 13;
    private int quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "chapter" field.</summary>
    public const int ChapterFieldNumber = 14;
    private int chapter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Chapter {
      get { return chapter_; }
      set {
        chapter_ = value;
      }
    }

    /// <summary>Field number for the "talent_id" field.</summary>
    public const int TalentIdFieldNumber = 15;
    private int talentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalentId {
      get { return talentId_; }
      set {
        talentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (role_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Role);
      }
      if (CardId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardId);
      }
      if (DragonId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DragonId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SkillId);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (EquipPropId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EquipPropId);
      }
      if (EquipAttrId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EquipAttrId);
      }
      if (EquipAttrValue != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EquipAttrValue);
      }
      if (Level != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Level);
      }
      if (RefineLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RefineLevel);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StarLevel);
      }
      if (EvoLevel != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EvoLevel);
      }
      if (Quality != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Quality);
      }
      if (Chapter != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Chapter);
      }
      if (TalentId != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TalentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (role_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Role);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (DragonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DragonId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (EquipPropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipPropId);
      }
      if (EquipAttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipAttrId);
      }
      if (EquipAttrValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EquipAttrValue);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (RefineLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefineLevel);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (EvoLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvoLevel);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (Chapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Chapter);
      }
      if (TalentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (role_ == null) {
              role_ = new global::Csp.CSBroadcastRole();
            }
            input.ReadMessage(role_);
            break;
          }
          case 16: {
            CardId = input.ReadInt32();
            break;
          }
          case 24: {
            DragonId = input.ReadInt32();
            break;
          }
          case 32: {
            SkillId = input.ReadInt32();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            EquipPropId = input.ReadInt32();
            break;
          }
          case 56: {
            EquipAttrId = input.ReadInt32();
            break;
          }
          case 64: {
            EquipAttrValue = input.ReadInt32();
            break;
          }
          case 72: {
            Level = input.ReadInt32();
            break;
          }
          case 80: {
            RefineLevel = input.ReadInt32();
            break;
          }
          case 88: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 96: {
            EvoLevel = input.ReadInt32();
            break;
          }
          case 104: {
            Quality = input.ReadInt32();
            break;
          }
          case 112: {
            Chapter = input.ReadInt32();
            break;
          }
          case 120: {
            TalentId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSBroadcastParams : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastParams> _parser = new pb::MessageParser<CSBroadcastParams>(() => new CSBroadcastParams());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastParams> Parser { get { return _parser; } }

    /// <summary>Field number for the "dura" field.</summary>
    public const int DuraFieldNumber = 1;
    private int dura_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dura {
      get { return dura_; }
      set {
        dura_ = value;
      }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 2;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "start_at" field.</summary>
    public const int StartAtFieldNumber = 3;
    private long startAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    /// <summary>Field number for the "expire_at" field.</summary>
    public const int ExpireAtFieldNumber = 4;
    private long expireAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireAt {
      get { return expireAt_; }
      set {
        expireAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dura != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dura);
      }
      if (Times != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Times);
      }
      if (StartAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartAt);
      }
      if (ExpireAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpireAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dura != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dura);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (StartAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartAt);
      }
      if (ExpireAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Dura = input.ReadInt32();
            break;
          }
          case 16: {
            Times = input.ReadInt32();
            break;
          }
          case 24: {
            StartAt = input.ReadInt64();
            break;
          }
          case 32: {
            ExpireAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSBroadcastAdminOne : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastAdminOne> _parser = new pb::MessageParser<CSBroadcastAdminOne>(() => new CSBroadcastAdminOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastAdminOne> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private global::Csp.CSBroadcastParams params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSBroadcastParams Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (params_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 34: {
            if (params_ == null) {
              params_ = new global::Csp.CSBroadcastParams();
            }
            input.ReadMessage(params_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSHeartBeatReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHeartBeatReq> _parser = new pb::MessageParser<CSHeartBeatReq>(() => new CSHeartBeatReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeartBeatReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "hotfix" field.</summary>
    public const int HotfixFieldNumber = 2;
    private global::Csp.CSHotfix hotfix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSHotfix Hotfix {
      get { return hotfix_; }
      set {
        hotfix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (hotfix_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Hotfix);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (hotfix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hotfix);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 18: {
            if (hotfix_ == null) {
              hotfix_ = new global::Csp.CSHotfix();
            }
            input.ReadMessage(hotfix_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeartBeatResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHeartBeatResp> _parser = new pb::MessageParser<CSHeartBeatResp>(() => new CSHeartBeatResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeartBeatResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private ulong time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "new_mail" field.</summary>
    public const int NewMailFieldNumber = 3;
    private bool newMail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewMail {
      get { return newMail_; }
      set {
        newMail_ = value;
      }
    }

    /// <summary>Field number for the "hotfix" field.</summary>
    public const int HotfixFieldNumber = 4;
    private global::Csp.CSHotfix hotfix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSHotfix Hotfix {
      get { return hotfix_; }
      set {
        hotfix_ = value;
      }
    }

    /// <summary>Field number for the "new_announce" field.</summary>
    public const int NewAnnounceFieldNumber = 5;
    private bool newAnnounce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewAnnounce {
      get { return newAnnounce_; }
      set {
        newAnnounce_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Time);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (NewMail != false) {
        output.WriteRawTag(24);
        output.WriteBool(NewMail);
      }
      if (hotfix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Hotfix);
      }
      if (NewAnnounce != false) {
        output.WriteRawTag(40);
        output.WriteBool(NewAnnounce);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (NewMail != false) {
        size += 1 + 1;
      }
      if (hotfix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hotfix);
      }
      if (NewAnnounce != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Time = input.ReadUInt64();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            NewMail = input.ReadBool();
            break;
          }
          case 34: {
            if (hotfix_ == null) {
              hotfix_ = new global::Csp.CSHotfix();
            }
            input.ReadMessage(hotfix_);
            break;
          }
          case 40: {
            NewAnnounce = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeartBeatNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSHeartBeatNotify> _parser = new pb::MessageParser<CSHeartBeatNotify>(() => new CSHeartBeatNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeartBeatNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSBroadcastSystemNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastSystemNotify> _parser = new pb::MessageParser<CSBroadcastSystemNotify>(() => new CSBroadcastSystemNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastSystemNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private global::Csp.CSBroadcastContentParams params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSBroadcastContentParams Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      if (params_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            if (params_ == null) {
              params_ = new global::Csp.CSBroadcastContentParams();
            }
            input.ReadMessage(params_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSBroadcastAdminNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSBroadcastAdminNotify> _parser = new pb::MessageParser<CSBroadcastAdminNotify>(() => new CSBroadcastAdminNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSBroadcastAdminNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSBroadcastAdminOne> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSBroadcastAdminOne.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSBroadcastAdminOne> list_ = new pbc::RepeatedField<global::Csp.CSBroadcastAdminOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSBroadcastAdminOne> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSOnForeGroundReq : pb::IMessage {
    private static readonly pb::MessageParser<CSOnForeGroundReq> _parser = new pb::MessageParser<CSOnForeGroundReq>(() => new CSOnForeGroundReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSOnForeGroundReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
