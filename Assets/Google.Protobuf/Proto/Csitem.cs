// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csitem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSAwardType {
    KAwardTypeNone = 0,
    /// <summary>
    /// 熟练度宝箱
    /// </summary>
    KAwardTypeRegionBox = 1,
    /// <summary>
    /// 战斗奖励
    /// </summary>
    KAwardTypeBattle = 2,
    /// <summary>
    /// 挂机奖励
    /// </summary>
    KAwardTypeHangUp = 3,
    /// <summary>
    /// 卡牌共鸣
    /// </summary>
    KAwardTypeCardResonance = 4,
    /// <summary>
    /// 邮件附件
    /// </summary>
    KAwardTypeMailAttach = 5,
    /// <summary>
    /// 观看广告奖励
    /// </summary>
    KAwardTypeWatchAd = 6,
    /// <summary>
    /// 任务奖励
    /// </summary>
    KAwardTypeTaskAward = 7,
    /// <summary>
    /// 使用背包道具
    /// </summary>
    KAwardTypeBagItemAward = 8,
    /// <summary>
    /// 装备分解
    /// </summary>
    KAwardTypeEquipmentDecompose = 9,
    /// <summary>
    /// 道具兑换
    /// </summary>
    KAwardTypeExchange = 10,
    /// <summary>
    /// 充值
    /// </summary>
    KAwardTypeRecharge = 11,
    /// <summary>
    /// 礼包码兑换
    /// </summary>
    KAwardTypeGiftcode = 20,
    /// <summary>
    /// Max
    /// </summary>
    KCsawardTypeMax = 21,
  }

  public enum CSAttrUseType {
    KAttrUseTypeNone = 0,
    /// <summary>
    /// 抽卡
    /// </summary>
    KAttrUseTypeDraw = 1,
    KAttrUseTypePveStage = 2,
    KAttrUseTypeDeposit = 3,
    /// <summary>
    /// 邮件
    /// </summary>
    KAttrUseTypeMail = 4,
    /// <summary>
    /// 进化
    /// </summary>
    KAttrUseTypeEvolution = 5,
    /// <summary>
    /// 碎片合成
    /// </summary>
    KAttrUseTypeCardCompound = 6,
    /// <summary>
    /// 领奖
    /// </summary>
    KAttrUseTypeAward = 7,
    /// <summary>
    /// 战斗奖励
    /// </summary>
    KAttrUseTypeBattleAward = 8,
    /// <summary>
    /// 卡牌升级
    /// </summary>
    KAttrUseTypeCardStarUp = 9,
    /// <summary>
    /// 卡牌共鸣
    /// </summary>
    KAttrUseTypeCardResonance = 10,
    /// <summary>
    /// 观看广告奖励
    /// </summary>
    KAttrUseTypeWatchAd = 11,
    /// <summary>
    /// 任务领奖
    /// </summary>
    KAttrUseTypeTaskAward = 12,
    /// <summary>
    /// 副本战斗
    /// </summary>
    KAttrUseTypePveDungeon = 13,
    /// <summary>
    /// Max
    /// </summary>
    KCsattrUseTypeMax = 14,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSItemTransfer : pb::IMessage {
    private static readonly pb::MessageParser<CSItemTransfer> _parser = new pb::MessageParser<CSItemTransfer>(() => new CSItemTransfer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSItemTransfer> Parser { get { return _parser; } }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_origin_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> origin_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Origin {
      get { return origin_; }
    }

    /// <summary>Field number for the "transfered" field.</summary>
    public const int TransferedFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_transfered_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> transfered_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Transfered {
      get { return transfered_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      origin_.WriteTo(output, _repeated_origin_codec);
      transfered_.WriteTo(output, _repeated_transfered_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += origin_.CalculateSize(_repeated_origin_codec);
      size += transfered_.CalculateSize(_repeated_transfered_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            origin_.AddEntriesFrom(input, _repeated_origin_codec);
            break;
          }
          case 18: {
            transfered_.AddEntriesFrom(input, _repeated_transfered_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSItemRestore : pb::IMessage {
    private static readonly pb::MessageParser<CSItemRestore> _parser = new pb::MessageParser<CSItemRestore>(() => new CSItemRestore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSItemRestore> Parser { get { return _parser; } }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_num" field.</summary>
    public const int ItemNumFieldNumber = 2;
    private int itemNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    /// <summary>Field number for the "last_restore_time" field.</summary>
    public const int LastRestoreTimeFieldNumber = 3;
    private long lastRestoreTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRestoreTime {
      get { return lastRestoreTime_; }
      set {
        lastRestoreTime_ = value;
      }
    }

    /// <summary>Field number for the "restore_interval" field.</summary>
    public const int RestoreIntervalFieldNumber = 4;
    private int restoreInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestoreInterval {
      get { return restoreInterval_; }
      set {
        restoreInterval_ = value;
      }
    }

    /// <summary>Field number for the "restore_limit" field.</summary>
    public const int RestoreLimitFieldNumber = 5;
    private int restoreLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RestoreLimit {
      get { return restoreLimit_; }
      set {
        restoreLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemNum);
      }
      if (LastRestoreTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastRestoreTime);
      }
      if (RestoreInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RestoreInterval);
      }
      if (RestoreLimit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RestoreLimit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (LastRestoreTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRestoreTime);
      }
      if (RestoreInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestoreInterval);
      }
      if (RestoreLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestoreLimit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            ItemNum = input.ReadInt32();
            break;
          }
          case 24: {
            LastRestoreTime = input.ReadInt64();
            break;
          }
          case 32: {
            RestoreInterval = input.ReadInt32();
            break;
          }
          case 40: {
            RestoreLimit = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSAwardNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSAwardNotify> _parser = new pb::MessageParser<CSAwardNotify>(() => new CSAwardNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAwardNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Csp.CSAwardType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSAwardType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "equipment_awards" field.</summary>
    public const int EquipmentAwardsFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipmentAwards_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 26);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipmentAwards_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> EquipmentAwards {
      get { return equipmentAwards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      equipmentAwards_.WriteTo(output, _map_equipmentAwards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += equipmentAwards_.CalculateSize(_map_equipmentAwards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Csp.CSAwardType) input.ReadEnum();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 26: {
            equipmentAwards_.AddEntriesFrom(input, _map_equipmentAwards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRoleItemNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleItemNotify> _parser = new pb::MessageParser<CSRoleItemNotify>(() => new CSRoleItemNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleItemNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Csp.CSAttrUseType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSAttrUseType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> items_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Csp.CSAttrUseType) input.ReadEnum();
            break;
          }
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeReq> _parser = new pb::MessageParser<CSExchangeReq>(() => new CSExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "slient" field.</summary>
    public const int SlientFieldNumber = 3;
    private bool slient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Slient {
      get { return slient_; }
      set {
        slient_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
      if (Amount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Amount);
      }
      if (Slient != false) {
        output.WriteRawTag(24);
        output.WriteBool(Slient);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Slient != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
          case 16: {
            Amount = input.ReadInt32();
            break;
          }
          case 24: {
            Slient = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeResp : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeResp> _parser = new pb::MessageParser<CSExchangeResp>(() => new CSExchangeResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> items_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeNotify> _parser = new pb::MessageParser<CSExchangeNotify>(() => new CSExchangeNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSItemOnRestoreAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CSItemOnRestoreAllReq> _parser = new pb::MessageParser<CSItemOnRestoreAllReq>(() => new CSItemOnRestoreAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSItemOnRestoreAllReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSItemOnRestoreAllResp : pb::IMessage {
    private static readonly pb::MessageParser<CSItemOnRestoreAllResp> _parser = new pb::MessageParser<CSItemOnRestoreAllResp>(() => new CSItemOnRestoreAllResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSItemOnRestoreAllResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSItemOnRestoreAllNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSItemOnRestoreAllNotify> _parser = new pb::MessageParser<CSItemOnRestoreAllNotify>(() => new CSItemOnRestoreAllNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSItemOnRestoreAllNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSItemRestore> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSItemRestore.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSItemRestore> items_ = new pbc::RepeatedField<global::Csp.CSItemRestore>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSItemRestore> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
