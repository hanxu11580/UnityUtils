// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsequipment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum EquipmentMisc {
    KEquipmentMisc = 0,
    /// <summary>
    /// 装备分解请求上限
    /// </summary>
    KMaxEquipmentReq = 100,
    /// <summary>
    /// 每件装备词缀数上限
    /// </summary>
    KMaxEquipmentPrefix = 5,
    /// <summary>
    /// 每件装备随机属性条数上限
    /// </summary>
    KMaxEquipmentRandomAttr = 10,
    /// <summary>
    /// 玩家的装备数量上限
    /// </summary>
    KMaxEquipmentNum = 350,
    /// <summary>
    /// 玩家的装备数量上限
    /// </summary>
    KMaxEquipmentData = 450,
    /// <summary>
    /// 玩家装备槽上限
    /// </summary>
    KMaxEquipmentSlotNum = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class EquipRandomAttr : pb::IMessage {
    private static readonly pb::MessageParser<EquipRandomAttr> _parser = new pb::MessageParser<EquipRandomAttr>(() => new EquipRandomAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipRandomAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "attr_id" field.</summary>
    public const int AttrIdFieldNumber = 1;
    private int attrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrId {
      get { return attrId_; }
      set {
        attrId_ = value;
      }
    }

    /// <summary>Field number for the "attr_val" field.</summary>
    public const int AttrValFieldNumber = 2;
    private int attrVal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttrVal {
      get { return attrVal_; }
      set {
        attrVal_ = value;
      }
    }

    /// <summary>Field number for the "is_locked" field.</summary>
    public const int IsLockedFieldNumber = 3;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "random_attr_id" field.</summary>
    public const int RandomAttrIdFieldNumber = 4;
    private int randomAttrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RandomAttrId {
      get { return randomAttrId_; }
      set {
        randomAttrId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttrId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttrId);
      }
      if (AttrVal != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttrVal);
      }
      if (IsLocked != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLocked);
      }
      if (RandomAttrId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RandomAttrId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrId);
      }
      if (AttrVal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttrVal);
      }
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (RandomAttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RandomAttrId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AttrId = input.ReadInt32();
            break;
          }
          case 16: {
            AttrVal = input.ReadInt32();
            break;
          }
          case 24: {
            IsLocked = input.ReadBool();
            break;
          }
          case 32: {
            RandomAttrId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipmentDetailAttr : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentDetailAttr> _parser = new pb::MessageParser<EquipmentDetailAttr>(() => new EquipmentDetailAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentDetailAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    /// <summary>Field number for the "base_attr_id" field.</summary>
    public const int BaseAttrIdFieldNumber = 2;
    private int baseAttrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseAttrId {
      get { return baseAttrId_; }
      set {
        baseAttrId_ = value;
      }
    }

    /// <summary>Field number for the "random_attrs" field.</summary>
    public const int RandomAttrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.EquipRandomAttr> _repeated_randomAttrs_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.EquipRandomAttr.Parser);
    private readonly pbc::RepeatedField<global::Datap.EquipRandomAttr> randomAttrs_ = new pbc::RepeatedField<global::Datap.EquipRandomAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.EquipRandomAttr> RandomAttrs {
      get { return randomAttrs_; }
    }

    /// <summary>Field number for the "prefix_attr_ids" field.</summary>
    public const int PrefixAttrIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_prefixAttrIds_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> prefixAttrIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PrefixAttrIds {
      get { return prefixAttrIds_; }
    }

    /// <summary>Field number for the "suit_attr_id" field.</summary>
    public const int SuitAttrIdFieldNumber = 5;
    private int suitAttrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuitAttrId {
      get { return suitAttrId_; }
      set {
        suitAttrId_ = value;
      }
    }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 6;
    private int slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "is_locked" field.</summary>
    public const int IsLockedFieldNumber = 7;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
      if (BaseAttrId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BaseAttrId);
      }
      randomAttrs_.WriteTo(output, _repeated_randomAttrs_codec);
      prefixAttrIds_.WriteTo(output, _repeated_prefixAttrIds_codec);
      if (SuitAttrId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SuitAttrId);
      }
      if (SlotId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SlotId);
      }
      if (IsLocked != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      if (BaseAttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseAttrId);
      }
      size += randomAttrs_.CalculateSize(_repeated_randomAttrs_codec);
      size += prefixAttrIds_.CalculateSize(_repeated_prefixAttrIds_codec);
      if (SuitAttrId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuitAttrId);
      }
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (IsLocked != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
          case 16: {
            BaseAttrId = input.ReadInt32();
            break;
          }
          case 26: {
            randomAttrs_.AddEntriesFrom(input, _repeated_randomAttrs_codec);
            break;
          }
          case 34:
          case 32: {
            prefixAttrIds_.AddEntriesFrom(input, _repeated_prefixAttrIds_codec);
            break;
          }
          case 40: {
            SuitAttrId = input.ReadInt32();
            break;
          }
          case 48: {
            SlotId = input.ReadInt32();
            break;
          }
          case 56: {
            IsLocked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipmentData : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentData> _parser = new pb::MessageParser<EquipmentData>(() => new EquipmentData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentData> Parser { get { return _parser; } }

    /// <summary>Field number for the "detail_attrs" field.</summary>
    public const int DetailAttrsFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_detailAttrs_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 10);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> detailAttrs_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> DetailAttrs {
      get { return detailAttrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      detailAttrs_.WriteTo(output, _map_detailAttrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += detailAttrs_.CalculateSize(_map_detailAttrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            detailAttrs_.AddEntriesFrom(input, _map_detailAttrs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class EquipmentSlot : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentSlot> _parser = new pb::MessageParser<EquipmentSlot>(() => new EquipmentSlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentSlot> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot_level" field.</summary>
    public const int SlotLevelFieldNumber = 1;
    private int slotLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotLevel {
      get { return slotLevel_; }
      set {
        slotLevel_ = value;
      }
    }

    /// <summary>Field number for the "slot_refine_level" field.</summary>
    public const int SlotRefineLevelFieldNumber = 2;
    private int slotRefineLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotRefineLevel {
      get { return slotRefineLevel_; }
      set {
        slotRefineLevel_ = value;
      }
    }

    /// <summary>Field number for the "slot_refine_exp" field.</summary>
    public const int SlotRefineExpFieldNumber = 3;
    private int slotRefineExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotRefineExp {
      get { return slotRefineExp_; }
      set {
        slotRefineExp_ = value;
      }
    }

    /// <summary>Field number for the "slot_refine_succ_rate" field.</summary>
    public const int SlotRefineSuccRateFieldNumber = 4;
    private int slotRefineSuccRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotRefineSuccRate {
      get { return slotRefineSuccRate_; }
      set {
        slotRefineSuccRate_ = value;
      }
    }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 5;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotLevel);
      }
      if (SlotRefineLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotRefineLevel);
      }
      if (SlotRefineExp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SlotRefineExp);
      }
      if (SlotRefineSuccRate != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlotRefineSuccRate);
      }
      if (EquipmentId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotLevel);
      }
      if (SlotRefineLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotRefineLevel);
      }
      if (SlotRefineExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotRefineExp);
      }
      if (SlotRefineSuccRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotRefineSuccRate);
      }
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotLevel = input.ReadInt32();
            break;
          }
          case 16: {
            SlotRefineLevel = input.ReadInt32();
            break;
          }
          case 24: {
            SlotRefineExp = input.ReadInt32();
            break;
          }
          case 32: {
            SlotRefineSuccRate = input.ReadInt32();
            break;
          }
          case 40: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class EquipmentSlotsData : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentSlotsData> _parser = new pb::MessageParser<EquipmentSlotsData>(() => new EquipmentSlotsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipmentSlotsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.EquipmentSlot>.Codec _map_slots_codec
        = new pbc::MapField<int, global::Datap.EquipmentSlot>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentSlot.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.EquipmentSlot> slots_ = new pbc::MapField<int, global::Datap.EquipmentSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.EquipmentSlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _map_slots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_map_slots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _map_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleEquipmentData : pb::IMessage {
    private static readonly pb::MessageParser<RoleEquipmentData> _parser = new pb::MessageParser<RoleEquipmentData>(() => new RoleEquipmentData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleEquipmentData> Parser { get { return _parser; } }

    /// <summary>Field number for the "slots_data" field.</summary>
    public const int SlotsDataFieldNumber = 1;
    private global::Datap.EquipmentSlotsData slotsData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.EquipmentSlotsData SlotsData {
      get { return slotsData_; }
      set {
        slotsData_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 2;
    private global::Datap.EquipmentData equipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.EquipmentData Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (slotsData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SlotsData);
      }
      if (equipment_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equipment);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (slotsData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SlotsData);
      }
      if (equipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (slotsData_ == null) {
              slotsData_ = new global::Datap.EquipmentSlotsData();
            }
            input.ReadMessage(slotsData_);
            break;
          }
          case 18: {
            if (equipment_ == null) {
              equipment_ = new global::Datap.EquipmentData();
            }
            input.ReadMessage(equipment_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
