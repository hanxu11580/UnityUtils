// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrecharge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSRechargeUseType {
    /// <summary>
    /// 0元充值
    /// </summary>
    KRechargeUseTypeNone = 0,
    /// <summary>
    /// 使用退款代币
    /// </summary>
    KRechargeUseTypeVoucher = 1,
    /// <summary>
    /// 付费钻石购买
    /// </summary>
    KRechargeUseTypeDiamond = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCsrechargeUseTypeMax = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSRechargeOrderReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeOrderReq> _parser = new pb::MessageParser<CSRechargeOrderReq>(() => new CSRechargeOrderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeOrderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recharge_id" field.</summary>
    public const int RechargeIdFieldNumber = 1;
    private int rechargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 2;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 3;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 4;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeId);
      }
      if (Money != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Money);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductId);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeId = input.ReadInt32();
            break;
          }
          case 16: {
            Money = input.ReadInt32();
            break;
          }
          case 26: {
            ProductId = input.ReadString();
            break;
          }
          case 34: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRechargeOrderResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeOrderResp> _parser = new pb::MessageParser<CSRechargeOrderResp>(() => new CSRechargeOrderResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeOrderResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "recharge_id" field.</summary>
    public const int RechargeIdFieldNumber = 1;
    private int rechargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = value;
      }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 2;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 3;
    private string productId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductId {
      get { return productId_; }
      set {
        productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderid" field.</summary>
    public const int OrderidFieldNumber = 4;
    private string orderid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Orderid {
      get { return orderid_; }
      set {
        orderid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "receipt_url" field.</summary>
    public const int ReceiptUrlFieldNumber = 5;
    private string receiptUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReceiptUrl {
      get { return receiptUrl_; }
      set {
        receiptUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sdk_extend" field.</summary>
    public const int SdkExtendFieldNumber = 6;
    private string sdkExtend_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkExtend {
      get { return sdkExtend_; }
      set {
        sdkExtend_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeId);
      }
      if (Money != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Money);
      }
      if (ProductId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductId);
      }
      if (Orderid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Orderid);
      }
      if (ReceiptUrl.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ReceiptUrl);
      }
      if (SdkExtend.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SdkExtend);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
      }
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (ProductId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
      }
      if (Orderid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Orderid);
      }
      if (ReceiptUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiptUrl);
      }
      if (SdkExtend.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkExtend);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeId = input.ReadInt32();
            break;
          }
          case 16: {
            Money = input.ReadInt32();
            break;
          }
          case 26: {
            ProductId = input.ReadString();
            break;
          }
          case 34: {
            Orderid = input.ReadString();
            break;
          }
          case 42: {
            ReceiptUrl = input.ReadString();
            break;
          }
          case 50: {
            SdkExtend = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRechargeCancelOrderReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeCancelOrderReq> _parser = new pb::MessageParser<CSRechargeCancelOrderReq>(() => new CSRechargeCancelOrderReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeCancelOrderReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recharge_id" field.</summary>
    public const int RechargeIdFieldNumber = 1;
    private int rechargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = value;
      }
    }

    /// <summary>Field number for the "orderid" field.</summary>
    public const int OrderidFieldNumber = 2;
    private string orderid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Orderid {
      get { return orderid_; }
      set {
        orderid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeId);
      }
      if (Orderid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Orderid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
      }
      if (Orderid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Orderid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeId = input.ReadInt32();
            break;
          }
          case 18: {
            Orderid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRechargeCancelOrderResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeCancelOrderResp> _parser = new pb::MessageParser<CSRechargeCancelOrderResp>(() => new CSRechargeCancelOrderResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeCancelOrderResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRechargeExchangeReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeExchangeReq> _parser = new pb::MessageParser<CSRechargeExchangeReq>(() => new CSRechargeExchangeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeExchangeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recharge_id" field.</summary>
    public const int RechargeIdFieldNumber = 1;
    private int rechargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = value;
      }
    }

    /// <summary>Field number for the "use_type" field.</summary>
    public const int UseTypeFieldNumber = 2;
    private global::Csp.CSRechargeUseType useType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRechargeUseType UseType {
      get { return useType_; }
      set {
        useType_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 3;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeId);
      }
      if (UseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UseType);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
      }
      if (UseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UseType);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeId = input.ReadInt32();
            break;
          }
          case 16: {
            useType_ = (global::Csp.CSRechargeUseType) input.ReadEnum();
            break;
          }
          case 26: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRechargeExchangeResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeExchangeResp> _parser = new pb::MessageParser<CSRechargeExchangeResp>(() => new CSRechargeExchangeResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeExchangeResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "recharge_id" field.</summary>
    public const int RechargeIdFieldNumber = 1;
    private int rechargeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RechargeId {
      get { return rechargeId_; }
      set {
        rechargeId_ = value;
      }
    }

    /// <summary>Field number for the "use_type" field.</summary>
    public const int UseTypeFieldNumber = 2;
    private global::Csp.CSRechargeUseType useType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRechargeUseType UseType {
      get { return useType_; }
      set {
        useType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RechargeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RechargeId);
      }
      if (UseType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UseType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RechargeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RechargeId);
      }
      if (UseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UseType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RechargeId = input.ReadInt32();
            break;
          }
          case 16: {
            useType_ = (global::Csp.CSRechargeUseType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRechargeUpdateReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeUpdateReq> _parser = new pb::MessageParser<CSRechargeUpdateReq>(() => new CSRechargeUpdateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeUpdateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRechargeUpdateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRechargeUpdateResp> _parser = new pb::MessageParser<CSRechargeUpdateResp>(() => new CSRechargeUpdateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRechargeUpdateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "orderid" field.</summary>
    public const int OrderidFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_orderid_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> orderid_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Orderid {
      get { return orderid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      orderid_.WriteTo(output, _repeated_orderid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += orderid_.CalculateSize(_repeated_orderid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            orderid_.AddEntriesFrom(input, _repeated_orderid_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
