// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cshangup.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSHangUpStateReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpStateReq> _parser = new pb::MessageParser<CSHangUpStateReq>(() => new CSHangUpStateReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpStateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSHangUpStateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpStateResp> _parser = new pb::MessageParser<CSHangUpStateResp>(() => new CSHangUpStateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpStateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "duration_seconds" field.</summary>
    public const int DurationSecondsFieldNumber = 1;
    private int durationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSeconds {
      get { return durationSeconds_; }
      set {
        durationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "max_hang_up_seconds" field.</summary>
    public const int MaxHangUpSecondsFieldNumber = 2;
    private int maxHangUpSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHangUpSeconds {
      get { return maxHangUpSeconds_; }
      set {
        maxHangUpSeconds_ = value;
      }
    }

    /// <summary>Field number for the "max_prop_tickets" field.</summary>
    public const int MaxPropTicketsFieldNumber = 4;
    private int maxPropTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPropTickets {
      get { return maxPropTickets_; }
      set {
        maxPropTickets_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(42, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DurationSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DurationSeconds);
      }
      if (MaxHangUpSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxHangUpSeconds);
      }
      if (MaxPropTickets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPropTickets);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DurationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSeconds);
      }
      if (MaxHangUpSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHangUpSeconds);
      }
      if (MaxPropTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPropTickets);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DurationSeconds = input.ReadInt32();
            break;
          }
          case 16: {
            MaxHangUpSeconds = input.ReadInt32();
            break;
          }
          case 32: {
            MaxPropTickets = input.ReadInt32();
            break;
          }
          case 42: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSHangUpUsePropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpUsePropReq> _parser = new pb::MessageParser<CSHangUpUsePropReq>(() => new CSHangUpUsePropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpUsePropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "prop_id" field.</summary>
    public const int PropIdFieldNumber = 1;
    private int propId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropId {
      get { return propId_; }
      set {
        propId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PropId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHangUpUsePropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpUsePropResp> _parser = new pb::MessageParser<CSHangUpUsePropResp>(() => new CSHangUpUsePropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpUsePropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "max_prop_tickets" field.</summary>
    public const int MaxPropTicketsFieldNumber = 2;
    private int maxPropTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPropTickets {
      get { return maxPropTickets_; }
      set {
        maxPropTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxPropTickets != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPropTickets);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxPropTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPropTickets);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            MaxPropTickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHangUpHarvestAwardsReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpHarvestAwardsReq> _parser = new pb::MessageParser<CSHangUpHarvestAwardsReq>(() => new CSHangUpHarvestAwardsReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpHarvestAwardsReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSHangUpHarvestAwardsResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpHarvestAwardsResp> _parser = new pb::MessageParser<CSHangUpHarvestAwardsResp>(() => new CSHangUpHarvestAwardsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpHarvestAwardsResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "duration_seconds" field.</summary>
    public const int DurationSecondsFieldNumber = 1;
    private int durationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSeconds {
      get { return durationSeconds_; }
      set {
        durationSeconds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DurationSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DurationSeconds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DurationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSeconds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DurationSeconds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHangUpDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSHangUpDataNotify> _parser = new pb::MessageParser<CSHangUpDataNotify>(() => new CSHangUpDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHangUpDataNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "duration_seconds" field.</summary>
    public const int DurationSecondsFieldNumber = 1;
    private int durationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationSeconds {
      get { return durationSeconds_; }
      set {
        durationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "max_hang_up_seconds" field.</summary>
    public const int MaxHangUpSecondsFieldNumber = 2;
    private int maxHangUpSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHangUpSeconds {
      get { return maxHangUpSeconds_; }
      set {
        maxHangUpSeconds_ = value;
      }
    }

    /// <summary>Field number for the "max_prop_tickets" field.</summary>
    public const int MaxPropTicketsFieldNumber = 4;
    private int maxPropTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPropTickets {
      get { return maxPropTickets_; }
      set {
        maxPropTickets_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(42, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "equipment_awards" field.</summary>
    public const int EquipmentAwardsFieldNumber = 6;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipmentAwards_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 50);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipmentAwards_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> EquipmentAwards {
      get { return equipmentAwards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DurationSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DurationSeconds);
      }
      if (MaxHangUpSeconds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxHangUpSeconds);
      }
      if (MaxPropTickets != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxPropTickets);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      equipmentAwards_.WriteTo(output, _map_equipmentAwards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DurationSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSeconds);
      }
      if (MaxHangUpSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHangUpSeconds);
      }
      if (MaxPropTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPropTickets);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += equipmentAwards_.CalculateSize(_map_equipmentAwards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DurationSeconds = input.ReadInt32();
            break;
          }
          case 16: {
            MaxHangUpSeconds = input.ReadInt32();
            break;
          }
          case 32: {
            MaxPropTickets = input.ReadInt32();
            break;
          }
          case 42: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 50: {
            equipmentAwards_.AddEntriesFrom(input, _map_equipmentAwards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
