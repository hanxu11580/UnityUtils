// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cscard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSDrawCostType {
    KDrawCostTypeNone = 0,
    /// <summary>
    /// 道具
    /// </summary>
    KDrawCostTypeItem = 1,
    /// <summary>
    /// 货币
    /// </summary>
    KDrawCostTypeConsume = 2,
    /// <summary>
    /// 观看广告
    /// </summary>
    KDrawCostTypeAdPoint = 3,
    /// <summary>
    /// 优先消耗道具
    /// </summary>
    KDrawCostTypeMixed = 4,
    /// <summary>
    /// Max
    /// </summary>
    KCsdrawCostTypeMax = 5,
  }

  public enum CSDrawTransformType {
    TransformTypeNone = 0,
    /// <summary>
    /// 卡牌到通用碎片
    /// </summary>
    TransformTypeCardToCommonDebris = 1,
    /// <summary>
    /// 卡牌到特定碎片
    /// </summary>
    TransformTypeCardToSpecDebris = 2,
    /// <summary>
    /// 特定碎片到通用碎片
    /// </summary>
    TransformTypeSpecToCommonDebris = 3,
    /// <summary>
    /// Max
    /// </summary>
    KCsdrawTransformTypeMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSDrawResult : pb::IMessage {
    private static readonly pb::MessageParser<CSDrawResult> _parser = new pb::MessageParser<CSDrawResult>(() => new CSDrawResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDrawResult> Parser { get { return _parser; } }

    /// <summary>Field number for the "transform_type" field.</summary>
    public const int TransformTypeFieldNumber = 1;
    private global::Csp.CSDrawTransformType transformType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSDrawTransformType TransformType {
      get { return transformType_; }
      set {
        transformType_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 2;
    private global::Datap.Item origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Item Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 3;
    private global::Datap.Item after_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Item After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransformType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TransformType);
      }
      if (origin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Origin);
      }
      if (after_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(After);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransformType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransformType);
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (after_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(After);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            transformType_ = (global::Csp.CSDrawTransformType) input.ReadEnum();
            break;
          }
          case 18: {
            if (origin_ == null) {
              origin_ = new global::Datap.Item();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 26: {
            if (after_ == null) {
              after_ = new global::Datap.Item();
            }
            input.ReadMessage(after_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSCard : pb::IMessage {
    private static readonly pb::MessageParser<CSCard> _parser = new pb::MessageParser<CSCard>(() => new CSCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCard> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 2;
    private int starLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "refine_level" field.</summary>
    public const int RefineLevelFieldNumber = 3;
    private int refineLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefineLevel {
      get { return refineLevel_; }
      set {
        refineLevel_ = value;
      }
    }

    /// <summary>Field number for the "passive_effect_stack_num" field.</summary>
    public const int PassiveEffectStackNumFieldNumber = 4;
    private int passiveEffectStackNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PassiveEffectStackNum {
      get { return passiveEffectStackNum_; }
      set {
        passiveEffectStackNum_ = value;
      }
    }

    /// <summary>Field number for the "activated" field.</summary>
    public const int ActivatedFieldNumber = 5;
    private bool activated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Activated {
      get { return activated_; }
      set {
        activated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StarLevel);
      }
      if (RefineLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefineLevel);
      }
      if (PassiveEffectStackNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PassiveEffectStackNum);
      }
      if (Activated != false) {
        output.WriteRawTag(40);
        output.WriteBool(Activated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (RefineLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefineLevel);
      }
      if (PassiveEffectStackNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PassiveEffectStackNum);
      }
      if (Activated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 24: {
            RefineLevel = input.ReadInt32();
            break;
          }
          case 32: {
            PassiveEffectStackNum = input.ReadInt32();
            break;
          }
          case 40: {
            Activated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSCardActiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCardActiveReq> _parser = new pb::MessageParser<CSCardActiveReq>(() => new CSCardActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardActiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardActiveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSCardActiveResp> _parser = new pb::MessageParser<CSCardActiveResp>(() => new CSCardActiveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardActiveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private global::Datap.Card card_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Card Card {
      get { return card_; }
      set {
        card_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (card_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Card);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (card_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Card);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (card_ == null) {
              card_ = new global::Datap.Card();
            }
            input.ReadMessage(card_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardStarLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCardStarLevelUpReq> _parser = new pb::MessageParser<CSCardStarLevelUpReq>(() => new CSCardStarLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardStarLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardStarLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSCardStarLevelUpResp> _parser = new pb::MessageParser<CSCardStarLevelUpResp>(() => new CSCardStarLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardStarLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "transform_debris" field.</summary>
    public const int TransformDebrisFieldNumber = 3;
    private bool transformDebris_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransformDebris {
      get { return transformDebris_; }
      set {
        transformDebris_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 4;
    private global::Datap.Item origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Item Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "after" field.</summary>
    public const int AfterFieldNumber = 5;
    private global::Datap.Item after_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.Item After {
      get { return after_; }
      set {
        after_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (TransformDebris != false) {
        output.WriteRawTag(24);
        output.WriteBool(TransformDebris);
      }
      if (origin_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Origin);
      }
      if (after_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(After);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (TransformDebris != false) {
        size += 1 + 1;
      }
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (after_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(After);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            TransformDebris = input.ReadBool();
            break;
          }
          case 34: {
            if (origin_ == null) {
              origin_ = new global::Datap.Item();
            }
            input.ReadMessage(origin_);
            break;
          }
          case 42: {
            if (after_ == null) {
              after_ = new global::Datap.Item();
            }
            input.ReadMessage(after_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardRefineLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCardRefineLevelUpReq> _parser = new pb::MessageParser<CSCardRefineLevelUpReq>(() => new CSCardRefineLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardRefineLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardRefineLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSCardRefineLevelUpResp> _parser = new pb::MessageParser<CSCardRefineLevelUpResp>(() => new CSCardRefineLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardRefineLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardResonanceLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCardResonanceLevelUpReq> _parser = new pb::MessageParser<CSCardResonanceLevelUpReq>(() => new CSCardResonanceLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardResonanceLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_resonance_id" field.</summary>
    public const int CardResonanceIdFieldNumber = 1;
    private int cardResonanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardResonanceId {
      get { return cardResonanceId_; }
      set {
        cardResonanceId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardResonanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardResonanceId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardResonanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardResonanceId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardResonanceId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardResonanceLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSCardResonanceLevelUpResp> _parser = new pb::MessageParser<CSCardResonanceLevelUpResp>(() => new CSCardResonanceLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardResonanceLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_resonance_id" field.</summary>
    public const int CardResonanceIdFieldNumber = 1;
    private int cardResonanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardResonanceId {
      get { return cardResonanceId_; }
      set {
        cardResonanceId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardResonanceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardResonanceId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardResonanceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardResonanceId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardResonanceId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardDrawReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCardDrawReq> _parser = new pb::MessageParser<CSCardDrawReq>(() => new CSCardDrawReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardDrawReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "cost_type" field.</summary>
    public const int CostTypeFieldNumber = 2;
    private global::Csp.CSDrawCostType costType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSDrawCostType CostType {
      get { return costType_; }
      set {
        costType_ = value;
      }
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 3;
    private int poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (CostType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CostType);
      }
      if (PoolId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PoolId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (CostType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CostType);
      }
      if (PoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            costType_ = (global::Csp.CSDrawCostType) input.ReadEnum();
            break;
          }
          case 24: {
            PoolId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCardDrawResp : pb::IMessage {
    private static readonly pb::MessageParser<CSCardDrawResp> _parser = new pb::MessageParser<CSCardDrawResp>(() => new CSCardDrawResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCardDrawResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSDrawResult> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::Csp.CSDrawResult.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSDrawResult> result_ = new pbc::RepeatedField<global::Csp.CSDrawResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSDrawResult> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
