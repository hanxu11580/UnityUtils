// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrole.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSRoleLogoutReason {
    KRoleLogoutReasonUnknown = 0,
    /// <summary>
    /// 正常
    /// </summary>
    KRoleLogoutReasonNormal = 1,
    /// <summary>
    /// 登录失败
    /// </summary>
    KRoleLogoutReasonLoginFail = 2,
    /// <summary>
    /// 超时
    /// </summary>
    KRoleLogoutReasonTimeOut = 3,
    /// <summary>
    /// 顶号
    /// </summary>
    KRoleLogoutReasonRemoteLogin = 4,
    /// <summary>
    /// 封号
    /// </summary>
    KRoleLogoutReasonFreeze = 5,
    /// <summary>
    /// 客户端版本错误
    /// </summary>
    KRoleLogoutReasonClientVersionError = 6,
    /// <summary>
    /// 创角限制
    /// </summary>
    KRoleLogoutReasonCreateLimit = 7,
    /// <summary>
    /// 防沉迷
    /// </summary>
    KRoleLogoutReasonAntiAddiction = 8,
    /// <summary>
    /// Max
    /// </summary>
    KCsroleLogoutReasonMax = 9,
  }

  public enum CSRoleLoginRespCode {
    KRoleLoginNoError = 0,
    KRoleLoginErrorPfsystem = 2,
    KRoleLoginErrorPftokenNotValid = 3,
    KRoleLoginErrorNoRole = 4,
    KRoleLoginErrorFreeze = 5,
    KRoleLoginErrorRoleFull = 6,
    KRoleLoginErrorSvrMarkNotMatch = 7,
    KRoleLoginErrorReconnectTimeOut = 8,
    KRoleLoginErrorClientResVersion = 9,
    KRoleLoginErrorCreateLimit = 10,
    KRoleLoginErrorAntAddiction = 11,
    /// <summary>
    /// Max
    /// </summary>
    KCsroleLoginRespCodeMax = 12,
  }

  public enum CSLevelType {
    KLevelTypeNone = 0,
    KRoleLevel = 1,
    KEvoLevel = 2,
    /// <summary>
    /// Max
    /// </summary>
    KCslevelTypeMax = 3,
  }

  public enum CSSystem {
    KCssystemNone = 0,
    KCssystemSocialGift = 1,
    KCssystemSocialApply = 2,
    KCssystemRankRecord = 3,
    KCssystemMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSHotfix : pb::IMessage {
    private static readonly pb::MessageParser<CSHotfix> _parser = new pb::MessageParser<CSHotfix>(() => new CSHotfix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHotfix> Parser { get { return _parser; } }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "md5" field.</summary>
    public const int Md5FieldNumber = 2;
    private string md5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Md5 {
      get { return md5_; }
      set {
        md5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (Md5.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Md5);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Md5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Md5);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
          case 18: {
            Md5 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSRoleLoginReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleLoginReq> _parser = new pb::MessageParser<CSRoleLoginReq>(() => new CSRoleLoginReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRoleLoginResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleLoginResp> _parser = new pb::MessageParser<CSRoleLoginResp>(() => new CSRoleLoginResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleLoginResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "respid" field.</summary>
    public const int RespidFieldNumber = 1;
    private global::Csp.CSRoleLoginRespCode respid_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRoleLoginRespCode Respid {
      get { return respid_; }
      set {
        respid_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "hotfix" field.</summary>
    public const int HotfixFieldNumber = 7;
    private global::Csp.CSHotfix hotfix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSHotfix Hotfix {
      get { return hotfix_; }
      set {
        hotfix_ = value;
      }
    }

    /// <summary>Field number for the "new_role" field.</summary>
    public const int NewRoleFieldNumber = 9;
    private bool newRole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NewRole {
      get { return newRole_; }
      set {
        newRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Respid != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Respid);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (hotfix_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Hotfix);
      }
      if (NewRole != false) {
        output.WriteRawTag(72);
        output.WriteBool(NewRole);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Respid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Respid);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (hotfix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hotfix);
      }
      if (NewRole != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            respid_ = (global::Csp.CSRoleLoginRespCode) input.ReadEnum();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 58: {
            if (hotfix_ == null) {
              hotfix_ = new global::Csp.CSHotfix();
            }
            input.ReadMessage(hotfix_);
            break;
          }
          case 72: {
            NewRole = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRoleLoginNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleLoginNotify> _parser = new pb::MessageParser<CSRoleLoginNotify>(() => new CSRoleLoginNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleLoginNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRoleDataSyncNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleDataSyncNotify> _parser = new pb::MessageParser<CSRoleDataSyncNotify>(() => new CSRoleDataSyncNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleDataSyncNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "role_data" field.</summary>
    public const int RoleDataFieldNumber = 1;
    private global::Datap.RoleData roleData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleData RoleData {
      get { return roleData_; }
      set {
        roleData_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (roleData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RoleData);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Time);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (roleData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (roleData_ == null) {
              roleData_ = new global::Datap.RoleData();
            }
            input.ReadMessage(roleData_);
            break;
          }
          case 16: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRoleLogoutReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleLogoutReq> _parser = new pb::MessageParser<CSRoleLogoutReq>(() => new CSRoleLogoutReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleLogoutReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRoleLogoutResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRoleLogoutResp> _parser = new pb::MessageParser<CSRoleLogoutResp>(() => new CSRoleLogoutResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRoleLogoutResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::Csp.CSRoleLogoutReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRoleLogoutReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::Csp.CSRoleLogoutReason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSLevelUpReq> _parser = new pb::MessageParser<CSLevelUpReq>(() => new CSLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "next_lv" field.</summary>
    public const int NextLvFieldNumber = 1;
    private int nextLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLv {
      get { return nextLv_; }
      set {
        nextLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextLv != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NextLv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NextLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSLevelUpResp> _parser = new pb::MessageParser<CSLevelUpResp>(() => new CSLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Csp.CSLevelType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSLevelType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 2;
    private int lv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Lv != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lv);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Csp.CSLevelType) input.ReadEnum();
            break;
          }
          case 16: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRenameReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRenameReq> _parser = new pb::MessageParser<CSRenameReq>(() => new CSRenameReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRenameReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRenameResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRenameResp> _parser = new pb::MessageParser<CSRenameResp>(() => new CSRenameResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRenameResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSCDOneReq : pb::IMessage {
    private static readonly pb::MessageParser<CSCDOneReq> _parser = new pb::MessageParser<CSCDOneReq>(() => new CSCDOneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCDOneReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSCDOneNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSCDOneNotify> _parser = new pb::MessageParser<CSCDOneNotify>(() => new CSCDOneNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCDOneNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Datap.CDModule module_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.CDModule Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "update_tick" field.</summary>
    public const int UpdateTickFieldNumber = 2;
    private long updateTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UpdateTick {
      get { return updateTick_; }
      set {
        updateTick_ = value;
      }
    }

    /// <summary>Field number for the "cd_dura" field.</summary>
    public const int CdDuraFieldNumber = 3;
    private int cdDura_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CdDura {
      get { return cdDura_; }
      set {
        cdDura_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Module != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Module);
      }
      if (UpdateTick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UpdateTick);
      }
      if (CdDura != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CdDura);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Module != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Module);
      }
      if (UpdateTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTick);
      }
      if (CdDura != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CdDura);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            module_ = (global::Datap.CDModule) input.ReadEnum();
            break;
          }
          case 16: {
            UpdateTick = input.ReadInt64();
            break;
          }
          case 24: {
            CdDura = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSystemSyncNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSSystemSyncNotify> _parser = new pb::MessageParser<CSSystemSyncNotify>(() => new CSSystemSyncNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSystemSyncNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "changed_list" field.</summary>
    public const int ChangedListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSSystem> _repeated_changedList_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Csp.CSSystem) x);
    private readonly pbc::RepeatedField<global::Csp.CSSystem> changedList_ = new pbc::RepeatedField<global::Csp.CSSystem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSSystem> ChangedList {
      get { return changedList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changedList_.WriteTo(output, _repeated_changedList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changedList_.CalculateSize(_repeated_changedList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            changedList_.AddEntriesFrom(input, _repeated_changedList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSDailyRefreshReq : pb::IMessage {
    private static readonly pb::MessageParser<CSDailyRefreshReq> _parser = new pb::MessageParser<CSDailyRefreshReq>(() => new CSDailyRefreshReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDailyRefreshReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSGetPowerReq : pb::IMessage {
    private static readonly pb::MessageParser<CSGetPowerReq> _parser = new pb::MessageParser<CSGetPowerReq>(() => new CSGetPowerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetPowerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSGetPowerResp : pb::IMessage {
    private static readonly pb::MessageParser<CSGetPowerResp> _parser = new pb::MessageParser<CSGetPowerResp>(() => new CSGetPowerResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSGetPowerResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private global::Datap.RolePower power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RolePower Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (power_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (power_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (power_ == null) {
              power_ = new global::Datap.RolePower();
            }
            input.ReadMessage(power_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeadActiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadActiveReq> _parser = new pb::MessageParser<CSHeadActiveReq>(() => new CSHeadActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadActiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 1;
    private int headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSHeadActiveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSHeadActiveResp> _parser = new pb::MessageParser<CSHeadActiveResp>(() => new CSHeadActiveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSHeadActiveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "head_id" field.</summary>
    public const int HeadIdFieldNumber = 1;
    private int headId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadId {
      get { return headId_; }
      set {
        headId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeadId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeadId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeadId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeadId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSFrameActiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameActiveReq> _parser = new pb::MessageParser<CSFrameActiveReq>(() => new CSFrameActiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameActiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSFrameActiveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSFrameActiveResp> _parser = new pb::MessageParser<CSFrameActiveResp>(() => new CSFrameActiveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameActiveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "frame_id" field.</summary>
    public const int FrameIdFieldNumber = 1;
    private int frameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrameId {
      get { return frameId_; }
      set {
        frameId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FrameId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
