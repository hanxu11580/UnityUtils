// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dshangup.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum HangupMisc {
    None = 0,
    KMaxAwardNum = 50,
    /// <summary>
    /// 挂机随机掉落波动下限
    /// </summary>
    KRatioMin = 80,
    /// <summary>
    /// 挂机随机掉落波动上限
    /// </summary>
    KRatioMax = 120,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RoleHangUpData : pb::IMessage {
    private static readonly pb::MessageParser<RoleHangUpData> _parser = new pb::MessageParser<RoleHangUpData>(() => new RoleHangUpData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleHangUpData> Parser { get { return _parser; } }

    /// <summary>Field number for the "is_unlock" field.</summary>
    public const int IsUnlockFieldNumber = 1;
    private bool isUnlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlock {
      get { return isUnlock_; }
      set {
        isUnlock_ = value;
      }
    }

    /// <summary>Field number for the "last_start_time" field.</summary>
    public const int LastStartTimeFieldNumber = 2;
    private long lastStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastStartTime {
      get { return lastStartTime_; }
      set {
        lastStartTime_ = value;
      }
    }

    /// <summary>Field number for the "last_harvest_time" field.</summary>
    public const int LastHarvestTimeFieldNumber = 3;
    private long lastHarvestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastHarvestTime {
      get { return lastHarvestTime_; }
      set {
        lastHarvestTime_ = value;
      }
    }

    /// <summary>Field number for the "harvest_count" field.</summary>
    public const int HarvestCountFieldNumber = 4;
    private int harvestCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HarvestCount {
      get { return harvestCount_; }
      set {
        harvestCount_ = value;
      }
    }

    /// <summary>Field number for the "max_prop_tickets" field.</summary>
    public const int MaxPropTicketsFieldNumber = 7;
    private int maxPropTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPropTickets {
      get { return maxPropTickets_; }
      set {
        maxPropTickets_ = value;
      }
    }

    /// <summary>Field number for the "hang_up_buffs" field.</summary>
    public const int HangUpBuffsFieldNumber = 9;
    private static readonly pbc::MapField<int, int>.Codec _map_hangUpBuffs_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 74);
    private readonly pbc::MapField<int, int> hangUpBuffs_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> HangUpBuffs {
      get { return hangUpBuffs_; }
    }

    /// <summary>Field number for the "last_settle_time" field.</summary>
    public const int LastSettleTimeFieldNumber = 10;
    private long lastSettleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSettleTime {
      get { return lastSettleTime_; }
      set {
        lastSettleTime_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(90, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> awards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsUnlock != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsUnlock);
      }
      if (LastStartTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastStartTime);
      }
      if (LastHarvestTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastHarvestTime);
      }
      if (HarvestCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HarvestCount);
      }
      if (MaxPropTickets != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPropTickets);
      }
      hangUpBuffs_.WriteTo(output, _map_hangUpBuffs_codec);
      if (LastSettleTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastSettleTime);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsUnlock != false) {
        size += 1 + 1;
      }
      if (LastStartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastStartTime);
      }
      if (LastHarvestTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastHarvestTime);
      }
      if (HarvestCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HarvestCount);
      }
      if (MaxPropTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPropTickets);
      }
      size += hangUpBuffs_.CalculateSize(_map_hangUpBuffs_codec);
      if (LastSettleTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSettleTime);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsUnlock = input.ReadBool();
            break;
          }
          case 16: {
            LastStartTime = input.ReadInt64();
            break;
          }
          case 24: {
            LastHarvestTime = input.ReadInt64();
            break;
          }
          case 32: {
            HarvestCount = input.ReadInt32();
            break;
          }
          case 56: {
            MaxPropTickets = input.ReadInt32();
            break;
          }
          case 74: {
            hangUpBuffs_.AddEntriesFrom(input, _map_hangUpBuffs_codec);
            break;
          }
          case 80: {
            LastSettleTime = input.ReadInt64();
            break;
          }
          case 90: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
