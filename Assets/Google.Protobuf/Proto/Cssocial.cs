// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cssocial.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSSocialFriendMiscStatus {
    KCssocialFriendMiscStatusNone = 0,
    /// <summary>
    /// 送出礼物
    /// </summary>
    KCssocialFriendMiscStatusSend = 1,
    /// <summary>
    /// 接收礼物
    /// </summary>
    KCssocialFriendMiscStatusRecv = 2,
    KCssocialFriendMiscStatusMax = 3,
  }

  public enum CSSocialGiftStatus {
    KCssocialGiftStatusNone = 0,
    /// <summary>
    /// 送出
    /// </summary>
    KCssocialGiftStatusSend = 1,
    /// <summary>
    /// 可领取
    /// </summary>
    KCssocialGiftStatusCanReceive = 2,
    /// <summary>
    /// 已领取
    /// </summary>
    KCssocialGiftStatusReceived = 3,
    KCssocialGiftStatusMax = 4,
  }

  public enum CSSocialApplyOpt {
    KCssocialApplyOptNone = 0,
    /// <summary>
    /// 同意
    /// </summary>
    KCssocialApplyOptAgree = 1,
    /// <summary>
    /// 拒绝
    /// </summary>
    KCssocialApplyOptReject = 2,
    KCssocialApplyOptMax = 3,
  }

  public enum CSSocialBlockOpt {
    KCssocialBlockOptNone = 0,
    /// <summary>
    /// 添加
    /// </summary>
    KCssocialBlockOptAdd = 1,
    /// <summary>
    /// 删除
    /// </summary>
    KCssocialBlockOptDec = 2,
    KCssocialBlockOptMax = 3,
  }

  public enum CSSocialInformReason {
    KCssocialInformReasonNone = 0,
    /// <summary>
    /// 不当言论
    /// </summary>
    KCssocialInformReasonSpeech = 1,
    /// <summary>
    /// 不雅昵称
    /// </summary>
    KCssocialInformReasonName = 2,
    /// <summary>
    /// 开挂作弊
    /// </summary>
    KCssocialInformReasonCheat = 3,
    /// <summary>
    /// 其他
    /// </summary>
    KCssocialInformReasonElse = 10,
    KCssocialInformReasonMax = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSSocialFriend : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialFriend> _parser = new pb::MessageParser<CSSocialFriend>(() => new CSSocialFriend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialFriend> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "misc_status" field.</summary>
    public const int MiscStatusFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Csp.CSSocialGiftStatus> _repeated_miscStatus_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Csp.CSSocialGiftStatus) x);
    private readonly pbc::RepeatedField<global::Csp.CSSocialGiftStatus> miscStatus_ = new pbc::RepeatedField<global::Csp.CSSocialGiftStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSSocialGiftStatus> MiscStatus {
      get { return miscStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      miscStatus_.WriteTo(output, _repeated_miscStatus_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      size += miscStatus_.CalculateSize(_repeated_miscStatus_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            miscStatus_.AddEntriesFrom(input, _repeated_miscStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSSocialListReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialListReq> _parser = new pb::MessageParser<CSSocialListReq>(() => new CSSocialListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialListNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialListNotify> _parser = new pb::MessageParser<CSSocialListNotify>(() => new CSSocialListNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialListNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Csp.CSSocialFriend> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Csp.CSSocialFriend.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSSocialFriend> list_ = new pbc::RepeatedField<global::Csp.CSSocialFriend>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSSocialFriend> List {
      get { return list_; }
    }

    /// <summary>Field number for the "gift_send_count" field.</summary>
    public const int GiftSendCountFieldNumber = 2;
    private int giftSendCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftSendCount {
      get { return giftSendCount_; }
      set {
        giftSendCount_ = value;
      }
    }

    /// <summary>Field number for the "gift_recv_count" field.</summary>
    public const int GiftRecvCountFieldNumber = 3;
    private int giftRecvCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GiftRecvCount {
      get { return giftRecvCount_; }
      set {
        giftRecvCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (GiftSendCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GiftSendCount);
      }
      if (GiftRecvCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GiftRecvCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (GiftSendCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftSendCount);
      }
      if (GiftRecvCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftRecvCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            GiftSendCount = input.ReadInt32();
            break;
          }
          case 24: {
            GiftRecvCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyReq> _parser = new pb::MessageParser<CSSocialApplyReq>(() => new CSSocialApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyResp> _parser = new pb::MessageParser<CSSocialApplyResp>(() => new CSSocialApplyResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialBatchApplyReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialBatchApplyReq> _parser = new pb::MessageParser<CSSocialBatchApplyReq>(() => new CSSocialBatchApplyReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialBatchApplyReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_uid_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> uid_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialBatchApplyResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialBatchApplyResp> _parser = new pb::MessageParser<CSSocialBatchApplyResp>(() => new CSSocialBatchApplyResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialBatchApplyResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_fail_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> fail_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Fail {
      get { return fail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
      fail_.WriteTo(output, _repeated_fail_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      size += fail_.CalculateSize(_repeated_fail_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
          case 18:
          case 16: {
            fail_.AddEntriesFrom(input, _repeated_fail_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialRemoveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialRemoveReq> _parser = new pb::MessageParser<CSSocialRemoveReq>(() => new CSSocialRemoveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialRemoveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialRemoveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialRemoveResp> _parser = new pb::MessageParser<CSSocialRemoveResp>(() => new CSSocialRemoveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialRemoveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyListReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyListReq> _parser = new pb::MessageParser<CSSocialApplyListReq>(() => new CSSocialApplyListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialApplyListNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyListNotify> _parser = new pb::MessageParser<CSSocialApplyListNotify>(() => new CSSocialApplyListNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyListNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_list_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> list_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyDealReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyDealReq> _parser = new pb::MessageParser<CSSocialApplyDealReq>(() => new CSSocialApplyDealReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyDealReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 1;
    private global::Csp.CSSocialApplyOpt opt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSSocialApplyOpt Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Opt);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opt);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            opt_ = (global::Csp.CSSocialApplyOpt) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyDealAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyDealAllReq> _parser = new pb::MessageParser<CSSocialApplyDealAllReq>(() => new CSSocialApplyDealAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyDealAllReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 1;
    private global::Csp.CSSocialApplyOpt opt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSSocialApplyOpt Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Opt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            opt_ = (global::Csp.CSSocialApplyOpt) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialApplyDealAllResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialApplyDealAllResp> _parser = new pb::MessageParser<CSSocialApplyDealAllResp>(() => new CSSocialApplyDealAllResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialApplyDealAllResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    /// <summary>Field number for the "fail" field.</summary>
    public const int FailFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_fail_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> fail_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Fail {
      get { return fail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
      fail_.WriteTo(output, _repeated_fail_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      size += fail_.CalculateSize(_repeated_fail_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
          case 18:
          case 16: {
            fail_.AddEntriesFrom(input, _repeated_fail_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialBlackListReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialBlackListReq> _parser = new pb::MessageParser<CSSocialBlackListReq>(() => new CSSocialBlackListReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialBlackListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialBlackListNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialBlackListNotify> _parser = new pb::MessageParser<CSSocialBlackListNotify>(() => new CSSocialBlackListNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialBlackListNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_list_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> list_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialBlockOneReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialBlockOneReq> _parser = new pb::MessageParser<CSSocialBlockOneReq>(() => new CSSocialBlockOneReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialBlockOneReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "opt" field.</summary>
    public const int OptFieldNumber = 1;
    private global::Csp.CSSocialBlockOpt opt_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSSocialBlockOpt Opt {
      get { return opt_; }
      set {
        opt_ = value;
      }
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Opt != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Opt);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Opt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Opt);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            opt_ = (global::Csp.CSSocialBlockOpt) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftReceiveReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftReceiveReq> _parser = new pb::MessageParser<CSSocialGiftReceiveReq>(() => new CSSocialGiftReceiveReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftReceiveReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_uid_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> uid_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftReceiveResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftReceiveResp> _parser = new pb::MessageParser<CSSocialGiftReceiveResp>(() => new CSSocialGiftReceiveResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftReceiveResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftSendReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftSendReq> _parser = new pb::MessageParser<CSSocialGiftSendReq>(() => new CSSocialGiftSendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftSendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_uid_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> uid_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Uid {
      get { return uid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uid_.WriteTo(output, _repeated_uid_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uid_.CalculateSize(_repeated_uid_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uid_.AddEntriesFrom(input, _repeated_uid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftSendResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftSendResp> _parser = new pb::MessageParser<CSSocialGiftSendResp>(() => new CSSocialGiftSendResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftSendResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftReceiveAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftReceiveAllReq> _parser = new pb::MessageParser<CSSocialGiftReceiveAllReq>(() => new CSSocialGiftReceiveAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftReceiveAllReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialGiftReceiveAllResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftReceiveAllResp> _parser = new pb::MessageParser<CSSocialGiftReceiveAllResp>(() => new CSSocialGiftReceiveAllResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftReceiveAllResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftSendAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftSendAllReq> _parser = new pb::MessageParser<CSSocialGiftSendAllReq>(() => new CSSocialGiftSendAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftSendAllReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialGiftSendAllResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftSendAllResp> _parser = new pb::MessageParser<CSSocialGiftSendAllResp>(() => new CSSocialGiftSendAllResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftSendAllResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "succ" field.</summary>
    public const int SuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_succ_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> succ_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Succ {
      get { return succ_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      succ_.WriteTo(output, _repeated_succ_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += succ_.CalculateSize(_repeated_succ_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            succ_.AddEntriesFrom(input, _repeated_succ_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftBatchRecvAndSendReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftBatchRecvAndSendReq> _parser = new pb::MessageParser<CSSocialGiftBatchRecvAndSendReq>(() => new CSSocialGiftBatchRecvAndSendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftBatchRecvAndSendReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "recv" field.</summary>
    public const int RecvFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_recv_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> recv_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Recv {
      get { return recv_; }
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_send_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> send_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Send {
      get { return send_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recv_.WriteTo(output, _repeated_recv_codec);
      send_.WriteTo(output, _repeated_send_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recv_.CalculateSize(_repeated_recv_codec);
      size += send_.CalculateSize(_repeated_send_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            recv_.AddEntriesFrom(input, _repeated_recv_codec);
            break;
          }
          case 18:
          case 16: {
            send_.AddEntriesFrom(input, _repeated_send_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftBatchRecvAndSendResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftBatchRecvAndSendResp> _parser = new pb::MessageParser<CSSocialGiftBatchRecvAndSendResp>(() => new CSSocialGiftBatchRecvAndSendResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftBatchRecvAndSendResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "recv_succ" field.</summary>
    public const int RecvSuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_recvSucc_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> recvSucc_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RecvSucc {
      get { return recvSucc_; }
    }

    /// <summary>Field number for the "send_succ" field.</summary>
    public const int SendSuccFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_sendSucc_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> sendSucc_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> SendSucc {
      get { return sendSucc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recvSucc_.WriteTo(output, _repeated_recvSucc_codec);
      sendSucc_.WriteTo(output, _repeated_sendSucc_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recvSucc_.CalculateSize(_repeated_recvSucc_codec);
      size += sendSucc_.CalculateSize(_repeated_sendSucc_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            recvSucc_.AddEntriesFrom(input, _repeated_recvSucc_codec);
            break;
          }
          case 18:
          case 16: {
            sendSucc_.AddEntriesFrom(input, _repeated_sendSucc_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialGiftRecvAndSendAllReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftRecvAndSendAllReq> _parser = new pb::MessageParser<CSSocialGiftRecvAndSendAllReq>(() => new CSSocialGiftRecvAndSendAllReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftRecvAndSendAllReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSSocialGiftRecvAndSendAllResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialGiftRecvAndSendAllResp> _parser = new pb::MessageParser<CSSocialGiftRecvAndSendAllResp>(() => new CSSocialGiftRecvAndSendAllResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialGiftRecvAndSendAllResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "recv_succ" field.</summary>
    public const int RecvSuccFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_recvSucc_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> recvSucc_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> RecvSucc {
      get { return recvSucc_; }
    }

    /// <summary>Field number for the "send_succ" field.</summary>
    public const int SendSuccFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_sendSucc_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> sendSucc_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> SendSucc {
      get { return sendSucc_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recvSucc_.WriteTo(output, _repeated_recvSucc_codec);
      sendSucc_.WriteTo(output, _repeated_sendSucc_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recvSucc_.CalculateSize(_repeated_recvSucc_codec);
      size += sendSucc_.CalculateSize(_repeated_sendSucc_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            recvSucc_.AddEntriesFrom(input, _repeated_recvSucc_codec);
            break;
          }
          case 18:
          case 16: {
            sendSucc_.AddEntriesFrom(input, _repeated_sendSucc_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialInformReq : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialInformReq> _parser = new pb::MessageParser<CSSocialInformReq>(() => new CSSocialInformReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialInformReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private int target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::Csp.CSSocialInformReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSSocialInformReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "remark" field.</summary>
    public const int RemarkFieldNumber = 3;
    private string remark_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remark {
      get { return remark_; }
      set {
        remark_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Target != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Target);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
      if (Remark.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Remark);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (Remark.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remark);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Target = input.ReadInt32();
            break;
          }
          case 16: {
            reason_ = (global::Csp.CSSocialInformReason) input.ReadEnum();
            break;
          }
          case 26: {
            Remark = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSSocialInformResp : pb::IMessage {
    private static readonly pb::MessageParser<CSSocialInformResp> _parser = new pb::MessageParser<CSSocialInformResp>(() => new CSSocialInformResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSocialInformResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
