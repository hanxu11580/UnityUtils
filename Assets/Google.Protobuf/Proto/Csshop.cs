// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csshop.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSExchangeShopRefreshReqReq : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeShopRefreshReqReq> _parser = new pb::MessageParser<CSExchangeShopRefreshReqReq>(() => new CSExchangeShopRefreshReqReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShopRefreshReqReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop_id" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeShopRefreshReqResp : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeShopRefreshReqResp> _parser = new pb::MessageParser<CSExchangeShopRefreshReqResp>(() => new CSExchangeShopRefreshReqResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShopRefreshReqResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 1;
    private global::Datap.ExchangeShop shop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.ExchangeShop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shop_ == null) {
              shop_ = new global::Datap.ExchangeShop();
            }
            input.ReadMessage(shop_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeShopRefreshReqNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeShopRefreshReqNotify> _parser = new pb::MessageParser<CSExchangeShopRefreshReqNotify>(() => new CSExchangeShopRefreshReqNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShopRefreshReqNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 1;
    private global::Datap.ExchangeShop shop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.ExchangeShop Shop {
      get { return shop_; }
      set {
        shop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (shop_ == null) {
              shop_ = new global::Datap.ExchangeShop();
            }
            input.ReadMessage(shop_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeShopBuyReqReq : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeShopBuyReqReq> _parser = new pb::MessageParser<CSExchangeShopBuyReqReq>(() => new CSExchangeShopBuyReqReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShopBuyReqReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop_id" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "goods_id" field.</summary>
    public const int GoodsIdFieldNumber = 2;
    private int goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "buy_num" field.</summary>
    public const int BuyNumFieldNumber = 3;
    private int buyNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyNum {
      get { return buyNum_; }
      set {
        buyNum_ = value;
      }
    }

    /// <summary>Field number for the "use_ad" field.</summary>
    public const int UseAdFieldNumber = 4;
    private int useAd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UseAd {
      get { return useAd_; }
      set {
        useAd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsId);
      }
      if (BuyNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyNum);
      }
      if (UseAd != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UseAd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (BuyNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyNum);
      }
      if (UseAd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseAd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyNum = input.ReadInt32();
            break;
          }
          case 32: {
            UseAd = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExchangeShopBuyReqResp : pb::IMessage {
    private static readonly pb::MessageParser<CSExchangeShopBuyReqResp> _parser = new pb::MessageParser<CSExchangeShopBuyReqResp>(() => new CSExchangeShopBuyReqResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExchangeShopBuyReqResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop_id" field.</summary>
    public const int ShopIdFieldNumber = 1;
    private int shopId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "goods_id" field.</summary>
    public const int GoodsIdFieldNumber = 2;
    private int goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "buy_cnt" field.</summary>
    public const int BuyCntFieldNumber = 3;
    private int buyCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCnt {
      get { return buyCnt_; }
      set {
        buyCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShopId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShopId);
      }
      if (GoodsId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GoodsId);
      }
      if (BuyCnt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopId);
      }
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (BuyCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShopId = input.ReadInt32();
            break;
          }
          case 16: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 24: {
            BuyCnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
