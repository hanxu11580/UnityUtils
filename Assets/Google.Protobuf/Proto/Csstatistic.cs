// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csstatistic.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSStatAllDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CSStatAllDataReq> _parser = new pb::MessageParser<CSStatAllDataReq>(() => new CSStatAllDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatAllDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSStatAllDataResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStatAllDataResp> _parser = new pb::MessageParser<CSStatAllDataResp>(() => new CSStatAllDataResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatAllDataResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "stat_data" field.</summary>
    public const int StatDataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec _map_statData_codec
        = new pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleStatPeriod.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.RoleStatPeriod> statData_ = new pbc::MapField<int, global::Datap.RoleStatPeriod>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleStatPeriod> StatData {
      get { return statData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statData_.WriteTo(output, _map_statData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statData_.CalculateSize(_map_statData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            statData_.AddEntriesFrom(input, _map_statData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSStatSingleDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CSStatSingleDataReq> _parser = new pb::MessageParser<CSStatSingleDataReq>(() => new CSStatSingleDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatSingleDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "stat_period" field.</summary>
    public const int StatPeriodFieldNumber = 1;
    private int statPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatPeriod {
      get { return statPeriod_; }
      set {
        statPeriod_ = value;
      }
    }

    /// <summary>Field number for the "stat_module" field.</summary>
    public const int StatModuleFieldNumber = 2;
    private global::Datap.StatModel statModule_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.StatModel StatModule {
      get { return statModule_; }
      set {
        statModule_ = value;
      }
    }

    /// <summary>Field number for the "stat_list" field.</summary>
    public const int StatListFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_statList_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> statList_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StatList {
      get { return statList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatPeriod != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatPeriod);
      }
      if (StatModule != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) StatModule);
      }
      statList_.WriteTo(output, _repeated_statList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatPeriod);
      }
      if (StatModule != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatModule);
      }
      size += statList_.CalculateSize(_repeated_statList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StatPeriod = input.ReadInt32();
            break;
          }
          case 16: {
            statModule_ = (global::Datap.StatModel) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            statList_.AddEntriesFrom(input, _repeated_statList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSStatSingleDataResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStatSingleDataResp> _parser = new pb::MessageParser<CSStatSingleDataResp>(() => new CSStatSingleDataResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatSingleDataResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSStatSingleDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSStatSingleDataNotify> _parser = new pb::MessageParser<CSStatSingleDataNotify>(() => new CSStatSingleDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatSingleDataNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "stat_data" field.</summary>
    public const int StatDataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec _map_statData_codec
        = new pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleStatPeriod.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.RoleStatPeriod> statData_ = new pbc::MapField<int, global::Datap.RoleStatPeriod>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleStatPeriod> StatData {
      get { return statData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statData_.WriteTo(output, _map_statData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statData_.CalculateSize(_map_statData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            statData_.AddEntriesFrom(input, _map_statData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSStatSyncNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSStatSyncNotify> _parser = new pb::MessageParser<CSStatSyncNotify>(() => new CSStatSyncNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStatSyncNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "daily_reset" field.</summary>
    public const int DailyResetFieldNumber = 1;
    private long dailyReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DailyReset {
      get { return dailyReset_; }
      set {
        dailyReset_ = value;
      }
    }

    /// <summary>Field number for the "weekly_reset" field.</summary>
    public const int WeeklyResetFieldNumber = 2;
    private long weeklyReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WeeklyReset {
      get { return weeklyReset_; }
      set {
        weeklyReset_ = value;
      }
    }

    /// <summary>Field number for the "monthly_reset" field.</summary>
    public const int MonthlyResetFieldNumber = 3;
    private long monthlyReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MonthlyReset {
      get { return monthlyReset_; }
      set {
        monthlyReset_ = value;
      }
    }

    /// <summary>Field number for the "tasks" field.</summary>
    public const int TasksFieldNumber = 4;
    private static readonly pbc::MapField<int, int>.Codec _map_tasks_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 34);
    private readonly pbc::MapField<int, int> tasks_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Tasks {
      get { return tasks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DailyReset != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DailyReset);
      }
      if (WeeklyReset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(WeeklyReset);
      }
      if (MonthlyReset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MonthlyReset);
      }
      tasks_.WriteTo(output, _map_tasks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DailyReset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DailyReset);
      }
      if (WeeklyReset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WeeklyReset);
      }
      if (MonthlyReset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MonthlyReset);
      }
      size += tasks_.CalculateSize(_map_tasks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DailyReset = input.ReadInt64();
            break;
          }
          case 16: {
            WeeklyReset = input.ReadInt64();
            break;
          }
          case 24: {
            MonthlyReset = input.ReadInt64();
            break;
          }
          case 34: {
            tasks_.AddEntriesFrom(input, _map_tasks_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
