// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsrank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum RankMisc {
    KRankMiscNone = 0,
    KRankMiscMaxRankItemNum = 300,
    KRankMiscCommonRankItemNum = 100,
    KRankMiscCommonPageRankItemNum = 50,
    KRankMiscRecordNumMax = 100,
    KRankMiscRecordRoleNumMax = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RankEquip : pb::IMessage {
    private static readonly pb::MessageParser<RankEquip> _parser = new pb::MessageParser<RankEquip>(() => new RankEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankEquip> Parser { get { return _parser; } }

    /// <summary>Field number for the "equip_addr" field.</summary>
    public const int EquipAddrFieldNumber = 1;
    private global::Datap.EquipmentDetailAttr equipAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.EquipmentDetailAttr EquipAddr {
      get { return equipAddr_; }
      set {
        equipAddr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (equipAddr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EquipAddr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (equipAddr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipAddr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (equipAddr_ == null) {
              equipAddr_ = new global::Datap.EquipmentDetailAttr();
            }
            input.ReadMessage(equipAddr_);
            break;
          }
        }
      }
    }

  }

  public sealed class RankOtherInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankOtherInfo> _parser = new pb::MessageParser<RankOtherInfo>(() => new RankOtherInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankOtherInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 1;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 2;
    private global::Datap.RankEquip equip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RankEquip Equip {
      get { return equip_; }
      set {
        equip_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tick != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Tick);
      }
      if (equip_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Equip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      if (equip_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tick = input.ReadInt64();
            break;
          }
          case 18: {
            if (equip_ == null) {
              equip_ = new global::Datap.RankEquip();
            }
            input.ReadMessage(equip_);
            break;
          }
        }
      }
    }

  }

  public sealed class RankDataItem : pb::IMessage {
    private static readonly pb::MessageParser<RankDataItem> _parser = new pb::MessageParser<RankDataItem>(() => new RankDataItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankDataItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "ranking" field.</summary>
    public const int RankingFieldNumber = 3;
    private int ranking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ranking {
      get { return ranking_; }
      set {
        ranking_ = value;
      }
    }

    /// <summary>Field number for the "other" field.</summary>
    public const int OtherFieldNumber = 4;
    private global::Datap.RankOtherInfo other_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RankOtherInfo Other {
      get { return other_; }
      set {
        other_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Ranking != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Ranking);
      }
      if (other_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Other);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Ranking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ranking);
      }
      if (other_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Ranking = input.ReadInt32();
            break;
          }
          case 34: {
            if (other_ == null) {
              other_ = new global::Datap.RankOtherInfo();
            }
            input.ReadMessage(other_);
            break;
          }
        }
      }
    }

  }

  public sealed class RankData : pb::IMessage {
    private static readonly pb::MessageParser<RankData> _parser = new pb::MessageParser<RankData>(() => new RankData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 2;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "rank_item" field.</summary>
    public const int RankItemFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.RankDataItem> _repeated_rankItem_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.RankDataItem.Parser);
    private readonly pbc::RepeatedField<global::Datap.RankDataItem> rankItem_ = new pbc::RepeatedField<global::Datap.RankDataItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RankDataItem> RankItem {
      get { return rankItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subtype);
      }
      rankItem_.WriteTo(output, _repeated_rankItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      size += rankItem_.CalculateSize(_repeated_rankItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Subtype = input.ReadInt32();
            break;
          }
          case 26: {
            rankItem_.AddEntriesFrom(input, _repeated_rankItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RankRecordInfo : pb::IMessage {
    private static readonly pb::MessageParser<RankRecordInfo> _parser = new pb::MessageParser<RankRecordInfo>(() => new RankRecordInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRecordInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 3;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Tick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tick);
      }
      if (Idx != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Idx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Tick = input.ReadInt64();
            break;
          }
          case 24: {
            Idx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RankRecordItem : pb::IMessage {
    private static readonly pb::MessageParser<RankRecordItem> _parser = new pb::MessageParser<RankRecordItem>(() => new RankRecordItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRecordItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.RankRecordInfo> _repeated_info_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.RankRecordInfo.Parser);
    private readonly pbc::RepeatedField<global::Datap.RankRecordInfo> info_ = new pbc::RepeatedField<global::Datap.RankRecordInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RankRecordInfo> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      info_.WriteTo(output, _repeated_info_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RankRecord : pb::IMessage {
    private static readonly pb::MessageParser<RankRecord> _parser = new pb::MessageParser<RankRecord>(() => new RankRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankRecord> Parser { get { return _parser; } }

    /// <summary>Field number for the "record_item" field.</summary>
    public const int RecordItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.RankRecordItem> _repeated_recordItem_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.RankRecordItem.Parser);
    private readonly pbc::RepeatedField<global::Datap.RankRecordItem> recordItem_ = new pbc::RepeatedField<global::Datap.RankRecordItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RankRecordItem> RecordItem {
      get { return recordItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordItem_.WriteTo(output, _repeated_recordItem_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordItem_.CalculateSize(_repeated_recordItem_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            recordItem_.AddEntriesFrom(input, _repeated_recordItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleRank : pb::IMessage {
    private static readonly pb::MessageParser<RoleRank> _parser = new pb::MessageParser<RoleRank>(() => new RoleRank());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleRank> Parser { get { return _parser; } }

    /// <summary>Field number for the "record_id" field.</summary>
    public const int RecordIdFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_recordId_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> recordId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RecordId {
      get { return recordId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recordId_.WriteTo(output, _repeated_recordId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recordId_.CalculateSize(_repeated_recordId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            recordId_.AddEntriesFrom(input, _repeated_recordId_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
