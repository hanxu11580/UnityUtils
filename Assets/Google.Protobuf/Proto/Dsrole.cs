// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsrole.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum RoleMisc {
    KRoleMiscNone = 0,
    KMaxRoleGuideByteLen = 4,
    KMaxArrIntCommon = 100,
    KMaxGuideDone = 100,
    KMaxAwardsCommon = 20,
    /// <summary>
    /// 玩家昵称不能超过7个utf8字符
    /// </summary>
    KMaxRoleNameLength = 7,
    /// <summary>
    /// 通码存储长度
    /// </summary>
    KMaxGiftcodeCommonLength = 50,
    /// <summary>
    /// 机码码存储长度
    /// </summary>
    KMaxGiftcodeUniqueLength = 50,
    /// <summary>
    /// 需要存储变更的任务索引
    /// </summary>
    KMaxRoleTaskModules = 10,
    KMaxRoleOnceMsgNum = 100,
  }

  public enum RoleAttrType32 {
    /// <summary>
    /// 未定义
    /// </summary>
    KRoleAttrType32None = 0,
    /// <summary>
    /// 角色经验
    /// </summary>
    KRoleAttrExp = 1,
    /// <summary>
    /// 角色等级
    /// </summary>
    KRoleAttrLevel = 2,
    /// <summary>
    /// 进化等级
    /// </summary>
    KRoleAttrEvolutionLevel = 3,
    /// <summary>
    /// equal
    /// </summary>
    KMaxRoleAttrType32 = 20,
  }

  public enum CDModule {
    KCdmoduleNone = 0,
    /// <summary>
    /// 好友推荐模块
    /// </summary>
    KCdmoduleSocialRecommend = 1,
    /// <summary>
    /// 好友列表模块
    /// </summary>
    KCdmoduleSocialBuddyList = 2,
    /// <summary>
    /// 好友申请模块
    /// </summary>
    KCdmoduleSocialApplyList = 3,
    /// <summary>
    /// 黑名单模块
    /// </summary>
    KCdmoduleSocialBlackList = 4,
    /// <summary>
    /// 好友搜索
    /// </summary>
    KCdmoduleSocialSearch = 5,
    KCdmoduleMax = 6,
  }

  public enum RoleDataFixModule {
    KRoleDataFixModuleNone = 0,
    /// <summary>
    /// 熟练度模块
    /// </summary>
    KRoleDataFixModuleRegion = 1,
    KRoleDataFixModuleMax = 100,
  }

  public enum RoleDataFixVersion {
    KRoleDataFixVersionNone = 0,
    /// <summary>
    /// 当前熟练度修复版本号为1
    /// </summary>
    KRoleDataFixVersionRegion = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RoleAttrUnit32 : pb::IMessage {
    private static readonly pb::MessageParser<RoleAttrUnit32> _parser = new pb::MessageParser<RoleAttrUnit32>(() => new RoleAttrUnit32());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttrUnit32> Parser { get { return _parser; } }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ArrInt : pb::IMessage {
    private static readonly pb::MessageParser<ArrInt> _parser = new pb::MessageParser<ArrInt>(() => new ArrInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArrInt> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_data_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBriefInfoBase : pb::IMessage {
    private static readonly pb::MessageParser<RoleBriefInfoBase> _parser = new pb::MessageParser<RoleBriefInfoBase>(() => new RoleBriefInfoBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBriefInfoBase> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBriefInfoGame : pb::IMessage {
    private static readonly pb::MessageParser<RoleBriefInfoGame> _parser = new pb::MessageParser<RoleBriefInfoGame>(() => new RoleBriefInfoGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBriefInfoGame> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "stage_max_pass_chapter" field.</summary>
    public const int StageMaxPassChapterFieldNumber = 3;
    private int stageMaxPassChapter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StageMaxPassChapter {
      get { return stageMaxPassChapter_; }
      set {
        stageMaxPassChapter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (StageMaxPassChapter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StageMaxPassChapter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (StageMaxPassChapter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StageMaxPassChapter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            StageMaxPassChapter = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBriefInfoConn : pb::IMessage {
    private static readonly pb::MessageParser<RoleBriefInfoConn> _parser = new pb::MessageParser<RoleBriefInfoConn>(() => new RoleBriefInfoConn());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBriefInfoConn> Parser { get { return _parser; } }

    /// <summary>Field number for the "login_tick" field.</summary>
    public const int LoginTickFieldNumber = 1;
    private uint loginTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LoginTick {
      get { return loginTick_; }
      set {
        loginTick_ = value;
      }
    }

    /// <summary>Field number for the "logout_tick" field.</summary>
    public const int LogoutTickFieldNumber = 2;
    private uint logoutTick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LogoutTick {
      get { return logoutTick_; }
      set {
        logoutTick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginTick != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LoginTick);
      }
      if (LogoutTick != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LogoutTick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LoginTick);
      }
      if (LogoutTick != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LogoutTick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LoginTick = input.ReadUInt32();
            break;
          }
          case 16: {
            LogoutTick = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RolePower : pb::IMessage {
    private static readonly pb::MessageParser<RolePower> _parser = new pb::MessageParser<RolePower>(() => new RolePower());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RolePower> Parser { get { return _parser; } }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private int power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "dragon" field.</summary>
    public const int DragonFieldNumber = 2;
    private int dragon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dragon {
      get { return dragon_; }
      set {
        dragon_ = value;
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_equip_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> equip_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Equip {
      get { return equip_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Power);
      }
      if (Dragon != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dragon);
      }
      equip_.WriteTo(output, _repeated_equip_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Dragon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dragon);
      }
      size += equip_.CalculateSize(_repeated_equip_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Power = input.ReadInt32();
            break;
          }
          case 16: {
            Dragon = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            equip_.AddEntriesFrom(input, _repeated_equip_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBriefInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleBriefInfo> _parser = new pb::MessageParser<RoleBriefInfo>(() => new RoleBriefInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBriefInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 2;
    private global::Datap.RoleBriefInfoBase base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBriefInfoBase Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "game" field.</summary>
    public const int GameFieldNumber = 3;
    private global::Datap.RoleBriefInfoGame game_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBriefInfoGame Game {
      get { return game_; }
      set {
        game_ = value;
      }
    }

    /// <summary>Field number for the "conn" field.</summary>
    public const int ConnFieldNumber = 4;
    private global::Datap.RoleBriefInfoConn conn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBriefInfoConn Conn {
      get { return conn_; }
      set {
        conn_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 5;
    private global::Datap.RolePower power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RolePower Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (base_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Base);
      }
      if (game_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Game);
      }
      if (conn_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Conn);
      }
      if (power_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Power);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (game_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Game);
      }
      if (conn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conn);
      }
      if (power_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Power);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            if (base_ == null) {
              base_ = new global::Datap.RoleBriefInfoBase();
            }
            input.ReadMessage(base_);
            break;
          }
          case 26: {
            if (game_ == null) {
              game_ = new global::Datap.RoleBriefInfoGame();
            }
            input.ReadMessage(game_);
            break;
          }
          case 34: {
            if (conn_ == null) {
              conn_ = new global::Datap.RoleBriefInfoConn();
            }
            input.ReadMessage(conn_);
            break;
          }
          case 42: {
            if (power_ == null) {
              power_ = new global::Datap.RolePower();
            }
            input.ReadMessage(power_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleChatInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoleChatInfo> _parser = new pb::MessageParser<RoleChatInfo>(() => new RoleChatInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleChatInfo> Parser { get { return _parser; } }

    /// <summary>Field number for the "banned" field.</summary>
    public const int BannedFieldNumber = 1;
    private bool banned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Banned {
      get { return banned_; }
      set {
        banned_ = value;
      }
    }

    /// <summary>Field number for the "ban_start" field.</summary>
    public const int BanStartFieldNumber = 2;
    private long banStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BanStart {
      get { return banStart_; }
      set {
        banStart_ = value;
      }
    }

    /// <summary>Field number for the "ban_ended" field.</summary>
    public const int BanEndedFieldNumber = 3;
    private long banEnded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BanEnded {
      get { return banEnded_; }
      set {
        banEnded_ = value;
      }
    }

    /// <summary>Field number for the "ban_reason" field.</summary>
    public const int BanReasonFieldNumber = 4;
    private int banReason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BanReason {
      get { return banReason_; }
      set {
        banReason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Banned != false) {
        output.WriteRawTag(8);
        output.WriteBool(Banned);
      }
      if (BanStart != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BanStart);
      }
      if (BanEnded != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BanEnded);
      }
      if (BanReason != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BanReason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Banned != false) {
        size += 1 + 1;
      }
      if (BanStart != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BanStart);
      }
      if (BanEnded != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BanEnded);
      }
      if (BanReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BanReason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Banned = input.ReadBool();
            break;
          }
          case 16: {
            BanStart = input.ReadInt64();
            break;
          }
          case 24: {
            BanEnded = input.ReadInt64();
            break;
          }
          case 32: {
            BanReason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleBaseAttr : pb::IMessage {
    private static readonly pb::MessageParser<RoleBaseAttr> _parser = new pb::MessageParser<RoleBaseAttr>(() => new RoleBaseAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleBaseAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attr32" field.</summary>
    public const int Attr32FieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.RoleAttrUnit32> _repeated_attr32_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.RoleAttrUnit32.Parser);
    private readonly pbc::RepeatedField<global::Datap.RoleAttrUnit32> attr32_ = new pbc::RepeatedField<global::Datap.RoleAttrUnit32>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RoleAttrUnit32> Attr32 {
      get { return attr32_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      attr32_.WriteTo(output, _repeated_attr32_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += attr32_.CalculateSize(_repeated_attr32_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            attr32_.AddEntriesFrom(input, _repeated_attr32_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleGiftcode : pb::IMessage {
    private static readonly pb::MessageParser<RoleGiftcode> _parser = new pb::MessageParser<RoleGiftcode>(() => new RoleGiftcode());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleGiftcode> Parser { get { return _parser; } }

    /// <summary>Field number for the "code_id" field.</summary>
    public const int CodeIdFieldNumber = 1;
    private int codeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CodeId {
      get { return codeId_; }
      set {
        codeId_ = value;
      }
    }

    /// <summary>Field number for the "rcv_times" field.</summary>
    public const int RcvTimesFieldNumber = 2;
    private int rcvTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RcvTimes {
      get { return rcvTimes_; }
      set {
        rcvTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CodeId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CodeId);
      }
      if (RcvTimes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RcvTimes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CodeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CodeId);
      }
      if (RcvTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RcvTimes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CodeId = input.ReadInt32();
            break;
          }
          case 16: {
            RcvTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleStoryPerChapter : pb::IMessage {
    private static readonly pb::MessageParser<RoleStoryPerChapter> _parser = new pb::MessageParser<RoleStoryPerChapter>(() => new RoleStoryPerChapter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleStoryPerChapter> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.ArrInt>.Codec _map_data_codec
        = new pbc::MapField<int, global::Datap.ArrInt>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.ArrInt.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.ArrInt> data_ = new pbc::MapField<int, global::Datap.ArrInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.ArrInt> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _map_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_map_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleOnceMsg : pb::IMessage {
    private static readonly pb::MessageParser<RoleOnceMsg> _parser = new pb::MessageParser<RoleOnceMsg>(() => new RoleOnceMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOnceMsg> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleChannel : pb::IMessage {
    private static readonly pb::MessageParser<RoleChannel> _parser = new pb::MessageParser<RoleChannel>(() => new RoleChannel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleChannel> Parser { get { return _parser; } }

    /// <summary>Field number for the "register_channel_id" field.</summary>
    public const int RegisterChannelIdFieldNumber = 1;
    private string registerChannelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegisterChannelId {
      get { return registerChannelId_; }
      set {
        registerChannelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register_channel_name" field.</summary>
    public const int RegisterChannelNameFieldNumber = 2;
    private string registerChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegisterChannelName {
      get { return registerChannelName_; }
      set {
        registerChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "register_sub_channel_name" field.</summary>
    public const int RegisterSubChannelNameFieldNumber = 3;
    private string registerSubChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegisterSubChannelName {
      get { return registerSubChannelName_; }
      set {
        registerSubChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login_channel_id" field.</summary>
    public const int LoginChannelIdFieldNumber = 4;
    private string loginChannelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginChannelId {
      get { return loginChannelId_; }
      set {
        loginChannelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login_channel_name" field.</summary>
    public const int LoginChannelNameFieldNumber = 5;
    private string loginChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginChannelName {
      get { return loginChannelName_; }
      set {
        loginChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login_sub_channel_name" field.</summary>
    public const int LoginSubChannelNameFieldNumber = 6;
    private string loginSubChannelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginSubChannelName {
      get { return loginSubChannelName_; }
      set {
        loginSubChannelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegisterChannelId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RegisterChannelId);
      }
      if (RegisterChannelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RegisterChannelName);
      }
      if (RegisterSubChannelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RegisterSubChannelName);
      }
      if (LoginChannelId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LoginChannelId);
      }
      if (LoginChannelName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoginChannelName);
      }
      if (LoginSubChannelName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoginSubChannelName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegisterChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegisterChannelId);
      }
      if (RegisterChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegisterChannelName);
      }
      if (RegisterSubChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegisterSubChannelName);
      }
      if (LoginChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginChannelId);
      }
      if (LoginChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginChannelName);
      }
      if (LoginSubChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginSubChannelName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RegisterChannelId = input.ReadString();
            break;
          }
          case 18: {
            RegisterChannelName = input.ReadString();
            break;
          }
          case 26: {
            RegisterSubChannelName = input.ReadString();
            break;
          }
          case 34: {
            LoginChannelId = input.ReadString();
            break;
          }
          case 42: {
            LoginChannelName = input.ReadString();
            break;
          }
          case 50: {
            LoginSubChannelName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMiscData : pb::IMessage {
    private static readonly pb::MessageParser<RoleMiscData> _parser = new pb::MessageParser<RoleMiscData>(() => new RoleMiscData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMiscData> Parser { get { return _parser; } }

    /// <summary>Field number for the "guide_done" field.</summary>
    public const int GuideDoneFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.ArrInt>.Codec _map_guideDone_codec
        = new pbc::MapField<int, global::Datap.ArrInt>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.ArrInt.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.ArrInt> guideDone_ = new pbc::MapField<int, global::Datap.ArrInt>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.ArrInt> GuideDone {
      get { return guideDone_; }
    }

    /// <summary>Field number for the "last_energy_restore_time" field.</summary>
    public const int LastEnergyRestoreTimeFieldNumber = 2;
    private long lastEnergyRestoreTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEnergyRestoreTime {
      get { return lastEnergyRestoreTime_; }
      set {
        lastEnergyRestoreTime_ = value;
      }
    }

    /// <summary>Field number for the "reg_time" field.</summary>
    public const int RegTimeFieldNumber = 4;
    private long regTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RegTime {
      get { return regTime_; }
      set {
        regTime_ = value;
      }
    }

    /// <summary>Field number for the "login_time" field.</summary>
    public const int LoginTimeFieldNumber = 5;
    private long loginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LoginTime {
      get { return loginTime_; }
      set {
        loginTime_ = value;
      }
    }

    /// <summary>Field number for the "today_online_time" field.</summary>
    public const int TodayOnlineTimeFieldNumber = 6;
    private int todayOnlineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayOnlineTime {
      get { return todayOnlineTime_; }
      set {
        todayOnlineTime_ = value;
      }
    }

    /// <summary>Field number for the "total_online_time" field.</summary>
    public const int TotalOnlineTimeFieldNumber = 7;
    private int totalOnlineTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalOnlineTime {
      get { return totalOnlineTime_; }
      set {
        totalOnlineTime_ = value;
      }
    }

    /// <summary>Field number for the "login_day" field.</summary>
    public const int LoginDayFieldNumber = 8;
    private int loginDay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDay {
      get { return loginDay_; }
      set {
        loginDay_ = value;
      }
    }

    /// <summary>Field number for the "last_login_time" field.</summary>
    public const int LastLoginTimeFieldNumber = 9;
    private long lastLoginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = value;
      }
    }

    /// <summary>Field number for the "last_stage_energy_restore_time" field.</summary>
    public const int LastStageEnergyRestoreTimeFieldNumber = 10;
    private long lastStageEnergyRestoreTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastStageEnergyRestoreTime {
      get { return lastStageEnergyRestoreTime_; }
      set {
        lastStageEnergyRestoreTime_ = value;
      }
    }

    /// <summary>Field number for the "module_fix_version" field.</summary>
    public const int ModuleFixVersionFieldNumber = 11;
    private static readonly pbc::MapField<int, global::Datap.RoleDataFixVersion>.Codec _map_moduleFixVersion_codec
        = new pbc::MapField<int, global::Datap.RoleDataFixVersion>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Datap.RoleDataFixVersion) x), 90);
    private readonly pbc::MapField<int, global::Datap.RoleDataFixVersion> moduleFixVersion_ = new pbc::MapField<int, global::Datap.RoleDataFixVersion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleDataFixVersion> ModuleFixVersion {
      get { return moduleFixVersion_; }
    }

    /// <summary>Field number for the "last_load_cache_time" field.</summary>
    public const int LastLoadCacheTimeFieldNumber = 14;
    private long lastLoadCacheTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLoadCacheTime {
      get { return lastLoadCacheTime_; }
      set {
        lastLoadCacheTime_ = value;
      }
    }

    /// <summary>Field number for the "login_day_natural" field.</summary>
    public const int LoginDayNaturalFieldNumber = 15;
    private int loginDayNatural_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginDayNatural {
      get { return loginDayNatural_; }
      set {
        loginDayNatural_ = value;
      }
    }

    /// <summary>Field number for the "giftcode_common" field.</summary>
    public const int GiftcodeCommonFieldNumber = 16;
    private static readonly pbc::MapField<int, global::Datap.RoleGiftcode>.Codec _map_giftcodeCommon_codec
        = new pbc::MapField<int, global::Datap.RoleGiftcode>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleGiftcode.Parser), 130);
    private readonly pbc::MapField<int, global::Datap.RoleGiftcode> giftcodeCommon_ = new pbc::MapField<int, global::Datap.RoleGiftcode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleGiftcode> GiftcodeCommon {
      get { return giftcodeCommon_; }
    }

    /// <summary>Field number for the "giftcode_unique" field.</summary>
    public const int GiftcodeUniqueFieldNumber = 17;
    private static readonly pbc::MapField<int, global::Datap.RoleGiftcode>.Codec _map_giftcodeUnique_codec
        = new pbc::MapField<int, global::Datap.RoleGiftcode>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleGiftcode.Parser), 138);
    private readonly pbc::MapField<int, global::Datap.RoleGiftcode> giftcodeUnique_ = new pbc::MapField<int, global::Datap.RoleGiftcode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleGiftcode> GiftcodeUnique {
      get { return giftcodeUnique_; }
    }

    /// <summary>Field number for the "story_process" field.</summary>
    public const int StoryProcessFieldNumber = 19;
    private long storyProcess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StoryProcess {
      get { return storyProcess_; }
      set {
        storyProcess_ = value;
      }
    }

    /// <summary>Field number for the "cd" field.</summary>
    public const int CdFieldNumber = 20;
    private static readonly pbc::MapField<int, long>.Codec _map_cd_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 162);
    private readonly pbc::MapField<int, long> cd_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> Cd {
      get { return cd_; }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 21;
    private global::Datap.RoleChannel channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleChannel Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      guideDone_.WriteTo(output, _map_guideDone_codec);
      if (LastEnergyRestoreTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastEnergyRestoreTime);
      }
      if (RegTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RegTime);
      }
      if (LoginTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LoginTime);
      }
      if (TodayOnlineTime != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TodayOnlineTime);
      }
      if (TotalOnlineTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalOnlineTime);
      }
      if (LoginDay != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LoginDay);
      }
      if (LastLoginTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LastLoginTime);
      }
      if (LastStageEnergyRestoreTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(LastStageEnergyRestoreTime);
      }
      moduleFixVersion_.WriteTo(output, _map_moduleFixVersion_codec);
      if (LastLoadCacheTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LastLoadCacheTime);
      }
      if (LoginDayNatural != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(LoginDayNatural);
      }
      giftcodeCommon_.WriteTo(output, _map_giftcodeCommon_codec);
      giftcodeUnique_.WriteTo(output, _map_giftcodeUnique_codec);
      if (StoryProcess != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(StoryProcess);
      }
      cd_.WriteTo(output, _map_cd_codec);
      if (channel_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Channel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += guideDone_.CalculateSize(_map_guideDone_codec);
      if (LastEnergyRestoreTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEnergyRestoreTime);
      }
      if (RegTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegTime);
      }
      if (LoginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoginTime);
      }
      if (TodayOnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayOnlineTime);
      }
      if (TotalOnlineTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalOnlineTime);
      }
      if (LoginDay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDay);
      }
      if (LastLoginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLoginTime);
      }
      if (LastStageEnergyRestoreTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastStageEnergyRestoreTime);
      }
      size += moduleFixVersion_.CalculateSize(_map_moduleFixVersion_codec);
      if (LastLoadCacheTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLoadCacheTime);
      }
      if (LoginDayNatural != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginDayNatural);
      }
      size += giftcodeCommon_.CalculateSize(_map_giftcodeCommon_codec);
      size += giftcodeUnique_.CalculateSize(_map_giftcodeUnique_codec);
      if (StoryProcess != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(StoryProcess);
      }
      size += cd_.CalculateSize(_map_cd_codec);
      if (channel_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            guideDone_.AddEntriesFrom(input, _map_guideDone_codec);
            break;
          }
          case 16: {
            LastEnergyRestoreTime = input.ReadInt64();
            break;
          }
          case 32: {
            RegTime = input.ReadInt64();
            break;
          }
          case 40: {
            LoginTime = input.ReadInt64();
            break;
          }
          case 48: {
            TodayOnlineTime = input.ReadInt32();
            break;
          }
          case 56: {
            TotalOnlineTime = input.ReadInt32();
            break;
          }
          case 64: {
            LoginDay = input.ReadInt32();
            break;
          }
          case 72: {
            LastLoginTime = input.ReadInt64();
            break;
          }
          case 80: {
            LastStageEnergyRestoreTime = input.ReadInt64();
            break;
          }
          case 90: {
            moduleFixVersion_.AddEntriesFrom(input, _map_moduleFixVersion_codec);
            break;
          }
          case 112: {
            LastLoadCacheTime = input.ReadInt64();
            break;
          }
          case 120: {
            LoginDayNatural = input.ReadInt32();
            break;
          }
          case 130: {
            giftcodeCommon_.AddEntriesFrom(input, _map_giftcodeCommon_codec);
            break;
          }
          case 138: {
            giftcodeUnique_.AddEntriesFrom(input, _map_giftcodeUnique_codec);
            break;
          }
          case 152: {
            StoryProcess = input.ReadInt64();
            break;
          }
          case 162: {
            cd_.AddEntriesFrom(input, _map_cd_codec);
            break;
          }
          case 170: {
            if (channel_ == null) {
              channel_ = new global::Datap.RoleChannel();
            }
            input.ReadMessage(channel_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleTaskData : pb::IMessage {
    private static readonly pb::MessageParser<RoleTaskData> _parser = new pb::MessageParser<RoleTaskData>(() => new RoleTaskData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleTaskData> Parser { get { return _parser; } }

    /// <summary>Field number for the "modules" field.</summary>
    public const int ModulesFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_modules_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> modules_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Modules {
      get { return modules_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      modules_.WriteTo(output, _map_modules_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += modules_.CalculateSize(_map_modules_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            modules_.AddEntriesFrom(input, _map_modules_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleOtherData : pb::IMessage {
    private static readonly pb::MessageParser<RoleOtherData> _parser = new pb::MessageParser<RoleOtherData>(() => new RoleOtherData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleOtherData> Parser { get { return _parser; } }

    /// <summary>Field number for the "item_bag" field.</summary>
    public const int ItemBagFieldNumber = 1;
    private global::Datap.RoleItemBag itemBag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleItemBag ItemBag {
      get { return itemBag_; }
      set {
        itemBag_ = value;
      }
    }

    /// <summary>Field number for the "card_bag" field.</summary>
    public const int CardBagFieldNumber = 2;
    private global::Datap.RoleCardBag cardBag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleCardBag CardBag {
      get { return cardBag_; }
      set {
        cardBag_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 3;
    private global::Datap.RoleBattleData battle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBattleData Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    /// <summary>Field number for the "recharge" field.</summary>
    public const int RechargeFieldNumber = 5;
    private global::Datap.RoleRecharge recharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleRecharge Recharge {
      get { return recharge_; }
      set {
        recharge_ = value;
      }
    }

    /// <summary>Field number for the "misc" field.</summary>
    public const int MiscFieldNumber = 6;
    private global::Datap.RoleMiscData misc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleMiscData Misc {
      get { return misc_; }
      set {
        misc_ = value;
      }
    }

    /// <summary>Field number for the "mail" field.</summary>
    public const int MailFieldNumber = 9;
    private global::Datap.RoleMailData mail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleMailData Mail {
      get { return mail_; }
      set {
        mail_ = value;
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 12;
    private global::Datap.RoleReginData region_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleReginData Region {
      get { return region_; }
      set {
        region_ = value;
      }
    }

    /// <summary>Field number for the "hangup" field.</summary>
    public const int HangupFieldNumber = 13;
    private global::Datap.RoleHangUpData hangup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleHangUpData Hangup {
      get { return hangup_; }
      set {
        hangup_ = value;
      }
    }

    /// <summary>Field number for the "ad" field.</summary>
    public const int AdFieldNumber = 14;
    private global::Datap.RoleAdData ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleAdData Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "talent" field.</summary>
    public const int TalentFieldNumber = 16;
    private global::Datap.RoleTalentData talent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleTalentData Talent {
      get { return talent_; }
      set {
        talent_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 17;
    private global::Datap.RoleEquipmentData equipment_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleEquipmentData Equipment {
      get { return equipment_; }
      set {
        equipment_ = value;
      }
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 18;
    private global::Datap.RoleCounterData counter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleCounterData Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "skin" field.</summary>
    public const int SkinFieldNumber = 19;
    private global::Datap.RoleSkinData skin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleSkinData Skin {
      get { return skin_; }
      set {
        skin_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_skill" field.</summary>
    public const int UltimateSkillFieldNumber = 20;
    private global::Datap.RoleSkillData ultimateSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleSkillData UltimateSkill {
      get { return ultimateSkill_; }
      set {
        ultimateSkill_ = value;
      }
    }

    /// <summary>Field number for the "stat_data" field.</summary>
    public const int StatDataFieldNumber = 21;
    private static readonly pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec _map_statData_codec
        = new pbc::MapField<int, global::Datap.RoleStatPeriod>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleStatPeriod.Parser), 170);
    private readonly pbc::MapField<int, global::Datap.RoleStatPeriod> statData_ = new pbc::MapField<int, global::Datap.RoleStatPeriod>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleStatPeriod> StatData {
      get { return statData_; }
    }

    /// <summary>Field number for the "chat" field.</summary>
    public const int ChatFieldNumber = 22;
    private global::Datap.RoleChatInfo chat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleChatInfo Chat {
      get { return chat_; }
      set {
        chat_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 23;
    private global::Datap.RoleTaskData task_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleTaskData Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "once_msg" field.</summary>
    public const int OnceMsgFieldNumber = 24;
    private static readonly pb::FieldCodec<global::Datap.RoleOnceMsg> _repeated_onceMsg_codec
        = pb::FieldCodec.ForMessage(194, global::Datap.RoleOnceMsg.Parser);
    private readonly pbc::RepeatedField<global::Datap.RoleOnceMsg> onceMsg_ = new pbc::RepeatedField<global::Datap.RoleOnceMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RoleOnceMsg> OnceMsg {
      get { return onceMsg_; }
    }

    /// <summary>Field number for the "month_card" field.</summary>
    public const int MonthCardFieldNumber = 25;
    private global::Datap.RoleMonthCard monthCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleMonthCard MonthCard {
      get { return monthCard_; }
      set {
        monthCard_ = value;
      }
    }

    /// <summary>Field number for the "exchange_shop" field.</summary>
    public const int ExchangeShopFieldNumber = 26;
    private global::Datap.RoleExchangeShop exchangeShop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleExchangeShop ExchangeShop {
      get { return exchangeShop_; }
      set {
        exchangeShop_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 28;
    private global::Datap.RoleRank rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "draw_data" field.</summary>
    public const int DrawDataFieldNumber = 29;
    private global::Datap.RoleDrawData drawData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleDrawData DrawData {
      get { return drawData_; }
      set {
        drawData_ = value;
      }
    }

    /// <summary>Field number for the "push_gift" field.</summary>
    public const int PushGiftFieldNumber = 30;
    private global::Datap.RolePushGift pushGift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RolePushGift PushGift {
      get { return pushGift_; }
      set {
        pushGift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (itemBag_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ItemBag);
      }
      if (cardBag_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CardBag);
      }
      if (battle_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Battle);
      }
      if (recharge_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Recharge);
      }
      if (misc_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Misc);
      }
      if (mail_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Mail);
      }
      if (region_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Region);
      }
      if (hangup_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Hangup);
      }
      if (ad_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Ad);
      }
      if (talent_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Talent);
      }
      if (equipment_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Equipment);
      }
      if (counter_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(Counter);
      }
      if (skin_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Skin);
      }
      if (ultimateSkill_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UltimateSkill);
      }
      statData_.WriteTo(output, _map_statData_codec);
      if (chat_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Chat);
      }
      if (task_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Task);
      }
      onceMsg_.WriteTo(output, _repeated_onceMsg_codec);
      if (monthCard_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(MonthCard);
      }
      if (exchangeShop_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ExchangeShop);
      }
      if (rank_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(Rank);
      }
      if (drawData_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(DrawData);
      }
      if (pushGift_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(PushGift);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (itemBag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemBag);
      }
      if (cardBag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardBag);
      }
      if (battle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battle);
      }
      if (recharge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Recharge);
      }
      if (misc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Misc);
      }
      if (mail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mail);
      }
      if (region_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Region);
      }
      if (hangup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hangup);
      }
      if (ad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ad);
      }
      if (talent_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Talent);
      }
      if (equipment_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Equipment);
      }
      if (counter_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Counter);
      }
      if (skin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Skin);
      }
      if (ultimateSkill_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UltimateSkill);
      }
      size += statData_.CalculateSize(_map_statData_codec);
      if (chat_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Chat);
      }
      if (task_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      size += onceMsg_.CalculateSize(_repeated_onceMsg_codec);
      if (monthCard_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MonthCard);
      }
      if (exchangeShop_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExchangeShop);
      }
      if (rank_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Rank);
      }
      if (drawData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DrawData);
      }
      if (pushGift_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PushGift);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (itemBag_ == null) {
              itemBag_ = new global::Datap.RoleItemBag();
            }
            input.ReadMessage(itemBag_);
            break;
          }
          case 18: {
            if (cardBag_ == null) {
              cardBag_ = new global::Datap.RoleCardBag();
            }
            input.ReadMessage(cardBag_);
            break;
          }
          case 26: {
            if (battle_ == null) {
              battle_ = new global::Datap.RoleBattleData();
            }
            input.ReadMessage(battle_);
            break;
          }
          case 42: {
            if (recharge_ == null) {
              recharge_ = new global::Datap.RoleRecharge();
            }
            input.ReadMessage(recharge_);
            break;
          }
          case 50: {
            if (misc_ == null) {
              misc_ = new global::Datap.RoleMiscData();
            }
            input.ReadMessage(misc_);
            break;
          }
          case 74: {
            if (mail_ == null) {
              mail_ = new global::Datap.RoleMailData();
            }
            input.ReadMessage(mail_);
            break;
          }
          case 98: {
            if (region_ == null) {
              region_ = new global::Datap.RoleReginData();
            }
            input.ReadMessage(region_);
            break;
          }
          case 106: {
            if (hangup_ == null) {
              hangup_ = new global::Datap.RoleHangUpData();
            }
            input.ReadMessage(hangup_);
            break;
          }
          case 114: {
            if (ad_ == null) {
              ad_ = new global::Datap.RoleAdData();
            }
            input.ReadMessage(ad_);
            break;
          }
          case 130: {
            if (talent_ == null) {
              talent_ = new global::Datap.RoleTalentData();
            }
            input.ReadMessage(talent_);
            break;
          }
          case 138: {
            if (equipment_ == null) {
              equipment_ = new global::Datap.RoleEquipmentData();
            }
            input.ReadMessage(equipment_);
            break;
          }
          case 146: {
            if (counter_ == null) {
              counter_ = new global::Datap.RoleCounterData();
            }
            input.ReadMessage(counter_);
            break;
          }
          case 154: {
            if (skin_ == null) {
              skin_ = new global::Datap.RoleSkinData();
            }
            input.ReadMessage(skin_);
            break;
          }
          case 162: {
            if (ultimateSkill_ == null) {
              ultimateSkill_ = new global::Datap.RoleSkillData();
            }
            input.ReadMessage(ultimateSkill_);
            break;
          }
          case 170: {
            statData_.AddEntriesFrom(input, _map_statData_codec);
            break;
          }
          case 178: {
            if (chat_ == null) {
              chat_ = new global::Datap.RoleChatInfo();
            }
            input.ReadMessage(chat_);
            break;
          }
          case 186: {
            if (task_ == null) {
              task_ = new global::Datap.RoleTaskData();
            }
            input.ReadMessage(task_);
            break;
          }
          case 194: {
            onceMsg_.AddEntriesFrom(input, _repeated_onceMsg_codec);
            break;
          }
          case 202: {
            if (monthCard_ == null) {
              monthCard_ = new global::Datap.RoleMonthCard();
            }
            input.ReadMessage(monthCard_);
            break;
          }
          case 210: {
            if (exchangeShop_ == null) {
              exchangeShop_ = new global::Datap.RoleExchangeShop();
            }
            input.ReadMessage(exchangeShop_);
            break;
          }
          case 226: {
            if (rank_ == null) {
              rank_ = new global::Datap.RoleRank();
            }
            input.ReadMessage(rank_);
            break;
          }
          case 234: {
            if (drawData_ == null) {
              drawData_ = new global::Datap.RoleDrawData();
            }
            input.ReadMessage(drawData_);
            break;
          }
          case 242: {
            if (pushGift_ == null) {
              pushGift_ = new global::Datap.RolePushGift();
            }
            input.ReadMessage(pushGift_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleData : pb::IMessage {
    private static readonly pb::MessageParser<RoleData> _parser = new pb::MessageParser<RoleData>(() => new RoleData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleData> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 20;
    private global::Datap.RoleBaseAttr base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleBaseAttr Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "other" field.</summary>
    public const int OtherFieldNumber = 22;
    private global::Datap.RoleOtherData other_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleOtherData Other {
      get { return other_; }
      set {
        other_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (base_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(Base);
      }
      if (other_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Other);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (base_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (other_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Other);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 162: {
            if (base_ == null) {
              base_ = new global::Datap.RoleBaseAttr();
            }
            input.ReadMessage(base_);
            break;
          }
          case 178: {
            if (other_ == null) {
              other_ = new global::Datap.RoleOtherData();
            }
            input.ReadMessage(other_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
