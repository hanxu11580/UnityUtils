// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csbattle_stage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSStageStateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStageStateResp> _parser = new pb::MessageParser<CSStageStateResp>(() => new CSStageStateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStageStateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "max_finished_chapter_id" field.</summary>
    public const int MaxFinishedChapterIdFieldNumber = 1;
    private int maxFinishedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedChapterId {
      get { return maxFinishedChapterId_; }
      set {
        maxFinishedChapterId_ = value;
      }
    }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 3;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFinishedChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxFinishedChapterId);
      }
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaveDefeatedNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFinishedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedChapterId);
      }
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxFinishedChapterId = input.ReadInt32();
            break;
          }
          case 24: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSStageStartResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStageStartResp> _parser = new pb::MessageParser<CSStageStartResp>(() => new CSStageStartResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStageStartResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "relic_refresh_times" field.</summary>
    public const int RelicRefreshTimesFieldNumber = 1;
    private int relicRefreshTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelicRefreshTimes {
      get { return relicRefreshTimes_; }
      set {
        relicRefreshTimes_ = value;
      }
    }

    /// <summary>Field number for the "region_events" field.</summary>
    public const int RegionEventsFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Datap.RegionWaveEvents>.Codec _map_regionEvents_codec
        = new pbc::MapField<int, global::Datap.RegionWaveEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RegionWaveEvents.Parser), 18);
    private readonly pbc::MapField<int, global::Datap.RegionWaveEvents> regionEvents_ = new pbc::MapField<int, global::Datap.RegionWaveEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RegionWaveEvents> RegionEvents {
      get { return regionEvents_; }
    }

    /// <summary>Field number for the "awards_per_wave" field.</summary>
    public const int AwardsPerWaveFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Datap.WaveAwards>.Codec _map_awardsPerWave_codec
        = new pbc::MapField<int, global::Datap.WaveAwards>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.WaveAwards.Parser), 26);
    private readonly pbc::MapField<int, global::Datap.WaveAwards> awardsPerWave_ = new pbc::MapField<int, global::Datap.WaveAwards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.WaveAwards> AwardsPerWave {
      get { return awardsPerWave_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RelicRefreshTimes != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RelicRefreshTimes);
      }
      regionEvents_.WriteTo(output, _map_regionEvents_codec);
      awardsPerWave_.WriteTo(output, _map_awardsPerWave_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RelicRefreshTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelicRefreshTimes);
      }
      size += regionEvents_.CalculateSize(_map_regionEvents_codec);
      size += awardsPerWave_.CalculateSize(_map_awardsPerWave_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RelicRefreshTimes = input.ReadInt32();
            break;
          }
          case 18: {
            regionEvents_.AddEntriesFrom(input, _map_regionEvents_codec);
            break;
          }
          case 26: {
            awardsPerWave_.AddEntriesFrom(input, _map_awardsPerWave_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEnemyData : pb::IMessage {
    private static readonly pb::MessageParser<CSEnemyData> _parser = new pb::MessageParser<CSEnemyData>(() => new CSEnemyData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEnemyData> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPveWaveData : pb::IMessage {
    private static readonly pb::MessageParser<CSPveWaveData> _parser = new pb::MessageParser<CSPveWaveData>(() => new CSPveWaveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveWaveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "battle_time" field.</summary>
    public const int BattleTimeFieldNumber = 1;
    private int battleTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleTime {
      get { return battleTime_; }
      set {
        battleTime_ = value;
      }
    }

    /// <summary>Field number for the "hp_percent" field.</summary>
    public const int HpPercentFieldNumber = 2;
    private int hpPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpPercent {
      get { return hpPercent_; }
      set {
        hpPercent_ = value;
      }
    }

    /// <summary>Field number for the "skill_times" field.</summary>
    public const int SkillTimesFieldNumber = 3;
    private int skillTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillTimes {
      get { return skillTimes_; }
      set {
        skillTimes_ = value;
      }
    }

    /// <summary>Field number for the "use_ultimate" field.</summary>
    public const int UseUltimateFieldNumber = 4;
    private bool useUltimate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseUltimate {
      get { return useUltimate_; }
      set {
        useUltimate_ = value;
      }
    }

    /// <summary>Field number for the "enemies" field.</summary>
    public const int EnemiesFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Csp.CSEnemyData>.Codec _map_enemies_codec
        = new pbc::MapField<string, global::Csp.CSEnemyData>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Csp.CSEnemyData.Parser), 42);
    private readonly pbc::MapField<string, global::Csp.CSEnemyData> enemies_ = new pbc::MapField<string, global::Csp.CSEnemyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Csp.CSEnemyData> Enemies {
      get { return enemies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattleTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BattleTime);
      }
      if (HpPercent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HpPercent);
      }
      if (SkillTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillTimes);
      }
      if (UseUltimate != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseUltimate);
      }
      enemies_.WriteTo(output, _map_enemies_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattleTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleTime);
      }
      if (HpPercent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpPercent);
      }
      if (SkillTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillTimes);
      }
      if (UseUltimate != false) {
        size += 1 + 1;
      }
      size += enemies_.CalculateSize(_map_enemies_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BattleTime = input.ReadInt32();
            break;
          }
          case 16: {
            HpPercent = input.ReadInt32();
            break;
          }
          case 24: {
            SkillTimes = input.ReadInt32();
            break;
          }
          case 32: {
            UseUltimate = input.ReadBool();
            break;
          }
          case 42: {
            enemies_.AddEntriesFrom(input, _map_enemies_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRelicData : pb::IMessage {
    private static readonly pb::MessageParser<CSRelicData> _parser = new pb::MessageParser<CSRelicData>(() => new CSRelicData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRelicData> Parser { get { return _parser; } }

    /// <summary>Field number for the "relics" field.</summary>
    public const int RelicsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_relics_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> relics_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Relics {
      get { return relics_; }
    }

    /// <summary>Field number for the "relic3" field.</summary>
    public const int Relic3FieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_relic3_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> relic3_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Relic3 {
      get { return relic3_; }
    }

    /// <summary>Field number for the "relic6" field.</summary>
    public const int Relic6FieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_relic6_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> relic6_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Relic6 {
      get { return relic6_; }
    }

    /// <summary>Field number for the "relic9" field.</summary>
    public const int Relic9FieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_relic9_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> relic9_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Relic9 {
      get { return relic9_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      relics_.WriteTo(output, _repeated_relics_codec);
      relic3_.WriteTo(output, _repeated_relic3_codec);
      relic6_.WriteTo(output, _repeated_relic6_codec);
      relic9_.WriteTo(output, _repeated_relic9_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += relics_.CalculateSize(_repeated_relics_codec);
      size += relic3_.CalculateSize(_repeated_relic3_codec);
      size += relic6_.CalculateSize(_repeated_relic6_codec);
      size += relic9_.CalculateSize(_repeated_relic9_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            relics_.AddEntriesFrom(input, _repeated_relics_codec);
            break;
          }
          case 18:
          case 16: {
            relic3_.AddEntriesFrom(input, _repeated_relic3_codec);
            break;
          }
          case 26:
          case 24: {
            relic6_.AddEntriesFrom(input, _repeated_relic6_codec);
            break;
          }
          case 34:
          case 32: {
            relic9_.AddEntriesFrom(input, _repeated_relic9_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSStageFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSStageFinishReq> _parser = new pb::MessageParser<CSStageFinishReq>(() => new CSStageFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStageFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 1;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "boss_defeated_num" field.</summary>
    public const int BossDefeatedNumFieldNumber = 2;
    private int bossDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossDefeatedNum {
      get { return bossDefeatedNum_; }
      set {
        bossDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "relic_data" field.</summary>
    public const int RelicDataFieldNumber = 3;
    private global::Csp.CSRelicData relicData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSRelicData RelicData {
      get { return relicData_; }
      set {
        relicData_ = value;
      }
    }

    /// <summary>Field number for the "coin_absorb" field.</summary>
    public const int CoinAbsorbFieldNumber = 4;
    private int coinAbsorb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CoinAbsorb {
      get { return coinAbsorb_; }
      set {
        coinAbsorb_ = value;
      }
    }

    /// <summary>Field number for the "last_battle_wave" field.</summary>
    public const int LastBattleWaveFieldNumber = 8;
    private int lastBattleWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastBattleWave {
      get { return lastBattleWave_; }
      set {
        lastBattleWave_ = value;
      }
    }

    /// <summary>Field number for the "boss_defeated_hp_rate" field.</summary>
    public const int BossDefeatedHpRateFieldNumber = 9;
    private int bossDefeatedHpRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossDefeatedHpRate {
      get { return bossDefeatedHpRate_; }
      set {
        bossDefeatedHpRate_ = value;
      }
    }

    /// <summary>Field number for the "absorb_bullet" field.</summary>
    public const int AbsorbBulletFieldNumber = 10;
    private int absorbBullet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbsorbBullet {
      get { return absorbBullet_; }
      set {
        absorbBullet_ = value;
      }
    }

    /// <summary>Field number for the "no_damage" field.</summary>
    public const int NoDamageFieldNumber = 11;
    private bool noDamage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoDamage {
      get { return noDamage_; }
      set {
        noDamage_ = value;
      }
    }

    /// <summary>Field number for the "boss_defeated_ids" field.</summary>
    public const int BossDefeatedIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_bossDefeatedIds_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> bossDefeatedIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BossDefeatedIds {
      get { return bossDefeatedIds_; }
    }

    /// <summary>Field number for the "wave_data" field.</summary>
    public const int WaveDataFieldNumber = 6;
    private static readonly pbc::MapField<int, global::Csp.CSPveWaveData>.Codec _map_waveData_codec
        = new pbc::MapField<int, global::Csp.CSPveWaveData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Csp.CSPveWaveData.Parser), 50);
    private readonly pbc::MapField<int, global::Csp.CSPveWaveData> waveData_ = new pbc::MapField<int, global::Csp.CSPveWaveData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Csp.CSPveWaveData> WaveData {
      get { return waveData_; }
    }

    /// <summary>Field number for the "region_events" field.</summary>
    public const int RegionEventsFieldNumber = 7;
    private static readonly pbc::MapField<int, global::Datap.RegionWaveEventsIndex>.Codec _map_regionEvents_codec
        = new pbc::MapField<int, global::Datap.RegionWaveEventsIndex>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RegionWaveEventsIndex.Parser), 58);
    private readonly pbc::MapField<int, global::Datap.RegionWaveEventsIndex> regionEvents_ = new pbc::MapField<int, global::Datap.RegionWaveEventsIndex>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RegionWaveEventsIndex> RegionEvents {
      get { return regionEvents_; }
    }

    /// <summary>Field number for the "hit_element" field.</summary>
    public const int HitElementFieldNumber = 12;
    private static readonly pbc::MapField<int, int>.Codec _map_hitElement_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 98);
    private readonly pbc::MapField<int, int> hitElement_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> HitElement {
      get { return hitElement_; }
    }

    /// <summary>Field number for the "hit_source" field.</summary>
    public const int HitSourceFieldNumber = 13;
    private static readonly pbc::MapField<int, int>.Codec _map_hitSource_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 106);
    private readonly pbc::MapField<int, int> hitSource_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> HitSource {
      get { return hitSource_; }
    }

    /// <summary>Field number for the "relic_element" field.</summary>
    public const int RelicElementFieldNumber = 14;
    private static readonly pbc::MapField<int, int>.Codec _map_relicElement_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 114);
    private readonly pbc::MapField<int, int> relicElement_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> RelicElement {
      get { return relicElement_; }
    }

    /// <summary>Field number for the "relic_dmg_source" field.</summary>
    public const int RelicDmgSourceFieldNumber = 15;
    private static readonly pbc::MapField<int, int>.Codec _map_relicDmgSource_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 122);
    private readonly pbc::MapField<int, int> relicDmgSource_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> RelicDmgSource {
      get { return relicDmgSource_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaveDefeatedNum);
      }
      if (BossDefeatedNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossDefeatedNum);
      }
      if (relicData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RelicData);
      }
      if (CoinAbsorb != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CoinAbsorb);
      }
      bossDefeatedIds_.WriteTo(output, _repeated_bossDefeatedIds_codec);
      waveData_.WriteTo(output, _map_waveData_codec);
      regionEvents_.WriteTo(output, _map_regionEvents_codec);
      if (LastBattleWave != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LastBattleWave);
      }
      if (BossDefeatedHpRate != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BossDefeatedHpRate);
      }
      if (AbsorbBullet != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AbsorbBullet);
      }
      if (NoDamage != false) {
        output.WriteRawTag(88);
        output.WriteBool(NoDamage);
      }
      hitElement_.WriteTo(output, _map_hitElement_codec);
      hitSource_.WriteTo(output, _map_hitSource_codec);
      relicElement_.WriteTo(output, _map_relicElement_codec);
      relicDmgSource_.WriteTo(output, _map_relicDmgSource_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      if (BossDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossDefeatedNum);
      }
      if (relicData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RelicData);
      }
      if (CoinAbsorb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CoinAbsorb);
      }
      if (LastBattleWave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastBattleWave);
      }
      if (BossDefeatedHpRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossDefeatedHpRate);
      }
      if (AbsorbBullet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbsorbBullet);
      }
      if (NoDamage != false) {
        size += 1 + 1;
      }
      size += bossDefeatedIds_.CalculateSize(_repeated_bossDefeatedIds_codec);
      size += waveData_.CalculateSize(_map_waveData_codec);
      size += regionEvents_.CalculateSize(_map_regionEvents_codec);
      size += hitElement_.CalculateSize(_map_hitElement_codec);
      size += hitSource_.CalculateSize(_map_hitSource_codec);
      size += relicElement_.CalculateSize(_map_relicElement_codec);
      size += relicDmgSource_.CalculateSize(_map_relicDmgSource_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
          case 16: {
            BossDefeatedNum = input.ReadInt32();
            break;
          }
          case 26: {
            if (relicData_ == null) {
              relicData_ = new global::Csp.CSRelicData();
            }
            input.ReadMessage(relicData_);
            break;
          }
          case 32: {
            CoinAbsorb = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            bossDefeatedIds_.AddEntriesFrom(input, _repeated_bossDefeatedIds_codec);
            break;
          }
          case 50: {
            waveData_.AddEntriesFrom(input, _map_waveData_codec);
            break;
          }
          case 58: {
            regionEvents_.AddEntriesFrom(input, _map_regionEvents_codec);
            break;
          }
          case 64: {
            LastBattleWave = input.ReadInt32();
            break;
          }
          case 72: {
            BossDefeatedHpRate = input.ReadInt32();
            break;
          }
          case 80: {
            AbsorbBullet = input.ReadInt32();
            break;
          }
          case 88: {
            NoDamage = input.ReadBool();
            break;
          }
          case 98: {
            hitElement_.AddEntriesFrom(input, _map_hitElement_codec);
            break;
          }
          case 106: {
            hitSource_.AddEntriesFrom(input, _map_hitSource_codec);
            break;
          }
          case 114: {
            relicElement_.AddEntriesFrom(input, _map_relicElement_codec);
            break;
          }
          case 122: {
            relicDmgSource_.AddEntriesFrom(input, _map_relicDmgSource_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSStageFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSStageFinishResp> _parser = new pb::MessageParser<CSStageFinishResp>(() => new CSStageFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSStageFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 1;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaveDefeatedNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSPveStageDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveStageDataNotify> _parser = new pb::MessageParser<CSPveStageDataNotify>(() => new CSPveStageDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveStageDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
