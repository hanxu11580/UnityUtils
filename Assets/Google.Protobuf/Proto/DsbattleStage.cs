// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsbattle_stage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum CSBattleStageMisc {
    /// <summary>
    /// None
    /// </summary>
    KBattleStageMiscNone = 0,
    /// <summary>
    /// 羁绊组合数
    /// </summary>
    KMaxRelicList = 20,
    /// <summary>
    /// 每组三选一数
    /// </summary>
    KMaxRelicItem = 50,
    /// <summary>
    /// 每波怪物数上限
    /// </summary>
    KMaxEnemies = 10,
    /// <summary>
    /// 每波次掉落次数上限
    /// </summary>
    KMaxDropPerWave = 20,
    /// <summary>
    /// 每关波次上限
    /// </summary>
    KMaxWavePerChapter = 100,
    /// <summary>
    /// 任务计数的所有boss参数
    /// </summary>
    KBossAllForCondParams = 0,
    /// <summary>
    /// 任务计数的小boss参数
    /// </summary>
    KBossSforCondParams = 1,
    /// <summary>
    /// 任务计数的大boss参数
    /// </summary>
    KBossLforCondParams = 2,
  }

  public enum RegionEventMisc {
    KRegionEventMiscNone = 0,
    KWaveCommon = 99,
    /// <summary>
    /// 该事件今日限制次数
    /// </summary>
    KLimitDailyEvent = 1,
    /// <summary>
    /// 该事件局内限制次数
    /// </summary>
    KLimitBattleEvent = 2,
    /// <summary>
    /// 该类型今日限制次数
    /// </summary>
    KLimitDailyType = 3,
    /// <summary>
    /// 该类型局内限制次数
    /// </summary>
    KLimitBattleType = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class WaveAwards : pb::IMessage {
    private static readonly pb::MessageParser<WaveAwards> _parser = new pb::MessageParser<WaveAwards>(() => new WaveAwards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WaveAwards> Parser { get { return _parser; } }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.RandAward> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.RandAward.Parser);
    private readonly pbc::RepeatedField<global::Datap.RandAward> awards_ = new pbc::RepeatedField<global::Datap.RandAward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RandAward> Awards {
      get { return awards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      awards_.WriteTo(output, _repeated_awards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += awards_.CalculateSize(_repeated_awards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RegionEvent : pb::IMessage {
    private static readonly pb::MessageParser<RegionEvent> _parser = new pb::MessageParser<RegionEvent>(() => new RegionEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionEvent> Parser { get { return _parser; } }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 2;
    private int eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private int eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(34, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> rewards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "relics" field.</summary>
    public const int RelicsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_relics_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> relics_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Relics {
      get { return relics_; }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 6;
    private bool extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (EventId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EventId);
      }
      if (EventType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EventType);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      relics_.WriteTo(output, _repeated_relics_codec);
      if (Extra != false) {
        output.WriteRawTag(48);
        output.WriteBool(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      size += relics_.CalculateSize(_repeated_relics_codec);
      if (Extra != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            EventId = input.ReadInt32();
            break;
          }
          case 24: {
            EventType = input.ReadInt32();
            break;
          }
          case 34: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 42:
          case 40: {
            relics_.AddEntriesFrom(input, _repeated_relics_codec);
            break;
          }
          case 48: {
            Extra = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class RegionWaveEvents : pb::IMessage {
    private static readonly pb::MessageParser<RegionWaveEvents> _parser = new pb::MessageParser<RegionWaveEvents>(() => new RegionWaveEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionWaveEvents> Parser { get { return _parser; } }

    /// <summary>Field number for the "region_event" field.</summary>
    public const int RegionEventFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.RegionEvent> _repeated_regionEvent_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.RegionEvent.Parser);
    private readonly pbc::RepeatedField<global::Datap.RegionEvent> regionEvent_ = new pbc::RepeatedField<global::Datap.RegionEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RegionEvent> RegionEvent {
      get { return regionEvent_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      regionEvent_.WriteTo(output, _repeated_regionEvent_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += regionEvent_.CalculateSize(_repeated_regionEvent_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            regionEvent_.AddEntriesFrom(input, _repeated_regionEvent_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RegionWaveEventsIndex : pb::IMessage {
    private static readonly pb::MessageParser<RegionWaveEventsIndex> _parser = new pb::MessageParser<RegionWaveEventsIndex>(() => new RegionWaveEventsIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionWaveEventsIndex> Parser { get { return _parser; } }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_events_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> events_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleStageData : pb::IMessage {
    private static readonly pb::MessageParser<RoleStageData> _parser = new pb::MessageParser<RoleStageData>(() => new RoleStageData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleStageData> Parser { get { return _parser; } }

    /// <summary>Field number for the "max_finished_region_id" field.</summary>
    public const int MaxFinishedRegionIdFieldNumber = 1;
    private int maxFinishedRegionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedRegionId {
      get { return maxFinishedRegionId_; }
      set {
        maxFinishedRegionId_ = value;
      }
    }

    /// <summary>Field number for the "max_finished_chapter_id" field.</summary>
    public const int MaxFinishedChapterIdFieldNumber = 2;
    private int maxFinishedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedChapterId {
      get { return maxFinishedChapterId_; }
      set {
        maxFinishedChapterId_ = value;
      }
    }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 3;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 4;
    private int regionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RegionId {
      get { return regionId_; }
      set {
        regionId_ = value;
      }
    }

    /// <summary>Field number for the "chapter_id" field.</summary>
    public const int ChapterIdFieldNumber = 5;
    private int chapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterId {
      get { return chapterId_; }
      set {
        chapterId_ = value;
      }
    }

    /// <summary>Field number for the "awards_per_wave" field.</summary>
    public const int AwardsPerWaveFieldNumber = 6;
    private static readonly pbc::MapField<int, global::Datap.WaveAwards>.Codec _map_awardsPerWave_codec
        = new pbc::MapField<int, global::Datap.WaveAwards>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.WaveAwards.Parser), 50);
    private readonly pbc::MapField<int, global::Datap.WaveAwards> awardsPerWave_ = new pbc::MapField<int, global::Datap.WaveAwards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.WaveAwards> AwardsPerWave {
      get { return awardsPerWave_; }
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 7;
    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    /// <summary>Field number for the "reached_max_region_id" field.</summary>
    public const int ReachedMaxRegionIdFieldNumber = 8;
    private int reachedMaxRegionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReachedMaxRegionId {
      get { return reachedMaxRegionId_; }
      set {
        reachedMaxRegionId_ = value;
      }
    }

    /// <summary>Field number for the "reached_max_chapter_id" field.</summary>
    public const int ReachedMaxChapterIdFieldNumber = 9;
    private int reachedMaxChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReachedMaxChapterId {
      get { return reachedMaxChapterId_; }
      set {
        reachedMaxChapterId_ = value;
      }
    }

    /// <summary>Field number for the "reached_max_wave_defeated_num" field.</summary>
    public const int ReachedMaxWaveDefeatedNumFieldNumber = 10;
    private int reachedMaxWaveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReachedMaxWaveDefeatedNum {
      get { return reachedMaxWaveDefeatedNum_; }
      set {
        reachedMaxWaveDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "region_events" field.</summary>
    public const int RegionEventsFieldNumber = 11;
    private static readonly pbc::MapField<int, global::Datap.RegionWaveEvents>.Codec _map_regionEvents_codec
        = new pbc::MapField<int, global::Datap.RegionWaveEvents>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RegionWaveEvents.Parser), 90);
    private readonly pbc::MapField<int, global::Datap.RegionWaveEvents> regionEvents_ = new pbc::MapField<int, global::Datap.RegionWaveEvents>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RegionWaveEvents> RegionEvents {
      get { return regionEvents_; }
    }

    /// <summary>Field number for the "relic_refresh_times" field.</summary>
    public const int RelicRefreshTimesFieldNumber = 12;
    private int relicRefreshTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RelicRefreshTimes {
      get { return relicRefreshTimes_; }
      set {
        relicRefreshTimes_ = value;
      }
    }

    /// <summary>Field number for the "chapter_unlocked" field.</summary>
    public const int ChapterUnlockedFieldNumber = 13;
    private int chapterUnlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterUnlocked {
      get { return chapterUnlocked_; }
      set {
        chapterUnlocked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFinishedRegionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxFinishedRegionId);
      }
      if (MaxFinishedChapterId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxFinishedChapterId);
      }
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WaveDefeatedNum);
      }
      if (RegionId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RegionId);
      }
      if (ChapterId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ChapterId);
      }
      awardsPerWave_.WriteTo(output, _map_awardsPerWave_codec);
      if (IsPlaying != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsPlaying);
      }
      if (ReachedMaxRegionId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReachedMaxRegionId);
      }
      if (ReachedMaxChapterId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ReachedMaxChapterId);
      }
      if (ReachedMaxWaveDefeatedNum != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReachedMaxWaveDefeatedNum);
      }
      regionEvents_.WriteTo(output, _map_regionEvents_codec);
      if (RelicRefreshTimes != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RelicRefreshTimes);
      }
      if (ChapterUnlocked != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ChapterUnlocked);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFinishedRegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedRegionId);
      }
      if (MaxFinishedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedChapterId);
      }
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      if (RegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RegionId);
      }
      if (ChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterId);
      }
      size += awardsPerWave_.CalculateSize(_map_awardsPerWave_codec);
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (ReachedMaxRegionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReachedMaxRegionId);
      }
      if (ReachedMaxChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReachedMaxChapterId);
      }
      if (ReachedMaxWaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReachedMaxWaveDefeatedNum);
      }
      size += regionEvents_.CalculateSize(_map_regionEvents_codec);
      if (RelicRefreshTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelicRefreshTimes);
      }
      if (ChapterUnlocked != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterUnlocked);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxFinishedRegionId = input.ReadInt32();
            break;
          }
          case 16: {
            MaxFinishedChapterId = input.ReadInt32();
            break;
          }
          case 24: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
          case 32: {
            RegionId = input.ReadInt32();
            break;
          }
          case 40: {
            ChapterId = input.ReadInt32();
            break;
          }
          case 50: {
            awardsPerWave_.AddEntriesFrom(input, _map_awardsPerWave_codec);
            break;
          }
          case 56: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 64: {
            ReachedMaxRegionId = input.ReadInt32();
            break;
          }
          case 72: {
            ReachedMaxChapterId = input.ReadInt32();
            break;
          }
          case 80: {
            ReachedMaxWaveDefeatedNum = input.ReadInt32();
            break;
          }
          case 90: {
            regionEvents_.AddEntriesFrom(input, _map_regionEvents_codec);
            break;
          }
          case 96: {
            RelicRefreshTimes = input.ReadInt32();
            break;
          }
          case 104: {
            ChapterUnlocked = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
