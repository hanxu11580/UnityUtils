// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cscounter.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSCounterSingleIdNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSCounterSingleIdNotify> _parser = new pb::MessageParser<CSCounterSingleIdNotify>(() => new CSCounterSingleIdNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCounterSingleIdNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "ptype" field.</summary>
    public const int PtypeFieldNumber = 1;
    private global::Datap.PeriodTICounterType ptype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.PeriodTICounterType Ptype {
      get { return ptype_; }
      set {
        ptype_ = value;
      }
    }

    /// <summary>Field number for the "ctype" field.</summary>
    public const int CtypeFieldNumber = 2;
    private int ctype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ctype {
      get { return ctype_; }
      set {
        ctype_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::Datap.TICounterData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.TICounterData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ptype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Ptype);
      }
      if (Ctype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ctype);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ptype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ptype);
      }
      if (Ctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ctype);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ptype_ = (global::Datap.PeriodTICounterType) input.ReadEnum();
            break;
          }
          case 16: {
            Ctype = input.ReadInt32();
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::Datap.TICounterData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSCounterPeriodResetNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSCounterPeriodResetNotify> _parser = new pb::MessageParser<CSCounterPeriodResetNotify>(() => new CSCounterPeriodResetNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSCounterPeriodResetNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Datap.PeriodTICounterType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.PeriodTICounterType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Datap.PeriodTICounterType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
