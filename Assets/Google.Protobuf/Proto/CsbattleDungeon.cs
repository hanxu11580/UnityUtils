// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csbattle_dungeon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSEquipmentByCause : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentByCause> _parser = new pb::MessageParser<CSEquipmentByCause>(() => new CSEquipmentByCause());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentByCause> Parser { get { return _parser; } }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 1;
    private global::Datap.AwardCause cause_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.AwardCause Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    /// <summary>Field number for the "equipments" field.</summary>
    public const int EquipmentsFieldNumber = 2;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipments_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 18);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipments_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> Equipments {
      get { return equipments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cause != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cause);
      }
      equipments_.WriteTo(output, _map_equipments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cause != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cause);
      }
      size += equipments_.CalculateSize(_map_equipments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            cause_ = (global::Datap.AwardCause) input.ReadEnum();
            break;
          }
          case 18: {
            equipments_.AddEntriesFrom(input, _map_equipments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSDungeonSubTypeData : pb::IMessage {
    private static readonly pb::MessageParser<CSDungeonSubTypeData> _parser = new pb::MessageParser<CSDungeonSubTypeData>(() => new CSDungeonSubTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDungeonSubTypeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "max_finished_chapter_id" field.</summary>
    public const int MaxFinishedChapterIdFieldNumber = 1;
    private int maxFinishedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedChapterId {
      get { return maxFinishedChapterId_; }
      set {
        maxFinishedChapterId_ = value;
      }
    }

    /// <summary>Field number for the "close_time" field.</summary>
    public const int CloseTimeFieldNumber = 2;
    private long closeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFinishedChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxFinishedChapterId);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CloseTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFinishedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedChapterId);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxFinishedChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            CloseTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSDungeonTypeData : pb::IMessage {
    private static readonly pb::MessageParser<CSDungeonTypeData> _parser = new pb::MessageParser<CSDungeonTypeData>(() => new CSDungeonTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDungeonTypeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "unlocked" field.</summary>
    public const int UnlockedFieldNumber = 1;
    private bool unlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlocked {
      get { return unlocked_; }
      set {
        unlocked_ = value;
      }
    }

    /// <summary>Field number for the "last_refresh_data_time" field.</summary>
    public const int LastRefreshDataTimeFieldNumber = 2;
    private long lastRefreshDataTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRefreshDataTime {
      get { return lastRefreshDataTime_; }
      set {
        lastRefreshDataTime_ = value;
      }
    }

    /// <summary>Field number for the "close_time" field.</summary>
    public const int CloseTimeFieldNumber = 3;
    private long closeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    /// <summary>Field number for the "sub_types_data" field.</summary>
    public const int SubTypesDataFieldNumber = 6;
    private static readonly pbc::MapField<int, global::Csp.CSDungeonSubTypeData>.Codec _map_subTypesData_codec
        = new pbc::MapField<int, global::Csp.CSDungeonSubTypeData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Csp.CSDungeonSubTypeData.Parser), 50);
    private readonly pbc::MapField<int, global::Csp.CSDungeonSubTypeData> subTypesData_ = new pbc::MapField<int, global::Csp.CSDungeonSubTypeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Csp.CSDungeonSubTypeData> SubTypesData {
      get { return subTypesData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unlocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unlocked);
      }
      if (LastRefreshDataTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastRefreshDataTime);
      }
      if (CloseTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CloseTime);
      }
      subTypesData_.WriteTo(output, _map_subTypesData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unlocked != false) {
        size += 1 + 1;
      }
      if (LastRefreshDataTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRefreshDataTime);
      }
      if (CloseTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseTime);
      }
      size += subTypesData_.CalculateSize(_map_subTypesData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Unlocked = input.ReadBool();
            break;
          }
          case 16: {
            LastRefreshDataTime = input.ReadInt64();
            break;
          }
          case 24: {
            CloseTime = input.ReadInt64();
            break;
          }
          case 50: {
            subTypesData_.AddEntriesFrom(input, _map_subTypesData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSDungeonStateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSDungeonStateResp> _parser = new pb::MessageParser<CSDungeonStateResp>(() => new CSDungeonStateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDungeonStateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "dungeon_types_data" field.</summary>
    public const int DungeonTypesDataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Csp.CSDungeonTypeData>.Codec _map_dungeonTypesData_codec
        = new pbc::MapField<int, global::Csp.CSDungeonTypeData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Csp.CSDungeonTypeData.Parser), 10);
    private readonly pbc::MapField<int, global::Csp.CSDungeonTypeData> dungeonTypesData_ = new pbc::MapField<int, global::Csp.CSDungeonTypeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Csp.CSDungeonTypeData> DungeonTypesData {
      get { return dungeonTypesData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dungeonTypesData_.WriteTo(output, _map_dungeonTypesData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dungeonTypesData_.CalculateSize(_map_dungeonTypesData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dungeonTypesData_.AddEntriesFrom(input, _map_dungeonTypesData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSDungeonFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSDungeonFinishReq> _parser = new pb::MessageParser<CSDungeonFinishReq>(() => new CSDungeonFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDungeonFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 1;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "boss_defeated_num" field.</summary>
    public const int BossDefeatedNumFieldNumber = 2;
    private int bossDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BossDefeatedNum {
      get { return bossDefeatedNum_; }
      set {
        bossDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "hp_section" field.</summary>
    public const int HpSectionFieldNumber = 3;
    private int hpSection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HpSection {
      get { return hpSection_; }
      set {
        hpSection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaveDefeatedNum);
      }
      if (BossDefeatedNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BossDefeatedNum);
      }
      if (HpSection != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HpSection);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      if (BossDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossDefeatedNum);
      }
      if (HpSection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HpSection);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
          case 16: {
            BossDefeatedNum = input.ReadInt32();
            break;
          }
          case 24: {
            HpSection = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSDungeonFinishResp : pb::IMessage {
    private static readonly pb::MessageParser<CSDungeonFinishResp> _parser = new pb::MessageParser<CSDungeonFinishResp>(() => new CSDungeonFinishResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSDungeonFinishResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "wave_defeated_num" field.</summary>
    public const int WaveDefeatedNumFieldNumber = 1;
    private int waveDefeatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WaveDefeatedNum {
      get { return waveDefeatedNum_; }
      set {
        waveDefeatedNum_ = value;
      }
    }

    /// <summary>Field number for the "awards" field.</summary>
    public const int AwardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.RandAward> _repeated_awards_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.RandAward.Parser);
    private readonly pbc::RepeatedField<global::Datap.RandAward> awards_ = new pbc::RepeatedField<global::Datap.RandAward>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RandAward> Awards {
      get { return awards_; }
    }

    /// <summary>Field number for the "equipments" field.</summary>
    public const int EquipmentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Csp.CSEquipmentByCause> _repeated_equipments_codec
        = pb::FieldCodec.ForMessage(26, global::Csp.CSEquipmentByCause.Parser);
    private readonly pbc::RepeatedField<global::Csp.CSEquipmentByCause> equipments_ = new pbc::RepeatedField<global::Csp.CSEquipmentByCause>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Csp.CSEquipmentByCause> Equipments {
      get { return equipments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WaveDefeatedNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(WaveDefeatedNum);
      }
      awards_.WriteTo(output, _repeated_awards_codec);
      equipments_.WriteTo(output, _repeated_equipments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WaveDefeatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveDefeatedNum);
      }
      size += awards_.CalculateSize(_repeated_awards_codec);
      size += equipments_.CalculateSize(_repeated_equipments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            WaveDefeatedNum = input.ReadInt32();
            break;
          }
          case 18: {
            awards_.AddEntriesFrom(input, _repeated_awards_codec);
            break;
          }
          case 26: {
            equipments_.AddEntriesFrom(input, _repeated_equipments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
