// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csad.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Enums
  /// <summary>
  ///========== enum define ==========
  /// </summary>
  public enum CSAdWatchType {
    KCsadWatchTypeNone = 0,
    /// <summary>
    /// 实际观看
    /// </summary>
    KCsadWatchTypeVedio = 1,
    /// <summary>
    /// 广告券兑换
    /// </summary>
    KCsadWatchTypeTicket = 2,
    KCsadWatchTypeMax = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSWatchAdReq : pb::IMessage {
    private static readonly pb::MessageParser<CSWatchAdReq> _parser = new pb::MessageParser<CSWatchAdReq>(() => new CSWatchAdReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWatchAdReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ad_point_id" field.</summary>
    public const int AdPointIdFieldNumber = 1;
    private int adPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdPointId {
      get { return adPointId_; }
      set {
        adPointId_ = value;
      }
    }

    /// <summary>Field number for the "watch_ad_time" field.</summary>
    public const int WatchAdTimeFieldNumber = 2;
    private int watchAdTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WatchAdTime {
      get { return watchAdTime_; }
      set {
        watchAdTime_ = value;
      }
    }

    /// <summary>Field number for the "ad_type" field.</summary>
    public const int AdTypeFieldNumber = 3;
    private global::Csp.CSAdWatchType adType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSAdWatchType AdType {
      get { return adType_; }
      set {
        adType_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 4;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdPointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdPointId);
      }
      if (WatchAdTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WatchAdTime);
      }
      if (AdType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) AdType);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Param);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdPointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdPointId);
      }
      if (WatchAdTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WatchAdTime);
      }
      if (AdType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AdType);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AdPointId = input.ReadInt32();
            break;
          }
          case 16: {
            WatchAdTime = input.ReadInt32();
            break;
          }
          case 24: {
            adType_ = (global::Csp.CSAdWatchType) input.ReadEnum();
            break;
          }
          case 34: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSWatchAdResp : pb::IMessage {
    private static readonly pb::MessageParser<CSWatchAdResp> _parser = new pb::MessageParser<CSWatchAdResp>(() => new CSWatchAdResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSWatchAdResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "ad_point_id" field.</summary>
    public const int AdPointIdFieldNumber = 1;
    private int adPointId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdPointId {
      get { return adPointId_; }
      set {
        adPointId_ = value;
      }
    }

    /// <summary>Field number for the "is_valid" field.</summary>
    public const int IsValidFieldNumber = 2;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> cards_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdPointId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdPointId);
      }
      if (IsValid != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsValid);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdPointId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdPointId);
      }
      if (IsValid != false) {
        size += 1 + 1;
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AdPointId = input.ReadInt32();
            break;
          }
          case 16: {
            IsValid = input.ReadBool();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSAdDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CSAdDataReq> _parser = new pb::MessageParser<CSAdDataReq>(() => new CSAdDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAdDataReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "ad_points" field.</summary>
    public const int AdPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_adPoints_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> adPoints_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> AdPoints {
      get { return adPoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      adPoints_.WriteTo(output, _repeated_adPoints_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += adPoints_.CalculateSize(_repeated_adPoints_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            adPoints_.AddEntriesFrom(input, _repeated_adPoints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSAdDataResp : pb::IMessage {
    private static readonly pb::MessageParser<CSAdDataResp> _parser = new pb::MessageParser<CSAdDataResp>(() => new CSAdDataResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAdDataResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "ad_points_data" field.</summary>
    public const int AdPointsDataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.AdPointData>.Codec _map_adPointsData_codec
        = new pbc::MapField<int, global::Datap.AdPointData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.AdPointData.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.AdPointData> adPointsData_ = new pbc::MapField<int, global::Datap.AdPointData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.AdPointData> AdPointsData {
      get { return adPointsData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      adPointsData_.WriteTo(output, _map_adPointsData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += adPointsData_.CalculateSize(_map_adPointsData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            adPointsData_.AddEntriesFrom(input, _map_adPointsData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSAdDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSAdDataNotify> _parser = new pb::MessageParser<CSAdDataNotify>(() => new CSAdDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSAdDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
