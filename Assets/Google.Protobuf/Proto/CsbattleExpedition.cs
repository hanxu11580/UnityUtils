// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csbattle_expedition.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSExpeditionTrialStateResp : pb::IMessage {
    private static readonly pb::MessageParser<CSExpeditionTrialStateResp> _parser = new pb::MessageParser<CSExpeditionTrialStateResp>(() => new CSExpeditionTrialStateResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExpeditionTrialStateResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "max_finished_chapter_id" field.</summary>
    public const int MaxFinishedChapterIdFieldNumber = 1;
    private int maxFinishedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedChapterId {
      get { return maxFinishedChapterId_; }
      set {
        maxFinishedChapterId_ = value;
      }
    }

    /// <summary>Field number for the "left_tickets" field.</summary>
    public const int LeftTicketsFieldNumber = 2;
    private int leftTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTickets {
      get { return leftTickets_; }
      set {
        leftTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxFinishedChapterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxFinishedChapterId);
      }
      if (LeftTickets != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftTickets);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxFinishedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedChapterId);
      }
      if (LeftTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTickets);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxFinishedChapterId = input.ReadInt32();
            break;
          }
          case 16: {
            LeftTickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExpeditionTrialStartResp : pb::IMessage {
    private static readonly pb::MessageParser<CSExpeditionTrialStartResp> _parser = new pb::MessageParser<CSExpeditionTrialStartResp>(() => new CSExpeditionTrialStartResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExpeditionTrialStartResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "left_tickets" field.</summary>
    public const int LeftTicketsFieldNumber = 1;
    private int leftTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTickets {
      get { return leftTickets_; }
      set {
        leftTickets_ = value;
      }
    }

    /// <summary>Field number for the "left_seconds_for_reset" field.</summary>
    public const int LeftSecondsForResetFieldNumber = 2;
    private int leftSecondsForReset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSecondsForReset {
      get { return leftSecondsForReset_; }
      set {
        leftSecondsForReset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftTickets != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LeftTickets);
      }
      if (LeftSecondsForReset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LeftSecondsForReset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTickets);
      }
      if (LeftSecondsForReset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSecondsForReset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeftTickets = input.ReadInt32();
            break;
          }
          case 16: {
            LeftSecondsForReset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSExpeditionTrialFinishReq : pb::IMessage {
    private static readonly pb::MessageParser<CSExpeditionTrialFinishReq> _parser = new pb::MessageParser<CSExpeditionTrialFinishReq>(() => new CSExpeditionTrialFinishReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSExpeditionTrialFinishReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "seconds_used" field.</summary>
    public const int SecondsUsedFieldNumber = 1;
    private int secondsUsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SecondsUsed {
      get { return secondsUsed_; }
      set {
        secondsUsed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SecondsUsed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SecondsUsed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SecondsUsed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondsUsed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SecondsUsed = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSPveExpeditionDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSPveExpeditionDataNotify> _parser = new pb::MessageParser<CSPveExpeditionDataNotify>(() => new CSPveExpeditionDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPveExpeditionDataNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
