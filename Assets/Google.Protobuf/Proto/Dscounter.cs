// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dscounter.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum TICounterMisc {
    KTicounterMiscNone = 0,
    KMaxTicounterNum = 1024,
    /// <summary>
    /// 注意
    /// </summary>
    KMaxPeriodTypeTicounterNum = 32,
    KMaxRegionEventRewards = 30,
    KMaxRegionWaveEventIndex = 20,
    KMaxEventRolled = 15,
    KMaxEventRewards = 10,
  }

  public enum PeriodTICounterType {
    KTicounterTypeNone = 0,
    KTicounterTypeDay = 1,
    KTicounterTypeWeek = 2,
    KTicounterTypeMontn = 3,
    KTicounterTypeForever = 4,
    KTicounterTypeMax = 5,
  }

  public enum DayTICounterType {
    /// <summary>
    /// TI日计数器类型
    /// </summary>
    KDayTicounterTypeNone = 0,
    /// <summary>
    /// TI日计数器类型
    /// </summary>
    KDayTicounterTypeShop = 1,
    /// <summary>
    /// TI日计数器类型
    /// </summary>
    KDayTicounterTypeRegionEeventId = 2,
    /// <summary>
    /// TI日计数器类型
    /// </summary>
    KDayTicounterTypeRegionEeventType = 3,
    /// <summary>
    /// TI日计数器类型
    /// </summary>
    KDayTicounterTypeCsdiff = 4,
    /// <summary>
    /// TI日计数器的最大项数
    /// </summary>
    KMaxDayTicounterTypeNum = 4,
  }

  public enum WeekTICounterType {
    /// <summary>
    /// TI周计数器类型
    /// </summary>
    KWeekTicounterTypeNone = 0,
    /// <summary>
    /// TI周计数器类型
    /// </summary>
    KWeekTicounterTypeShop = 1,
    /// <summary>
    /// TI周计数器的最大项数
    /// </summary>
    KMaxWeekTicounterTypeNum = 1,
  }

  public enum MonthTICounterType {
    /// <summary>
    /// TI月计数器类型
    /// </summary>
    KMonthTicounterTypeNone = 0,
    /// <summary>
    /// TI月计数器类型
    /// </summary>
    KMonthTicounterTypeShop = 1,
    /// <summary>
    /// TI月计数器的最大项数
    /// </summary>
    KMaxMonthTicounterTypeNum = 1,
  }

  public enum ForeverTICounterType {
    /// <summary>
    /// TI永久计数器类型
    /// </summary>
    KForeverTicounterTypeNone = 0,
    /// <summary>
    /// TI永久计数器类型
    /// </summary>
    KForeverTicounterTypeShop = 1,
    /// <summary>
    /// TI永久计数器类型
    /// </summary>
    KForeverTicounterTypeProficient = 2,
    /// <summary>
    /// TI永久计数器的最大项数
    /// </summary>
    KMaxForeverTicounterTypeNum = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class TICounterData : pb::IMessage {
    private static readonly pb::MessageParser<TICounterData> _parser = new pb::MessageParser<TICounterData>(() => new TICounterData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TICounterData> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class TICounter : pb::IMessage {
    private static readonly pb::MessageParser<TICounter> _parser = new pb::MessageParser<TICounter>(() => new TICounter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TICounter> Parser { get { return _parser; } }

    /// <summary>Field number for the "tin" field.</summary>
    public const int TinFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_tin_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> tin_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Tin {
      get { return tin_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tin_.WriteTo(output, _map_tin_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tin_.CalculateSize(_map_tin_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tin_.AddEntriesFrom(input, _map_tin_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PeriodTICounter : pb::IMessage {
    private static readonly pb::MessageParser<PeriodTICounter> _parser = new pb::MessageParser<PeriodTICounter>(() => new PeriodTICounter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeriodTICounter> Parser { get { return _parser; } }

    /// <summary>Field number for the "tic" field.</summary>
    public const int TicFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.TICounter>.Codec _map_tic_codec
        = new pbc::MapField<int, global::Datap.TICounter>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.TICounter.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.TICounter> tic_ = new pbc::MapField<int, global::Datap.TICounter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.TICounter> Tic {
      get { return tic_; }
    }

    /// <summary>Field number for the "expire" field.</summary>
    public const int ExpireFieldNumber = 2;
    private uint expire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expire {
      get { return expire_; }
      set {
        expire_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      tic_.WriteTo(output, _map_tic_codec);
      if (Expire != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Expire);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += tic_.CalculateSize(_map_tic_codec);
      if (Expire != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expire);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            tic_.AddEntriesFrom(input, _map_tic_codec);
            break;
          }
          case 16: {
            Expire = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleCounterData : pb::IMessage {
    private static readonly pb::MessageParser<RoleCounterData> _parser = new pb::MessageParser<RoleCounterData>(() => new RoleCounterData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleCounterData> Parser { get { return _parser; } }

    /// <summary>Field number for the "ptic" field.</summary>
    public const int PticFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.PeriodTICounter> _repeated_ptic_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.PeriodTICounter.Parser);
    private readonly pbc::RepeatedField<global::Datap.PeriodTICounter> ptic_ = new pbc::RepeatedField<global::Datap.PeriodTICounter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.PeriodTICounter> Ptic {
      get { return ptic_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ptic_.WriteTo(output, _repeated_ptic_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ptic_.CalculateSize(_repeated_ptic_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ptic_.AddEntriesFrom(input, _repeated_ptic_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
