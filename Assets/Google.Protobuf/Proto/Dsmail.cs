// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsmail.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum MailMisc {
    KMailMisc = 0,
    KMaxMailReq = 200,
    /// <summary>
    /// 单封邮件附件上限
    /// </summary>
    KMaxMailAttachNum = 200,
    /// <summary>
    /// 单封邮件参数上限
    /// </summary>
    KMaxMailParamNum = 20,
    /// <summary>
    /// 玩家邮件记录标志
    /// </summary>
    KMaxMailMids = 1000,
  }

  public enum enmActivityMailType {
    KActMailTypeNone = 0,
    /// <summary>
    /// excel表格定义
    /// </summary>
    KActMailTypeExcelDef = 1,
    /// <summary>
    /// 用户自填写内容
    /// </summary>
    KActMailTypeUserDef = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RoleMailAttach : pb::IMessage {
    private static readonly pb::MessageParser<RoleMailAttach> _parser = new pb::MessageParser<RoleMailAttach>(() => new RoleMailAttach());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMailAttach> Parser { get { return _parser; } }

    /// <summary>Field number for the "attach" field.</summary>
    public const int AttachFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_attach_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> attach_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Attach {
      get { return attach_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attach_.WriteTo(output, _repeated_attach_codec);
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attach_.CalculateSize(_repeated_attach_codec);
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            attach_.AddEntriesFrom(input, _repeated_attach_codec);
            break;
          }
          case 16: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MailParameter : pb::IMessage {
    private static readonly pb::MessageParser<MailParameter> _parser = new pb::MessageParser<MailParameter>(() => new MailParameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailParameter> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMailTemplate : pb::IMessage {
    private static readonly pb::MessageParser<RoleMailTemplate> _parser = new pb::MessageParser<RoleMailTemplate>(() => new RoleMailTemplate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMailTemplate> Parser { get { return _parser; } }

    /// <summary>Field number for the "tmpl_id" field.</summary>
    public const int TmplIdFieldNumber = 1;
    private int tmplId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TmplId {
      get { return tmplId_; }
      set {
        tmplId_ = value;
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.MailParameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.MailParameter.Parser);
    private readonly pbc::RepeatedField<global::Datap.MailParameter> parameters_ = new pbc::RepeatedField<global::Datap.MailParameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.MailParameter> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TmplId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TmplId);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TmplId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TmplId);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TmplId = input.ReadInt32();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class MailExtend : pb::IMessage {
    private static readonly pb::MessageParser<MailExtend> _parser = new pb::MessageParser<MailExtend>(() => new MailExtend());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailExtend> Parser { get { return _parser; } }

    /// <summary>Field number for the "place_hold" field.</summary>
    public const int PlaceHoldFieldNumber = 1;
    private int placeHold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlaceHold {
      get { return placeHold_; }
      set {
        placeHold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlaceHold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlaceHold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlaceHold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlaceHold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlaceHold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class MailItemData : pb::IMessage {
    private static readonly pb::MessageParser<MailItemData> _parser = new pb::MessageParser<MailItemData>(() => new MailItemData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MailItemData> Parser { get { return _parser; } }

    /// <summary>Field number for the "sender_text" field.</summary>
    public const int SenderTextFieldNumber = 1;
    private string senderText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderText {
      get { return senderText_; }
      set {
        senderText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 3;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sender_role_id" field.</summary>
    public const int SenderRoleIdFieldNumber = 4;
    private string senderRoleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SenderRoleId {
      get { return senderRoleId_; }
      set {
        senderRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attach" field.</summary>
    public const int AttachFieldNumber = 5;
    private global::Datap.RoleMailAttach attach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleMailAttach Attach {
      get { return attach_; }
      set {
        attach_ = value;
      }
    }

    /// <summary>Field number for the "reward_id" field.</summary>
    public const int RewardIdFieldNumber = 6;
    private int rewardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    /// <summary>Field number for the "template" field.</summary>
    public const int TemplateFieldNumber = 7;
    private global::Datap.RoleMailTemplate template_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleMailTemplate Template {
      get { return template_; }
      set {
        template_ = value;
      }
    }

    /// <summary>Field number for the "extend" field.</summary>
    public const int ExtendFieldNumber = 8;
    private global::Datap.MailExtend extend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.MailExtend Extend {
      get { return extend_; }
      set {
        extend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderText.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderText);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (SenderRoleId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SenderRoleId);
      }
      if (attach_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Attach);
      }
      if (RewardId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RewardId);
      }
      if (template_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Template);
      }
      if (extend_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Extend);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderText);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (SenderRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderRoleId);
      }
      if (attach_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attach);
      }
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardId);
      }
      if (template_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Template);
      }
      if (extend_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extend);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SenderText = input.ReadString();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            SenderRoleId = input.ReadString();
            break;
          }
          case 42: {
            if (attach_ == null) {
              attach_ = new global::Datap.RoleMailAttach();
            }
            input.ReadMessage(attach_);
            break;
          }
          case 48: {
            RewardId = input.ReadInt32();
            break;
          }
          case 58: {
            if (template_ == null) {
              template_ = new global::Datap.RoleMailTemplate();
            }
            input.ReadMessage(template_);
            break;
          }
          case 66: {
            if (extend_ == null) {
              extend_ = new global::Datap.MailExtend();
            }
            input.ReadMessage(extend_);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMailItem : pb::IMessage {
    private static readonly pb::MessageParser<RoleMailItem> _parser = new pb::MessageParser<RoleMailItem>(() => new RoleMailItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMailItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "mid" field.</summary>
    public const int MidFieldNumber = 1;
    private string mid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mid {
      get { return mid_; }
      set {
        mid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "send_time" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private long sendTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 4;
    private long expireTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private global::Datap.MailItemData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.MailItemData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "has_read" field.</summary>
    public const int HasReadFieldNumber = 6;
    private bool hasRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRead {
      get { return hasRead_; }
      set {
        hasRead_ = value;
      }
    }

    /// <summary>Field number for the "has_attach" field.</summary>
    public const int HasAttachFieldNumber = 7;
    private bool hasAttach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAttach {
      get { return hasAttach_; }
      set {
        hasAttach_ = value;
      }
    }

    /// <summary>Field number for the "has_got_attach" field.</summary>
    public const int HasGotAttachFieldNumber = 8;
    private bool hasGotAttach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasGotAttach {
      get { return hasGotAttach_; }
      set {
        hasGotAttach_ = value;
      }
    }

    /// <summary>Field number for the "read_time" field.</summary>
    public const int ReadTimeFieldNumber = 9;
    private long readTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReadTime {
      get { return readTime_; }
      set {
        readTime_ = value;
      }
    }

    /// <summary>Field number for the "got_attach_time" field.</summary>
    public const int GotAttachTimeFieldNumber = 10;
    private long gotAttachTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GotAttachTime {
      get { return gotAttachTime_; }
      set {
        gotAttachTime_ = value;
      }
    }

    /// <summary>Field number for the "p_mail_id" field.</summary>
    public const int PMailIdFieldNumber = 11;
    private string pMailId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PMailId {
      get { return pMailId_; }
      set {
        pMailId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (SendTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SendTime);
      }
      if (ExpireTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpireTime);
      }
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      if (HasRead != false) {
        output.WriteRawTag(48);
        output.WriteBool(HasRead);
      }
      if (HasAttach != false) {
        output.WriteRawTag(56);
        output.WriteBool(HasAttach);
      }
      if (HasGotAttach != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasGotAttach);
      }
      if (ReadTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ReadTime);
      }
      if (GotAttachTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GotAttachTime);
      }
      if (PMailId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PMailId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (SendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (ExpireTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (HasRead != false) {
        size += 1 + 1;
      }
      if (HasAttach != false) {
        size += 1 + 1;
      }
      if (HasGotAttach != false) {
        size += 1 + 1;
      }
      if (ReadTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReadTime);
      }
      if (GotAttachTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GotAttachTime);
      }
      if (PMailId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PMailId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            SendTime = input.ReadInt64();
            break;
          }
          case 32: {
            ExpireTime = input.ReadInt64();
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::Datap.MailItemData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 48: {
            HasRead = input.ReadBool();
            break;
          }
          case 56: {
            HasAttach = input.ReadBool();
            break;
          }
          case 64: {
            HasGotAttach = input.ReadBool();
            break;
          }
          case 72: {
            ReadTime = input.ReadInt64();
            break;
          }
          case 80: {
            GotAttachTime = input.ReadInt64();
            break;
          }
          case 90: {
            PMailId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleMailData : pb::IMessage {
    private static readonly pb::MessageParser<RoleMailData> _parser = new pb::MessageParser<RoleMailData>(() => new RoleMailData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleMailData> Parser { get { return _parser; } }

    /// <summary>Field number for the "got_attach_mids" field.</summary>
    public const int GotAttachMidsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gotAttachMids_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gotAttachMids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GotAttachMids {
      get { return gotAttachMids_; }
    }

    /// <summary>Field number for the "last_pull_time" field.</summary>
    public const int LastPullTimeFieldNumber = 2;
    private long lastPullTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastPullTime {
      get { return lastPullTime_; }
      set {
        lastPullTime_ = value;
      }
    }

    /// <summary>Field number for the "received_pmids" field.</summary>
    public const int ReceivedPmidsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_receivedPmids_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> receivedPmids_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ReceivedPmids {
      get { return receivedPmids_; }
    }

    /// <summary>Field number for the "last_request_time" field.</summary>
    public const int LastRequestTimeFieldNumber = 4;
    private long lastRequestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRequestTime {
      get { return lastRequestTime_; }
      set {
        lastRequestTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gotAttachMids_.WriteTo(output, _repeated_gotAttachMids_codec);
      if (LastPullTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastPullTime);
      }
      receivedPmids_.WriteTo(output, _repeated_receivedPmids_codec);
      if (LastRequestTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastRequestTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gotAttachMids_.CalculateSize(_repeated_gotAttachMids_codec);
      if (LastPullTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastPullTime);
      }
      size += receivedPmids_.CalculateSize(_repeated_receivedPmids_codec);
      if (LastRequestTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRequestTime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            gotAttachMids_.AddEntriesFrom(input, _repeated_gotAttachMids_codec);
            break;
          }
          case 16: {
            LastPullTime = input.ReadInt64();
            break;
          }
          case 26: {
            receivedPmids_.AddEntriesFrom(input, _repeated_receivedPmids_codec);
            break;
          }
          case 32: {
            LastRequestTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
