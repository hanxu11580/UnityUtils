// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dscard.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum CardMisc {
    KCardMiscNone = 0,
    KMaxCardItemNum = 64,
    KMaxCardResonanceNum = 64,
    /// <summary>
    /// 卡牌星级上限
    /// </summary>
    KMaxCardStarLevel = 6,
    /// <summary>
    /// 卡牌精炼上限
    /// </summary>
    KMaxCardRefineLevel = 10,
    /// <summary>
    /// 卡牌共鸣星级上限
    /// </summary>
    KMaxCardResonanceStarLevel = 5,
    /// <summary>
    /// 品质种类数量
    /// </summary>
    KMaxCardQualityTypeNum = 7,
    /// <summary>
    /// 保底次数类型
    /// </summary>
    KMaxFakeTypeCount = 10,
    /// <summary>
    /// 卡池数上限
    /// </summary>
    KMaxLootPool = 10,
  }

  public enum DrawFakeType {
    KNone = 0,
    /// <summary>
    /// 初级伪随机
    /// </summary>
    KPrimary = 1,
    /// <summary>
    /// 中级伪随机
    /// </summary>
    KMiddle = 2,
    /// <summary>
    /// 高级伪随机
    /// </summary>
    KAdvanced = 3,
    KMax = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class Card : pb::IMessage {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 2;
    private int starLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "refine_level" field.</summary>
    public const int RefineLevelFieldNumber = 3;
    private int refineLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefineLevel {
      get { return refineLevel_; }
      set {
        refineLevel_ = value;
      }
    }

    /// <summary>Field number for the "activated" field.</summary>
    public const int ActivatedFieldNumber = 4;
    private bool activated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Activated {
      get { return activated_; }
      set {
        activated_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StarLevel);
      }
      if (RefineLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RefineLevel);
      }
      if (Activated != false) {
        output.WriteRawTag(32);
        output.WriteBool(Activated);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      if (RefineLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefineLevel);
      }
      if (Activated != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            StarLevel = input.ReadInt32();
            break;
          }
          case 24: {
            RefineLevel = input.ReadInt32();
            break;
          }
          case 32: {
            Activated = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed class CardResonance : pb::IMessage {
    private static readonly pb::MessageParser<CardResonance> _parser = new pb::MessageParser<CardResonance>(() => new CardResonance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardResonance> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleCardBag : pb::IMessage {
    private static readonly pb::MessageParser<RoleCardBag> _parser = new pb::MessageParser<RoleCardBag>(() => new RoleCardBag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleCardBag> Parser { get { return _parser; } }

    /// <summary>Field number for the "card" field.</summary>
    public const int CardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Card> _repeated_card_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Card.Parser);
    private readonly pbc::RepeatedField<global::Datap.Card> card_ = new pbc::RepeatedField<global::Datap.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Card> Card {
      get { return card_; }
    }

    /// <summary>Field number for the "resonance" field.</summary>
    public const int ResonanceFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.CardResonance> _repeated_resonance_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.CardResonance.Parser);
    private readonly pbc::RepeatedField<global::Datap.CardResonance> resonance_ = new pbc::RepeatedField<global::Datap.CardResonance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.CardResonance> Resonance {
      get { return resonance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      card_.WriteTo(output, _repeated_card_codec);
      resonance_.WriteTo(output, _repeated_resonance_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += card_.CalculateSize(_repeated_card_codec);
      size += resonance_.CalculateSize(_repeated_resonance_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            card_.AddEntriesFrom(input, _repeated_card_codec);
            break;
          }
          case 18: {
            resonance_.AddEntriesFrom(input, _repeated_resonance_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleFakeDrawCount : pb::IMessage {
    private static readonly pb::MessageParser<RoleFakeDrawCount> _parser = new pb::MessageParser<RoleFakeDrawCount>(() => new RoleFakeDrawCount());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleFakeDrawCount> Parser { get { return _parser; } }

    /// <summary>Field number for the "round_count" field.</summary>
    public const int RoundCountFieldNumber = 1;
    private int roundCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoundCount {
      get { return roundCount_; }
      set {
        roundCount_ = value;
      }
    }

    /// <summary>Field number for the "get_count" field.</summary>
    public const int GetCountFieldNumber = 2;
    private int getCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetCount {
      get { return getCount_; }
      set {
        getCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoundCount);
      }
      if (GetCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GetCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoundCount);
      }
      if (GetCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoundCount = input.ReadInt32();
            break;
          }
          case 16: {
            GetCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleDrawPoolData : pb::IMessage {
    private static readonly pb::MessageParser<RoleDrawPoolData> _parser = new pb::MessageParser<RoleDrawPoolData>(() => new RoleDrawPoolData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDrawPoolData> Parser { get { return _parser; } }

    /// <summary>Field number for the "draw_count" field.</summary>
    public const int DrawCountFieldNumber = 1;
    private uint drawCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DrawCount {
      get { return drawCount_; }
      set {
        drawCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DrawCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrawCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleDrawCountData : pb::IMessage {
    private static readonly pb::MessageParser<RoleDrawCountData> _parser = new pb::MessageParser<RoleDrawCountData>(() => new RoleDrawCountData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDrawCountData> Parser { get { return _parser; } }

    /// <summary>Field number for the "draw_count" field.</summary>
    public const int DrawCountFieldNumber = 1;
    private int drawCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DrawCount {
      get { return drawCount_; }
      set {
        drawCount_ = value;
      }
    }

    /// <summary>Field number for the "fake_draw_count" field.</summary>
    public const int FakeDrawCountFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Datap.RoleFakeDrawCount>.Codec _map_fakeDrawCount_codec
        = new pbc::MapField<int, global::Datap.RoleFakeDrawCount>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleFakeDrawCount.Parser), 18);
    private readonly pbc::MapField<int, global::Datap.RoleFakeDrawCount> fakeDrawCount_ = new pbc::MapField<int, global::Datap.RoleFakeDrawCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleFakeDrawCount> FakeDrawCount {
      get { return fakeDrawCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DrawCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DrawCount);
      }
      fakeDrawCount_.WriteTo(output, _map_fakeDrawCount_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DrawCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrawCount);
      }
      size += fakeDrawCount_.CalculateSize(_map_fakeDrawCount_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DrawCount = input.ReadInt32();
            break;
          }
          case 18: {
            fakeDrawCount_.AddEntriesFrom(input, _map_fakeDrawCount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleDrawData : pb::IMessage {
    private static readonly pb::MessageParser<RoleDrawData> _parser = new pb::MessageParser<RoleDrawData>(() => new RoleDrawData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDrawData> Parser { get { return _parser; } }

    /// <summary>Field number for the "draw_pool" field.</summary>
    public const int DrawPoolFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.RoleDrawPoolData>.Codec _map_drawPool_codec
        = new pbc::MapField<int, global::Datap.RoleDrawPoolData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleDrawPoolData.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.RoleDrawPoolData> drawPool_ = new pbc::MapField<int, global::Datap.RoleDrawPoolData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleDrawPoolData> DrawPool {
      get { return drawPool_; }
    }

    /// <summary>Field number for the "draw_count" field.</summary>
    public const int DrawCountFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Datap.RoleDrawCountData>.Codec _map_drawCount_codec
        = new pbc::MapField<int, global::Datap.RoleDrawCountData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleDrawCountData.Parser), 18);
    private readonly pbc::MapField<int, global::Datap.RoleDrawCountData> drawCount_ = new pbc::MapField<int, global::Datap.RoleDrawCountData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleDrawCountData> DrawCount {
      get { return drawCount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      drawPool_.WriteTo(output, _map_drawPool_codec);
      drawCount_.WriteTo(output, _map_drawCount_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += drawPool_.CalculateSize(_map_drawPool_codec);
      size += drawCount_.CalculateSize(_map_drawCount_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            drawPool_.AddEntriesFrom(input, _map_drawPool_codec);
            break;
          }
          case 18: {
            drawCount_.AddEntriesFrom(input, _map_drawCount_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
