// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsskin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum SkinMisc {
    KSkinMiscNone = 0,
    KMaxSkinListItemNum = 200,
    KMaxSkinStoryTaskItemNum = 10,
    /// <summary>
    /// 元素龙最高星级
    /// </summary>
    KMaxSkinStar = 5,
    /// <summary>
    /// 每条元素龙的三选一槽位数
    /// </summary>
    KMaxSkinSlots = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class RoleSkinSlotData : pb::IMessage {
    private static readonly pb::MessageParser<RoleSkinSlotData> _parser = new pb::MessageParser<RoleSkinSlotData>(() => new RoleSkinSlotData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleSkinSlotData> Parser { get { return _parser; } }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleSkinAttrItem : pb::IMessage {
    private static readonly pb::MessageParser<RoleSkinAttrItem> _parser = new pb::MessageParser<RoleSkinAttrItem>(() => new RoleSkinAttrItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleSkinAttrItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "skin_level" field.</summary>
    public const int SkinLevelFieldNumber = 1;
    private int skinLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinLevel {
      get { return skinLevel_; }
      set {
        skinLevel_ = value;
      }
    }

    /// <summary>Field number for the "skin_star_level" field.</summary>
    public const int SkinStarLevelFieldNumber = 2;
    private int skinStarLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkinStarLevel {
      get { return skinStarLevel_; }
      set {
        skinStarLevel_ = value;
      }
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 3;
    private static readonly pbc::MapField<int, global::Datap.RoleSkinSlotData>.Codec _map_slots_codec
        = new pbc::MapField<int, global::Datap.RoleSkinSlotData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleSkinSlotData.Parser), 26);
    private readonly pbc::MapField<int, global::Datap.RoleSkinSlotData> slots_ = new pbc::MapField<int, global::Datap.RoleSkinSlotData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleSkinSlotData> Slots {
      get { return slots_; }
    }

    /// <summary>Field number for the "effect_actived" field.</summary>
    public const int EffectActivedFieldNumber = 5;
    private int effectActived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectActived {
      get { return effectActived_; }
      set {
        effectActived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkinLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkinLevel);
      }
      if (SkinStarLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkinStarLevel);
      }
      slots_.WriteTo(output, _map_slots_codec);
      if (EffectActived != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EffectActived);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinLevel);
      }
      if (SkinStarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkinStarLevel);
      }
      size += slots_.CalculateSize(_map_slots_codec);
      if (EffectActived != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectActived);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkinLevel = input.ReadInt32();
            break;
          }
          case 16: {
            SkinStarLevel = input.ReadInt32();
            break;
          }
          case 26: {
            slots_.AddEntriesFrom(input, _map_slots_codec);
            break;
          }
          case 40: {
            EffectActived = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleSkinData : pb::IMessage {
    private static readonly pb::MessageParser<RoleSkinData> _parser = new pb::MessageParser<RoleSkinData>(() => new RoleSkinData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleSkinData> Parser { get { return _parser; } }

    /// <summary>Field number for the "inuse_id" field.</summary>
    public const int InuseIdFieldNumber = 1;
    private int inuseId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InuseId {
      get { return inuseId_; }
      set {
        inuseId_ = value;
      }
    }

    /// <summary>Field number for the "skin_attr" field.</summary>
    public const int SkinAttrFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Datap.RoleSkinAttrItem>.Codec _map_skinAttr_codec
        = new pbc::MapField<int, global::Datap.RoleSkinAttrItem>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleSkinAttrItem.Parser), 18);
    private readonly pbc::MapField<int, global::Datap.RoleSkinAttrItem> skinAttr_ = new pbc::MapField<int, global::Datap.RoleSkinAttrItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleSkinAttrItem> SkinAttr {
      get { return skinAttr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InuseId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(InuseId);
      }
      skinAttr_.WriteTo(output, _map_skinAttr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InuseId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InuseId);
      }
      size += skinAttr_.CalculateSize(_map_skinAttr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InuseId = input.ReadInt32();
            break;
          }
          case 18: {
            skinAttr_.AddEntriesFrom(input, _map_skinAttr_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
