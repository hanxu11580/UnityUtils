// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csequipment.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSSlotsWithEquipmentAttrs : pb::IMessage {
    private static readonly pb::MessageParser<CSSlotsWithEquipmentAttrs> _parser = new pb::MessageParser<CSSlotsWithEquipmentAttrs>(() => new CSSlotsWithEquipmentAttrs());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSSlotsWithEquipmentAttrs> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot_level" field.</summary>
    public const int SlotLevelFieldNumber = 1;
    private int slotLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotLevel {
      get { return slotLevel_; }
      set {
        slotLevel_ = value;
      }
    }

    /// <summary>Field number for the "slot_refine_level" field.</summary>
    public const int SlotRefineLevelFieldNumber = 2;
    private int slotRefineLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotRefineLevel {
      get { return slotRefineLevel_; }
      set {
        slotRefineLevel_ = value;
      }
    }

    /// <summary>Field number for the "equipment_attrs" field.</summary>
    public const int EquipmentAttrsFieldNumber = 3;
    private global::Datap.EquipmentDetailAttr equipmentAttrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.EquipmentDetailAttr EquipmentAttrs {
      get { return equipmentAttrs_; }
      set {
        equipmentAttrs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotLevel);
      }
      if (SlotRefineLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlotRefineLevel);
      }
      if (equipmentAttrs_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EquipmentAttrs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotLevel);
      }
      if (SlotRefineLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotRefineLevel);
      }
      if (equipmentAttrs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquipmentAttrs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotLevel = input.ReadInt32();
            break;
          }
          case 16: {
            SlotRefineLevel = input.ReadInt32();
            break;
          }
          case 26: {
            if (equipmentAttrs_ == null) {
              equipmentAttrs_ = new global::Datap.EquipmentDetailAttr();
            }
            input.ReadMessage(equipmentAttrs_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSEquipmentSlotLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentSlotLevelUpReq> _parser = new pb::MessageParser<CSEquipmentSlotLevelUpReq>(() => new CSEquipmentSlotLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentSlotLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 1;
    private int slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    /// <summary>Field number for the "level_up_type" field.</summary>
    public const int LevelUpTypeFieldNumber = 4;
    private global::Csp.CSEnmEquipmentLevelType levelUpType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Csp.CSEnmEquipmentLevelType LevelUpType {
      get { return levelUpType_; }
      set {
        levelUpType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
      if (LevelUpType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LevelUpType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      if (LevelUpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LevelUpType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
          case 32: {
            levelUpType_ = (global::Csp.CSEnmEquipmentLevelType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentSlotLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentSlotLevelUpResp> _parser = new pb::MessageParser<CSEquipmentSlotLevelUpResp>(() => new CSEquipmentSlotLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentSlotLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.EquipmentSlot>.Codec _map_slots_codec
        = new pbc::MapField<int, global::Datap.EquipmentSlot>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentSlot.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.EquipmentSlot> slots_ = new pbc::MapField<int, global::Datap.EquipmentSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.EquipmentSlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _map_slots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_map_slots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _map_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentSlotLevelUpNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentSlotLevelUpNotify> _parser = new pb::MessageParser<CSEquipmentSlotLevelUpNotify>(() => new CSEquipmentSlotLevelUpNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentSlotLevelUpNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentSlotBatchLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentSlotBatchLevelUpReq> _parser = new pb::MessageParser<CSEquipmentSlotBatchLevelUpReq>(() => new CSEquipmentSlotBatchLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentSlotBatchLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "slot_id" field.</summary>
    public const int SlotIdFieldNumber = 1;
    private int slotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlotId {
      get { return slotId_; }
      set {
        slotId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "target_level" field.</summary>
    public const int TargetLevelFieldNumber = 3;
    private int targetLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetLevel {
      get { return targetLevel_; }
      set {
        targetLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SlotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SlotId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (TargetLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlotId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (TargetLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SlotId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            TargetLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentSlotBatchLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentSlotBatchLevelUpResp> _parser = new pb::MessageParser<CSEquipmentSlotBatchLevelUpResp>(() => new CSEquipmentSlotBatchLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentSlotBatchLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.EquipmentSlot>.Codec _map_slots_codec
        = new pbc::MapField<int, global::Datap.EquipmentSlot>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentSlot.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.EquipmentSlot> slots_ = new pbc::MapField<int, global::Datap.EquipmentSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.EquipmentSlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _map_slots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_map_slots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _map_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentEquipPropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentEquipPropReq> _parser = new pb::MessageParser<CSEquipmentEquipPropReq>(() => new CSEquipmentEquipPropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentEquipPropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_ids" field.</summary>
    public const int EquipmentIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_equipmentIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> equipmentIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EquipmentIds {
      get { return equipmentIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipmentIds_.WriteTo(output, _repeated_equipmentIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipmentIds_.CalculateSize(_repeated_equipmentIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            equipmentIds_.AddEntriesFrom(input, _repeated_equipmentIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentEquipPropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentEquipPropResp> _parser = new pb::MessageParser<CSEquipmentEquipPropResp>(() => new CSEquipmentEquipPropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentEquipPropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.EquipmentSlot>.Codec _map_slots_codec
        = new pbc::MapField<int, global::Datap.EquipmentSlot>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentSlot.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.EquipmentSlot> slots_ = new pbc::MapField<int, global::Datap.EquipmentSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.EquipmentSlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _map_slots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_map_slots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _map_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentEquipPropNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentEquipPropNotify> _parser = new pb::MessageParser<CSEquipmentEquipPropNotify>(() => new CSEquipmentEquipPropNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentEquipPropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentDecomposeReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDecomposeReq> _parser = new pb::MessageParser<CSEquipmentDecomposeReq>(() => new CSEquipmentDecomposeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDecomposeReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_ids" field.</summary>
    public const int EquipmentIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_equipmentIds_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> equipmentIds_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> EquipmentIds {
      get { return equipmentIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipmentIds_.WriteTo(output, _repeated_equipmentIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipmentIds_.CalculateSize(_repeated_equipmentIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            equipmentIds_.AddEntriesFrom(input, _repeated_equipmentIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentDecomposeResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDecomposeResp> _parser = new pb::MessageParser<CSEquipmentDecomposeResp>(() => new CSEquipmentDecomposeResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDecomposeResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentDecomposeNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDecomposeNotify> _parser = new pb::MessageParser<CSEquipmentDecomposeNotify>(() => new CSEquipmentDecomposeNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDecomposeNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentLockPropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentLockPropReq> _parser = new pb::MessageParser<CSEquipmentLockPropReq>(() => new CSEquipmentLockPropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentLockPropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentLockPropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentLockPropResp> _parser = new pb::MessageParser<CSEquipmentLockPropResp>(() => new CSEquipmentLockPropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentLockPropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentLockPropNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentLockPropNotify> _parser = new pb::MessageParser<CSEquipmentLockPropNotify>(() => new CSEquipmentLockPropNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentLockPropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentUnlockPropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentUnlockPropReq> _parser = new pb::MessageParser<CSEquipmentUnlockPropReq>(() => new CSEquipmentUnlockPropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentUnlockPropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentUnlockPropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentUnlockPropResp> _parser = new pb::MessageParser<CSEquipmentUnlockPropResp>(() => new CSEquipmentUnlockPropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentUnlockPropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentUnlockPropNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentUnlockPropNotify> _parser = new pb::MessageParser<CSEquipmentUnlockPropNotify>(() => new CSEquipmentUnlockPropNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentUnlockPropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentCleansePropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleansePropReq> _parser = new pb::MessageParser<CSEquipmentCleansePropReq>(() => new CSEquipmentCleansePropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleansePropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentCleansePropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleansePropResp> _parser = new pb::MessageParser<CSEquipmentCleansePropResp>(() => new CSEquipmentCleansePropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleansePropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "random_attrs" field.</summary>
    public const int RandomAttrsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.EquipRandomAttr> _repeated_randomAttrs_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.EquipRandomAttr.Parser);
    private readonly pbc::RepeatedField<global::Datap.EquipRandomAttr> randomAttrs_ = new pbc::RepeatedField<global::Datap.EquipRandomAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.EquipRandomAttr> RandomAttrs {
      get { return randomAttrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      randomAttrs_.WriteTo(output, _repeated_randomAttrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += randomAttrs_.CalculateSize(_repeated_randomAttrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            randomAttrs_.AddEntriesFrom(input, _repeated_randomAttrs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentCleansePropNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleansePropNotify> _parser = new pb::MessageParser<CSEquipmentCleansePropNotify>(() => new CSEquipmentCleansePropNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleansePropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentCleanseConfirmPropReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleanseConfirmPropReq> _parser = new pb::MessageParser<CSEquipmentCleanseConfirmPropReq>(() => new CSEquipmentCleanseConfirmPropReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleanseConfirmPropReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_id" field.</summary>
    public const int EquipmentIdFieldNumber = 1;
    private long equipmentId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipmentId {
      get { return equipmentId_; }
      set {
        equipmentId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipmentId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipmentId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipmentId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipmentId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipmentId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentCleanseConfirmPropResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleanseConfirmPropResp> _parser = new pb::MessageParser<CSEquipmentCleanseConfirmPropResp>(() => new CSEquipmentCleanseConfirmPropResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleanseConfirmPropResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_detail_attr" field.</summary>
    public const int EquipmentDetailAttrFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipmentDetailAttr_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 10);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipmentDetailAttr_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> EquipmentDetailAttr {
      get { return equipmentDetailAttr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipmentDetailAttr_.WriteTo(output, _map_equipmentDetailAttr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipmentDetailAttr_.CalculateSize(_map_equipmentDetailAttr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            equipmentDetailAttr_.AddEntriesFrom(input, _map_equipmentDetailAttr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSEquipmentCleanseConfirmPropNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentCleanseConfirmPropNotify> _parser = new pb::MessageParser<CSEquipmentCleanseConfirmPropNotify>(() => new CSEquipmentCleanseConfirmPropNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentCleanseConfirmPropNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentDataReq : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDataReq> _parser = new pb::MessageParser<CSEquipmentDataReq>(() => new CSEquipmentDataReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDataReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentDataResp : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDataResp> _parser = new pb::MessageParser<CSEquipmentDataResp>(() => new CSEquipmentDataResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDataResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSEquipmentDataNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSEquipmentDataNotify> _parser = new pb::MessageParser<CSEquipmentDataNotify>(() => new CSEquipmentDataNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSEquipmentDataNotify> Parser { get { return _parser; } }

    /// <summary>Field number for the "equipment_detail_attr" field.</summary>
    public const int EquipmentDetailAttrFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec _map_equipmentDetailAttr_codec
        = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.EquipmentDetailAttr.Parser), 10);
    private readonly pbc::MapField<long, global::Datap.EquipmentDetailAttr> equipmentDetailAttr_ = new pbc::MapField<long, global::Datap.EquipmentDetailAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.EquipmentDetailAttr> EquipmentDetailAttr {
      get { return equipmentDetailAttr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      equipmentDetailAttr_.WriteTo(output, _map_equipmentDetailAttr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += equipmentDetailAttr_.CalculateSize(_map_equipmentDetailAttr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            equipmentDetailAttr_.AddEntriesFrom(input, _map_equipmentDetailAttr_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
