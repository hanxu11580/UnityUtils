// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsactivity.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum ActivityMisc {
    KActivityMiscNone = 0,
    /// <summary>
    /// 活动数据上限
    /// </summary>
    KActivityMiscMaxList = 100,
  }

  public enum ActivityStatus {
    KActivityStatusNone = 0,
    /// <summary>
    /// 未开放
    /// </summary>
    KActivityStatusToOpen = 1,
    /// <summary>
    /// 已开放
    /// </summary>
    KActivityStatusOpen = 2,
    /// <summary>
    /// 已关闭
    /// </summary>
    KActivityStatusToClear = 3,
    /// <summary>
    /// 已冻结
    /// </summary>
    KActivityStatusClear = 4,
  }

  public enum ActivityItem {
    KActivityItemNone = 0,
    /// <summary>
    /// 活动经验值
    /// </summary>
    KActivityItemExp = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class ActivityConfig : pb::IMessage {
    private static readonly pb::MessageParser<ActivityConfig> _parser = new pb::MessageParser<ActivityConfig>(() => new ActivityConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActivityConfig> Parser { get { return _parser; } }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Datap.ActivityStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.ActivityStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "show_at" field.</summary>
    public const int ShowAtFieldNumber = 2;
    private long showAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ShowAt {
      get { return showAt_; }
      set {
        showAt_ = value;
      }
    }

    /// <summary>Field number for the "start_at" field.</summary>
    public const int StartAtFieldNumber = 3;
    private long startAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartAt {
      get { return startAt_; }
      set {
        startAt_ = value;
      }
    }

    /// <summary>Field number for the "close_at" field.</summary>
    public const int CloseAtFieldNumber = 4;
    private long closeAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CloseAt {
      get { return closeAt_; }
      set {
        closeAt_ = value;
      }
    }

    /// <summary>Field number for the "clear_at" field.</summary>
    public const int ClearAtFieldNumber = 5;
    private long clearAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ClearAt {
      get { return clearAt_; }
      set {
        clearAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (ShowAt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ShowAt);
      }
      if (StartAt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartAt);
      }
      if (CloseAt != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CloseAt);
      }
      if (ClearAt != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ClearAt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ShowAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ShowAt);
      }
      if (StartAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartAt);
      }
      if (CloseAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CloseAt);
      }
      if (ClearAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ClearAt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Datap.ActivityStatus) input.ReadEnum();
            break;
          }
          case 16: {
            ShowAt = input.ReadInt64();
            break;
          }
          case 24: {
            StartAt = input.ReadInt64();
            break;
          }
          case 32: {
            CloseAt = input.ReadInt64();
            break;
          }
          case 40: {
            ClearAt = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleActivityOne : pb::IMessage {
    private static readonly pb::MessageParser<RoleActivityOne> _parser = new pb::MessageParser<RoleActivityOne>(() => new RoleActivityOne());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleActivityOne> Parser { get { return _parser; } }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private int activityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "stat_data" field.</summary>
    public const int StatDataFieldNumber = 2;
    private static readonly pbc::MapField<int, global::Datap.RoleStatOne>.Codec _map_statData_codec
        = new pbc::MapField<int, global::Datap.RoleStatOne>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.RoleStatOne.Parser), 18);
    private readonly pbc::MapField<int, global::Datap.RoleStatOne> statData_ = new pbc::MapField<int, global::Datap.RoleStatOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.RoleStatOne> StatData {
      get { return statData_; }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Datap.ActivityConfig config_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.ActivityConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(34, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> item_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ActivityId);
      }
      statData_.WriteTo(output, _map_statData_codec);
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActivityId);
      }
      size += statData_.CalculateSize(_map_statData_codec);
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ActivityId = input.ReadInt32();
            break;
          }
          case 18: {
            statData_.AddEntriesFrom(input, _map_statData_codec);
            break;
          }
          case 26: {
            if (config_ == null) {
              config_ = new global::Datap.ActivityConfig();
            }
            input.ReadMessage(config_);
            break;
          }
          case 34: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
