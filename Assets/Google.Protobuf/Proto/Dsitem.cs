// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsitem.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum ItemMisc {
    KItemMiscNone = 0,
    KMaxCurrencyNum = 50,
    KMaxItemNum = 300,
    /// <summary>
    /// 单次掉落道具数量上限
    /// </summary>
    KMaxItemNumPerRand = 50,
  }

  public enum ItemColor {
    KItemColorNone = 0,
    KItemGreen = 1,
    KItemBlue = 2,
    KItemPurple = 3,
    KItemOrange = 4,
    KItemRed = 5,
    KItemSilver = 6,
  }

  public enum AwardCause {
    CauseNone = 0,
    /// <summary>
    /// boss掉落
    /// </summary>
    BossDrop = 1,
    /// <summary>
    /// 过关掉落
    /// </summary>
    PassChapter = 2,
    /// <summary>
    /// 怪物掉落
    /// </summary>
    MonsterDrop = 3,
    /// <summary>
    /// 首次掉落
    /// </summary>
    FirstDrop = 4,
    /// <summary>
    /// 大量奖励掉落
    /// </summary>
    LargeAmount = 5,
    /// <summary>
    /// 战斗返回
    /// </summary>
    BattleReturn = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class Item : pb::IMessage {
    private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Item> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private long num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Num);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Num);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RandAward : pb::IMessage {
    private static readonly pb::MessageParser<RandAward> _parser = new pb::MessageParser<RandAward>(() => new RandAward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RandAward> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> items_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 2;
    private global::Datap.AwardCause cause_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.AwardCause Cause {
      get { return cause_; }
      set {
        cause_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (Cause != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cause);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (Cause != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cause);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            cause_ = (global::Datap.AwardCause) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleItemBag : pb::IMessage {
    private static readonly pb::MessageParser<RoleItemBag> _parser = new pb::MessageParser<RoleItemBag>(() => new RoleItemBag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleItemBag> Parser { get { return _parser; } }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_currency_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> currency_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Currency {
      get { return currency_; }
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.Item.Parser);
    private readonly pbc::RepeatedField<global::Datap.Item> item_ = new pbc::RepeatedField<global::Datap.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.Item> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      currency_.WriteTo(output, _repeated_currency_codec);
      item_.WriteTo(output, _repeated_item_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += currency_.CalculateSize(_repeated_currency_codec);
      size += item_.CalculateSize(_repeated_item_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            currency_.AddEntriesFrom(input, _repeated_currency_codec);
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
