// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrank.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSRankGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetReq> _parser = new pb::MessageParser<CSRankGetReq>(() => new CSRankGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 2;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subtype);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Subtype = input.ReadInt32();
            break;
          }
          case 24: {
            Page = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankGetResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetResp> _parser = new pb::MessageParser<CSRankGetResp>(() => new CSRankGetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "page_rank" field.</summary>
    public const int PageRankFieldNumber = 1;
    private global::Datap.RankData pageRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RankData PageRank {
      get { return pageRank_; }
      set {
        pageRank_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "total_page" field.</summary>
    public const int TotalPageFieldNumber = 3;
    private int totalPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPage {
      get { return totalPage_; }
      set {
        totalPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pageRank_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PageRank);
      }
      if (Page != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Page);
      }
      if (TotalPage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalPage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pageRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PageRank);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (TotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pageRank_ == null) {
              pageRank_ = new global::Datap.RankData();
            }
            input.ReadMessage(pageRank_);
            break;
          }
          case 16: {
            Page = input.ReadInt32();
            break;
          }
          case 24: {
            TotalPage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankingGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRankingGetReq> _parser = new pb::MessageParser<CSRankingGetReq>(() => new CSRankingGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankingGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 3;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Subtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Subtype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankingGetResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRankingGetResp> _parser = new pb::MessageParser<CSRankingGetResp>(() => new CSRankingGetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankingGetResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 3;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "ranking" field.</summary>
    public const int RankingFieldNumber = 4;
    private int ranking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ranking {
      get { return ranking_; }
      set {
        ranking_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Subtype);
      }
      if (Ranking != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Ranking);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      if (Ranking != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ranking);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Subtype = input.ReadInt32();
            break;
          }
          case 32: {
            Ranking = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSTopRankGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CSTopRankGetReq> _parser = new pb::MessageParser<CSTopRankGetReq>(() => new CSTopRankGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTopRankGetReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 2;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Subtype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSTopRankGetResp : pb::IMessage {
    private static readonly pb::MessageParser<CSTopRankGetResp> _parser = new pb::MessageParser<CSTopRankGetResp>(() => new CSTopRankGetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTopRankGetResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subtype" field.</summary>
    public const int SubtypeFieldNumber = 2;
    private int subtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Subtype {
      get { return subtype_; }
      set {
        subtype_ = value;
      }
    }

    /// <summary>Field number for the "top_rank" field.</summary>
    public const int TopRankFieldNumber = 3;
    private global::Datap.RankData topRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RankData TopRank {
      get { return topRank_; }
      set {
        topRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Subtype != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Subtype);
      }
      if (topRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TopRank);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Subtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Subtype);
      }
      if (topRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopRank);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Subtype = input.ReadInt32();
            break;
          }
          case 26: {
            if (topRank_ == null) {
              topRank_ = new global::Datap.RankData();
            }
            input.ReadMessage(topRank_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSTopOneRankGetReq : pb::IMessage {
    private static readonly pb::MessageParser<CSTopOneRankGetReq> _parser = new pb::MessageParser<CSTopOneRankGetReq>(() => new CSTopOneRankGetReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTopOneRankGetReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSTopOneRankGetResp : pb::IMessage {
    private static readonly pb::MessageParser<CSTopOneRankGetResp> _parser = new pb::MessageParser<CSTopOneRankGetResp>(() => new CSTopOneRankGetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSTopOneRankGetResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.RankData> _repeated_rank_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.RankData.Parser);
    private readonly pbc::RepeatedField<global::Datap.RankData> rank_ = new pbc::RepeatedField<global::Datap.RankData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RankData> Rank {
      get { return rank_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rank_.WriteTo(output, _repeated_rank_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rank_.CalculateSize(_repeated_rank_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rank_.AddEntriesFrom(input, _repeated_rank_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankGetAwardReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetAwardReq> _parser = new pb::MessageParser<CSRankGetAwardReq>(() => new CSRankGetAwardReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetAwardReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "record_id" field.</summary>
    public const int RecordIdFieldNumber = 2;
    private int recordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (RecordId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RecordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            RecordId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankGetAwardResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetAwardResp> _parser = new pb::MessageParser<CSRankGetAwardResp>(() => new CSRankGetAwardResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetAwardResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "record_id" field.</summary>
    public const int RecordIdFieldNumber = 2;
    private int recordId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecordId {
      get { return recordId_; }
      set {
        recordId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (RecordId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecordId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (RecordId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecordId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            RecordId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankGetRecordReq : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetRecordReq> _parser = new pb::MessageParser<CSRankGetRecordReq>(() => new CSRankGetRecordReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetRecordReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSRankGetRecordResp : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetRecordResp> _parser = new pb::MessageParser<CSRankGetRecordResp>(() => new CSRankGetRecordResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetRecordResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Datap.RankRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RankRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (record_ == null) {
              record_ = new global::Datap.RankRecord();
            }
            input.ReadMessage(record_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSRankGetRecordNotify : pb::IMessage {
    private static readonly pb::MessageParser<CSRankGetRecordNotify> _parser = new pb::MessageParser<CSRankGetRecordNotify>(() => new CSRankGetRecordNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRankGetRecordNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
