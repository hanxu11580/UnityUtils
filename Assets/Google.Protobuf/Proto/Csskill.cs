// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csskill.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== struct define ==========
  /// </summary>
  public sealed class CSActivatedCard : pb::IMessage {
    private static readonly pb::MessageParser<CSActivatedCard> _parser = new pb::MessageParser<CSActivatedCard>(() => new CSActivatedCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSActivatedCard> Parser { get { return _parser; } }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 1;
    private int cardId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 2;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "spPoint" field.</summary>
    public const int SpPointFieldNumber = 4;
    private int spPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpPoint {
      get { return spPoint_; }
      set {
        spPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CardId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardId);
      }
      if (Star != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Star);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (SpPoint != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SpPoint);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardId);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SpPoint != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpPoint);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CardId = input.ReadInt32();
            break;
          }
          case 16: {
            Star = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 32: {
            SpPoint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUltimateSkillAttr : pb::IMessage {
    private static readonly pb::MessageParser<CSUltimateSkillAttr> _parser = new pb::MessageParser<CSUltimateSkillAttr>(() => new CSUltimateSkillAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUltimateSkillAttr> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 2;
    private int starLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StarLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StarLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            StarLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSActiveUltimateSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CSActiveUltimateSkillReq> _parser = new pb::MessageParser<CSActiveUltimateSkillReq>(() => new CSActiveUltimateSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSActiveUltimateSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSActiveUltimateSkillResp : pb::IMessage {
    private static readonly pb::MessageParser<CSActiveUltimateSkillResp> _parser = new pb::MessageParser<CSActiveUltimateSkillResp>(() => new CSActiveUltimateSkillResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSActiveUltimateSkillResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUseUltimateSkillReq : pb::IMessage {
    private static readonly pb::MessageParser<CSUseUltimateSkillReq> _parser = new pb::MessageParser<CSUseUltimateSkillReq>(() => new CSUseUltimateSkillReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseUltimateSkillReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUseUltimateSkillResp : pb::IMessage {
    private static readonly pb::MessageParser<CSUseUltimateSkillResp> _parser = new pb::MessageParser<CSUseUltimateSkillResp>(() => new CSUseUltimateSkillResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUseUltimateSkillResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUltimateSkillStarLevelUpReq : pb::IMessage {
    private static readonly pb::MessageParser<CSUltimateSkillStarLevelUpReq> _parser = new pb::MessageParser<CSUltimateSkillStarLevelUpReq>(() => new CSUltimateSkillStarLevelUpReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUltimateSkillStarLevelUpReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    /// <summary>Field number for the "next_level" field.</summary>
    public const int NextLevelFieldNumber = 3;
    private int nextLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NextLevel {
      get { return nextLevel_; }
      set {
        nextLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
      if (NextLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NextLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      if (NextLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NextLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
          case 24: {
            NextLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSUltimateSkillStarLevelUpResp : pb::IMessage {
    private static readonly pb::MessageParser<CSUltimateSkillStarLevelUpResp> _parser = new pb::MessageParser<CSUltimateSkillStarLevelUpResp>(() => new CSUltimateSkillStarLevelUpResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSUltimateSkillStarLevelUpResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 1;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "curr_level" field.</summary>
    public const int CurrLevelFieldNumber = 2;
    private int currLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrLevel {
      get { return currLevel_; }
      set {
        currLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SkillId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SkillId);
      }
      if (CurrLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (CurrLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SkillId = input.ReadInt32();
            break;
          }
          case 16: {
            CurrLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
