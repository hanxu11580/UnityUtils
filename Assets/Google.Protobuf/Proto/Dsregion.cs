// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsregion.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum RegionMisc {
    KRegionMiscNone = 0,
    KMaxProficientItemNum = 64,
    KMaxRegionItemNum = 64,
    KInitRegionItemNum = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class ProficientItem : pb::IMessage {
    private static readonly pb::MessageParser<ProficientItem> _parser = new pb::MessageParser<ProficientItem>(() => new ProficientItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProficientItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "resid" field.</summary>
    public const int ResidFieldNumber = 1;
    private int resid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resid {
      get { return resid_; }
      set {
        resid_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Resid);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resid);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Resid = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RegionItem : pb::IMessage {
    private static readonly pb::MessageParser<RegionItem> _parser = new pb::MessageParser<RegionItem>(() => new RegionItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionItem> Parser { get { return _parser; } }

    /// <summary>Field number for the "regionid" field.</summary>
    public const int RegionidFieldNumber = 1;
    private int regionid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Regionid {
      get { return regionid_; }
      set {
        regionid_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private int current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    /// <summary>Field number for the "consumed" field.</summary>
    public const int ConsumedFieldNumber = 3;
    private int consumed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Consumed {
      get { return consumed_; }
      set {
        consumed_ = value;
      }
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Datap.ProficientItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(34, global::Datap.ProficientItem.Parser);
    private readonly pbc::RepeatedField<global::Datap.ProficientItem> items_ = new pbc::RepeatedField<global::Datap.ProficientItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.ProficientItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Regionid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Regionid);
      }
      if (Current != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Current);
      }
      if (Consumed != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Consumed);
      }
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Regionid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Regionid);
      }
      if (Current != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Current);
      }
      if (Consumed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Consumed);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Regionid = input.ReadInt32();
            break;
          }
          case 16: {
            Current = input.ReadInt32();
            break;
          }
          case 24: {
            Consumed = input.ReadInt32();
            break;
          }
          case 34: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleReginData : pb::IMessage {
    private static readonly pb::MessageParser<RoleReginData> _parser = new pb::MessageParser<RoleReginData>(() => new RoleReginData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleReginData> Parser { get { return _parser; } }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.RegionItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.RegionItem.Parser);
    private readonly pbc::RepeatedField<global::Datap.RegionItem> items_ = new pbc::RepeatedField<global::Datap.RegionItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.RegionItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "stage_chapters_proficient" field.</summary>
    public const int StageChaptersProficientFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_stageChaptersProficient_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> stageChaptersProficient_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> StageChaptersProficient {
      get { return stageChaptersProficient_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      stageChaptersProficient_.WriteTo(output, _map_stageChaptersProficient_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      size += stageChaptersProficient_.CalculateSize(_map_stageChaptersProficient_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 18: {
            stageChaptersProficient_.AddEntriesFrom(input, _map_stageChaptersProficient_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
