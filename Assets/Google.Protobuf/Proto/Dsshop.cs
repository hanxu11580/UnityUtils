// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsshop.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum ExchageShopMisc {
    Undefined = 0,
    ShopMaxNum = 10,
    GoodsMaxNum = 10,
    GoodsHistoryMaxNum = 500,
    ShopTypeNum = 16,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class ExchangeShopGoods : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeShopGoods> _parser = new pb::MessageParser<ExchangeShopGoods>(() => new ExchangeShopGoods());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeShopGoods> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "buy_cnt" field.</summary>
    public const int BuyCntFieldNumber = 3;
    private int buyCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuyCnt {
      get { return buyCnt_; }
      set {
        buyCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tick);
      }
      if (BuyCnt != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BuyCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      if (BuyCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tick = input.ReadInt64();
            break;
          }
          case 24: {
            BuyCnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ExchangeShop : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeShop> _parser = new pb::MessageParser<ExchangeShop>(() => new ExchangeShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    /// <summary>Field number for the "goods" field.</summary>
    public const int GoodsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Datap.ExchangeShopGoods> _repeated_goods_codec
        = pb::FieldCodec.ForMessage(26, global::Datap.ExchangeShopGoods.Parser);
    private readonly pbc::RepeatedField<global::Datap.ExchangeShopGoods> goods_ = new pbc::RepeatedField<global::Datap.ExchangeShopGoods>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.ExchangeShopGoods> Goods {
      get { return goods_; }
    }

    /// <summary>Field number for the "refresh_cnt" field.</summary>
    public const int RefreshCntFieldNumber = 4;
    private int refreshCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshCnt {
      get { return refreshCnt_; }
      set {
        refreshCnt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Tick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tick);
      }
      goods_.WriteTo(output, _repeated_goods_codec);
      if (RefreshCnt != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RefreshCnt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      size += goods_.CalculateSize(_repeated_goods_codec);
      if (RefreshCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshCnt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Tick = input.ReadInt64();
            break;
          }
          case 26: {
            goods_.AddEntriesFrom(input, _repeated_goods_codec);
            break;
          }
          case 32: {
            RefreshCnt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class ExchangeGoodsHistory : pb::IMessage {
    private static readonly pb::MessageParser<ExchangeGoodsHistory> _parser = new pb::MessageParser<ExchangeGoodsHistory>(() => new ExchangeGoodsHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeGoodsHistory> Parser { get { return _parser; } }

    /// <summary>Field number for the "goods_id" field.</summary>
    public const int GoodsIdFieldNumber = 1;
    private int goodsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GoodsId {
      get { return goodsId_; }
      set {
        goodsId_ = value;
      }
    }

    /// <summary>Field number for the "tick" field.</summary>
    public const int TickFieldNumber = 2;
    private long tick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Tick {
      get { return tick_; }
      set {
        tick_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GoodsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GoodsId);
      }
      if (Tick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Tick);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GoodsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoodsId);
      }
      if (Tick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Tick);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GoodsId = input.ReadInt32();
            break;
          }
          case 16: {
            Tick = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class RoleExchangeShop : pb::IMessage {
    private static readonly pb::MessageParser<RoleExchangeShop> _parser = new pb::MessageParser<RoleExchangeShop>(() => new RoleExchangeShop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleExchangeShop> Parser { get { return _parser; } }

    /// <summary>Field number for the "shop" field.</summary>
    public const int ShopFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Datap.ExchangeShop> _repeated_shop_codec
        = pb::FieldCodec.ForMessage(10, global::Datap.ExchangeShop.Parser);
    private readonly pbc::RepeatedField<global::Datap.ExchangeShop> shop_ = new pbc::RepeatedField<global::Datap.ExchangeShop>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.ExchangeShop> Shop {
      get { return shop_; }
    }

    /// <summary>Field number for the "goods_history" field.</summary>
    public const int GoodsHistoryFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Datap.ExchangeGoodsHistory> _repeated_goodsHistory_codec
        = pb::FieldCodec.ForMessage(18, global::Datap.ExchangeGoodsHistory.Parser);
    private readonly pbc::RepeatedField<global::Datap.ExchangeGoodsHistory> goodsHistory_ = new pbc::RepeatedField<global::Datap.ExchangeGoodsHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Datap.ExchangeGoodsHistory> GoodsHistory {
      get { return goodsHistory_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shop_.WriteTo(output, _repeated_shop_codec);
      goodsHistory_.WriteTo(output, _repeated_goodsHistory_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shop_.CalculateSize(_repeated_shop_codec);
      size += goodsHistory_.CalculateSize(_repeated_goodsHistory_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            shop_.AddEntriesFrom(input, _repeated_shop_codec);
            break;
          }
          case 18: {
            goodsHistory_.AddEntriesFrom(input, _repeated_goodsHistory_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
