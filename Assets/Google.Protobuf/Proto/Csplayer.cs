// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csplayer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Csp {

  #region Messages
  /// <summary>
  ///========== proto define ==========
  /// </summary>
  public sealed class CSPlayerRecommendReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerRecommendReq> _parser = new pb::MessageParser<CSPlayerRecommendReq>(() => new CSPlayerRecommendReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerRecommendReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed class CSPlayerRecommendResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerRecommendResp> _parser = new pb::MessageParser<CSPlayerRecommendResp>(() => new CSPlayerRecommendResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerRecommendResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Datap.PlayerBriefInfo>.Codec _map_infos_codec
        = new pbc::MapField<long, global::Datap.PlayerBriefInfo>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.PlayerBriefInfo.Parser), 10);
    private readonly pbc::MapField<long, global::Datap.PlayerBriefInfo> infos_ = new pbc::MapField<long, global::Datap.PlayerBriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.PlayerBriefInfo> Infos {
      get { return infos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _map_infos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_map_infos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _map_infos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerBatchInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerBatchInfoReq> _parser = new pb::MessageParser<CSPlayerBatchInfoReq>(() => new CSPlayerBatchInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerBatchInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uids" field.</summary>
    public const int UidsFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_uids_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> uids_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Uids {
      get { return uids_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _repeated_uids_codec);
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uids_.CalculateSize(_repeated_uids_codec);
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uids_.AddEntriesFrom(input, _repeated_uids_codec);
            break;
          }
          case 16: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerBatchInfoResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerBatchInfoResp> _parser = new pb::MessageParser<CSPlayerBatchInfoResp>(() => new CSPlayerBatchInfoResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerBatchInfoResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Datap.PlayerBriefInfo>.Codec _map_infos_codec
        = new pbc::MapField<long, global::Datap.PlayerBriefInfo>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Datap.PlayerBriefInfo.Parser), 10);
    private readonly pbc::MapField<long, global::Datap.PlayerBriefInfo> infos_ = new pbc::MapField<long, global::Datap.PlayerBriefInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Datap.PlayerBriefInfo> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private int reason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _map_infos_codec);
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += infos_.CalculateSize(_map_infos_codec);
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _map_infos_codec);
            break;
          }
          case 16: {
            Reason = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerInfoReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerInfoReq> _parser = new pb::MessageParser<CSPlayerInfoReq>(() => new CSPlayerInfoReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerInfoReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private long uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerInfoResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerInfoResp> _parser = new pb::MessageParser<CSPlayerInfoResp>(() => new CSPlayerInfoResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerInfoResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::Datap.RoleData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Datap.RoleData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::Datap.RoleData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerSearchReq : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerSearchReq> _parser = new pb::MessageParser<CSPlayerSearchReq>(() => new CSPlayerSearchReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerSearchReq> Parser { get { return _parser; } }

    /// <summary>Field number for the "cont" field.</summary>
    public const int ContFieldNumber = 1;
    private string cont_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cont {
      get { return cont_; }
      set {
        cont_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cont.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cont);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cont.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cont);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cont = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class CSPlayerSearchResp : pb::IMessage {
    private static readonly pb::MessageParser<CSPlayerSearchResp> _parser = new pb::MessageParser<CSPlayerSearchResp>(() => new CSPlayerSearchResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSPlayerSearchResp> Parser { get { return _parser; } }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_list_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> list_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
