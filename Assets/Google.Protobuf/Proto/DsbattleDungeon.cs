// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsbattle_dungeon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::ILRuntime.Protobuf;
using pbc = global::ILRuntime.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Datap {

  #region Enums
  /// <summary>
  /// ================= enum define =================
  /// </summary>
  public enum DungeonMisc {
    /// <summary>
    /// None
    /// </summary>
    KDungeonMiscNone = 0,
    /// <summary>
    /// 每种子类型关卡数
    /// </summary>
    KDungeonChapterPerSubType = 120,
    /// <summary>
    /// 每种类型的子类型数
    /// </summary>
    KDungeonSubTypePerType = 20,
    /// <summary>
    /// 日常本类型
    /// </summary>
    KDungeonTypes = 5,
    /// <summary>
    /// 战斗失败返还体力百分比
    /// </summary>
    KDungeonFailReturnEnergyPct = 90,
    /// <summary>
    /// 未首通时战斗失败返还体力百分比
    /// </summary>
    KDungeonFailReturnFirstEnergyPct = 100,
  }

  #endregion

  #region Messages
  /// <summary>
  /// ================= message define =================
  /// </summary>
  public sealed class DungeonSubTypeData : pb::IMessage {
    private static readonly pb::MessageParser<DungeonSubTypeData> _parser = new pb::MessageParser<DungeonSubTypeData>(() => new DungeonSubTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonSubTypeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 1;
    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 2;
    private long beginTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "curr_chapter_id" field.</summary>
    public const int CurrChapterIdFieldNumber = 3;
    private int currChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrChapterId {
      get { return currChapterId_; }
      set {
        currChapterId_ = value;
      }
    }

    /// <summary>Field number for the "max_finished_chapter_id" field.</summary>
    public const int MaxFinishedChapterIdFieldNumber = 4;
    private int maxFinishedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxFinishedChapterId {
      get { return maxFinishedChapterId_; }
      set {
        maxFinishedChapterId_ = value;
      }
    }

    /// <summary>Field number for the "battle_count" field.</summary>
    public const int BattleCountFieldNumber = 5;
    private static readonly pbc::MapField<int, int>.Codec _map_battleCount_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 42);
    private readonly pbc::MapField<int, int> battleCount_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> BattleCount {
      get { return battleCount_; }
    }

    /// <summary>Field number for the "max_tried_chapter_id" field.</summary>
    public const int MaxTriedChapterIdFieldNumber = 6;
    private int maxTriedChapterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxTriedChapterId {
      get { return maxTriedChapterId_; }
      set {
        maxTriedChapterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsPlaying != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsPlaying);
      }
      if (BeginTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BeginTime);
      }
      if (CurrChapterId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CurrChapterId);
      }
      if (MaxFinishedChapterId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxFinishedChapterId);
      }
      battleCount_.WriteTo(output, _map_battleCount_codec);
      if (MaxTriedChapterId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxTriedChapterId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (BeginTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BeginTime);
      }
      if (CurrChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrChapterId);
      }
      if (MaxFinishedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFinishedChapterId);
      }
      size += battleCount_.CalculateSize(_map_battleCount_codec);
      if (MaxTriedChapterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxTriedChapterId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 16: {
            BeginTime = input.ReadInt64();
            break;
          }
          case 24: {
            CurrChapterId = input.ReadInt32();
            break;
          }
          case 32: {
            MaxFinishedChapterId = input.ReadInt32();
            break;
          }
          case 42: {
            battleCount_.AddEntriesFrom(input, _map_battleCount_codec);
            break;
          }
          case 48: {
            MaxTriedChapterId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class DungeonTypeData : pb::IMessage {
    private static readonly pb::MessageParser<DungeonTypeData> _parser = new pb::MessageParser<DungeonTypeData>(() => new DungeonTypeData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonTypeData> Parser { get { return _parser; } }

    /// <summary>Field number for the "unlocked" field.</summary>
    public const int UnlockedFieldNumber = 1;
    private bool unlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unlocked {
      get { return unlocked_; }
      set {
        unlocked_ = value;
      }
    }

    /// <summary>Field number for the "last_refresh_data_time" field.</summary>
    public const int LastRefreshDataTimeFieldNumber = 2;
    private long lastRefreshDataTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastRefreshDataTime {
      get { return lastRefreshDataTime_; }
      set {
        lastRefreshDataTime_ = value;
      }
    }

    /// <summary>Field number for the "sub_types_data" field.</summary>
    public const int SubTypesDataFieldNumber = 5;
    private static readonly pbc::MapField<int, global::Datap.DungeonSubTypeData>.Codec _map_subTypesData_codec
        = new pbc::MapField<int, global::Datap.DungeonSubTypeData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.DungeonSubTypeData.Parser), 42);
    private readonly pbc::MapField<int, global::Datap.DungeonSubTypeData> subTypesData_ = new pbc::MapField<int, global::Datap.DungeonSubTypeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.DungeonSubTypeData> SubTypesData {
      get { return subTypesData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unlocked != false) {
        output.WriteRawTag(8);
        output.WriteBool(Unlocked);
      }
      if (LastRefreshDataTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastRefreshDataTime);
      }
      subTypesData_.WriteTo(output, _map_subTypesData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unlocked != false) {
        size += 1 + 1;
      }
      if (LastRefreshDataTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastRefreshDataTime);
      }
      size += subTypesData_.CalculateSize(_map_subTypesData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Unlocked = input.ReadBool();
            break;
          }
          case 16: {
            LastRefreshDataTime = input.ReadInt64();
            break;
          }
          case 42: {
            subTypesData_.AddEntriesFrom(input, _map_subTypesData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class RoleDungeonData : pb::IMessage {
    private static readonly pb::MessageParser<RoleDungeonData> _parser = new pb::MessageParser<RoleDungeonData>(() => new RoleDungeonData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDungeonData> Parser { get { return _parser; } }

    /// <summary>Field number for the "dungeon_types_data" field.</summary>
    public const int DungeonTypesDataFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Datap.DungeonTypeData>.Codec _map_dungeonTypesData_codec
        = new pbc::MapField<int, global::Datap.DungeonTypeData>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Datap.DungeonTypeData.Parser), 10);
    private readonly pbc::MapField<int, global::Datap.DungeonTypeData> dungeonTypesData_ = new pbc::MapField<int, global::Datap.DungeonTypeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Datap.DungeonTypeData> DungeonTypesData {
      get { return dungeonTypesData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dungeonTypesData_.WriteTo(output, _map_dungeonTypesData_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dungeonTypesData_.CalculateSize(_map_dungeonTypesData_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dungeonTypesData_.AddEntriesFrom(input, _map_dungeonTypesData_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
